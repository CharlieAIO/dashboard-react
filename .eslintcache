[{"E:\\dashboard-react\\src\\index.js":"1","E:\\dashboard-react\\src\\reportWebVitals.js":"2","E:\\dashboard-react\\src\\App.js":"3","E:\\dashboard-react\\src\\components\\users\\users.js":"4","E:\\dashboard-react\\src\\components\\home\\home.js":"5","E:\\dashboard-react\\src\\components\\adminNav.js":"6","E:\\dashboard-react\\src\\components\\adminSearch.js":"7","E:\\dashboard-react\\src\\components\\home\\planModal.js":"8","E:\\dashboard-react\\src\\components\\home\\restockModal.js":"9","E:\\dashboard-react\\src\\components\\licenses\\licenses.js":"10","E:\\dashboard-react\\src\\components\\licenses\\licenseModal.js":"11","E:\\dashboard-react\\src\\components\\licenses\\table.js":"12","E:\\dashboard-react\\src\\components\\users\\table.js":"13","E:\\dashboard-react\\src\\components\\settings\\settings.js":"14","E:\\dashboard-react\\src\\components\\home\\planTable.js":"15","E:\\dashboard-react\\src\\components\\home\\restockTable.js":"16","E:\\dashboard-react\\src\\components\\siteHomePage\\home.js":"17","E:\\dashboard-react\\src\\components\\userDashboard\\dashboard.js":"18","E:\\dashboard-react\\src\\components\\bindPage\\bindPage.js":"19","E:\\dashboard-react\\src\\components\\userNav.js":"20","E:\\dashboard-react\\src\\components\\home\\planEditModal.js":"21","E:\\dashboard-react\\src\\components\\purchasePage\\purchase.js":"22","E:\\dashboard-react\\src\\components\\purchasePage\\checkout.js":"23","E:\\dashboard-react\\src\\components\\userDashboard\\renewModal.js":"24","E:\\dashboard-react\\src\\components\\userDashboard\\renew.js":"25"},{"size":265,"mtime":1611228962182,"results":"26","hashOfConfig":"27"},{"size":362,"mtime":1611220658625,"results":"28","hashOfConfig":"27"},{"size":1447,"mtime":1612543842334,"results":"29","hashOfConfig":"27"},{"size":4508,"mtime":1613570716856,"results":"30","hashOfConfig":"27"},{"size":8684,"mtime":1613853977504,"results":"31","hashOfConfig":"27"},{"size":13413,"mtime":1613920780598,"results":"32","hashOfConfig":"27"},{"size":6187,"mtime":1613501899431,"results":"33","hashOfConfig":"27"},{"size":24985,"mtime":1613850053160,"results":"34","hashOfConfig":"27"},{"size":9405,"mtime":1613854627960,"results":"35","hashOfConfig":"27"},{"size":5772,"mtime":1613570501002,"results":"36","hashOfConfig":"27"},{"size":8996,"mtime":1612178535536,"results":"37","hashOfConfig":"27"},{"size":10512,"mtime":1613571220688,"results":"38","hashOfConfig":"27"},{"size":7444,"mtime":1613571235174,"results":"39","hashOfConfig":"27"},{"size":19108,"mtime":1613566963793,"results":"40","hashOfConfig":"27"},{"size":7748,"mtime":1613847506388,"results":"41","hashOfConfig":"27"},{"size":8159,"mtime":1612973237116,"results":"42","hashOfConfig":"27"},{"size":4693,"mtime":1613921262216,"results":"43","hashOfConfig":"27"},{"size":18279,"mtime":1613920751083,"results":"44","hashOfConfig":"27"},{"size":6309,"mtime":1613920743894,"results":"45","hashOfConfig":"27"},{"size":1313,"mtime":1613517623113,"results":"46","hashOfConfig":"27"},{"size":21533,"mtime":1613853148831,"results":"47","hashOfConfig":"27"},{"size":4645,"mtime":1613127447418,"results":"48","hashOfConfig":"27"},{"size":8248,"mtime":1613938957441,"results":"49","hashOfConfig":"27"},{"size":2562,"mtime":1613133917948,"results":"50","hashOfConfig":"27"},{"size":4402,"mtime":1613136549885,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"bywc2m",{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"65"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"65"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"65"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"65"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"65"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"65"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"65"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"95","messages":"96","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"97","messages":"98","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"99","messages":"100","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"65"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"65"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"107","messages":"108","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"109","messages":"110","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"65"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"65"},"E:\\dashboard-react\\src\\index.js",[],"E:\\dashboard-react\\src\\reportWebVitals.js",[],"E:\\dashboard-react\\src\\App.js",["115"],"E:\\dashboard-react\\src\\components\\users\\users.js",["116","117"],"E:\\dashboard-react\\src\\components\\home\\home.js",["118","119"],"E:\\dashboard-react\\src\\components\\adminNav.js",["120","121","122","123","124","125","126","127"],"import '../static/styles/main.css'; \r\nimport { NavLink, Link } from 'react-router-dom'\r\nimport { React, useEffect, useState } from 'react';\r\nimport { Switch } from '@headlessui/react'\r\nimport { AiOutlineHome, AiOutlineCloseCircle } from 'react-icons/ai';\r\nimport { BiExport, BiSun, BiMoon } from 'react-icons/bi';\r\nimport { FiUsers, FiSettings } from 'react-icons/fi';\r\nimport { IoKeyOutline } from 'react-icons/io5';\r\nimport  { useHistory  } from 'react-router-dom'\r\n\r\nconst AdminNavigation = () =>  {\r\n    let history = useHistory()\r\n    const [appName, setAppName] = useState(\"\")\r\n    const [appImage, setAppImage] = useState(\"\")\r\n    const [darkMode, setDarkMode] = useState(false)\r\n    const [loaded, setLoaded] = useState(false)\r\n\r\n    useEffect( async () => {\r\n        var response = await fetch('/accounts/user/data')\r\n        if(response.ok) {\r\n            var responseBody = await response.json()\r\n            if(responseBody.admin == false) history.push('/')\r\n            setAppName(responseBody.name)\r\n            setAppImage(responseBody.serverImage)\r\n            setLoaded(true)\r\n        }\r\n        if(response.status == 403) window.location = '/'\r\n    })\r\n\r\n    const changeDarkMode = (e) => {\r\n        if(e == true) {\r\n            // dark mode on\r\n            console.log(document.documentElement)\r\n            document.documentElement.classList.add('dark');\r\n            localStorage.setItem(\"mode\",\"#0e1c2f\")\r\n        }else{\r\n            // dark mode off\r\n            document.documentElement.classList.remove('dark');\r\n            localStorage.setItem(\"mode\",\"white\")\r\n        }\r\n    }\r\n\r\n\r\n    // render() {\r\n        return (\r\n            \r\n            <div className=\"h-screen flex\">\r\n                \r\n\r\n                <div className=\"md:hidden\">\r\n                    \r\n                    <div className=\"fixed inset-0 flex z-40\" id=\"mob-screen\">\r\n    \r\n                    <div className=\"fixed inset-0\" aria-hidden=\"true\">\r\n                        <div className=\"absolute inset-0 bg-gray-600 opacity-75\"></div>\r\n                    </div>\r\n    \r\n                    <div className=\"relative flex-1 flex flex-col max-w-xs w-full pt-5 pb-4 bg-other-100 dark:bg-darkOther-100 transition-transform ease-in-out duration-200\" id=\"mob-nav\">\r\n                        <div className=\"absolute top-0 right-0 -mr-12 pt-2\">\r\n                        <button className=\"ml-1 flex items-center justify-center h-10 w-10 rounded-full focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white\" onClick={() => {\r\n                            document.querySelector('#mob-nav').classList.contains('hidden') ? document.querySelector('#mob-nav').classList.remove('hidden') : document.querySelector('#mob-nav').classList.add('hidden')\r\n                            document.querySelector('#mob-screen').classList.contains('hidden') ? document.querySelector('#mob-screen').classList.remove('hidden') : document.querySelector('#mob-screen').classList.add('hidden')\r\n                        }}>\r\n                            <span className=\"sr-only\">Close sidebar</span>\r\n                            <AiOutlineCloseCircle className=\"h-6 w-6 text-white\" id='hide'/>\r\n                        </button>\r\n                        </div>\r\n                        \r\n                        <div className=\"flex-shrink-0 flex items-center px-4\">\r\n                        <img alt={appName} className=\"h-16 w-auto rounded-full select-none\" src={appImage} alt={appName} /> <span className=\"text-2xl font-medium text-other-200 ml-2 text-20 dark:text-other-100 select-none\">{appName}</span>\r\n                        </div>\r\n    \r\n                        <div className=\"mt-5 flex-1 h-0 overflow-y-auto \" >\r\n                        <nav className=\"px-2 space-y-1 \">\r\n                            <NavLink to='/home' activeClassName=\"text-green-500 dark:text-green-500\" className=\"dark:text-white\">\r\n                                <span className=\"hover:text-green-400 dark:hover:text-green-400 group flex items-center px-2 py-2 text-sm font-medium rounded-md\">\r\n                                <AiOutlineHome className=\"hover:text-green-400 dark:hover:text-green-400 mr-3 h-6 w-6\" id='hide'/>\r\n                                Home\r\n                                </span>\r\n                            </NavLink>\r\n                \r\n                            <NavLink to='/licenses' activeClassName=\"dark:text-yellow-500 text-yellow-500\" className=\"dark:text-white\">\r\n                                <span className=\"hover:text-yellow-400 dark:hover:text-yellow-400 group flex items-center px-2 py-2 text-sm font-medium rounded-md\">\r\n                                <IoKeyOutline className=\"hover:text-yellow-400 dark:hover:text-yellow-400 mr-3 h-6 w-6\"/>\r\n                                Licenses\r\n                                </span>\r\n                            </NavLink>\r\n                \r\n                            <NavLink to='/users' activeClassName=\"dark:text-blue-500 text-blue-500\" className=\"dark:text-white\">\r\n                                <span className=\"hover:text-blue-400 dark:hover:text-blue-400 group flex items-center px-2 py-2 text-sm font-medium rounded-md\">\r\n                                <FiUsers className=\"hover:text-blue-400 dark:hover:text-blue-400 mr-3 h-6 w-6\" />\r\n                                Users\r\n                                </span>\r\n                            </NavLink>\r\n                \r\n                            <NavLink to='/settings' activeClassName=\"dark:text-purple-500 text-purple-500\" className=\"dark:text-white\">\r\n                                <span className=\"hover:text-purple-400 dark:hover:text-purple-400 group flex items-center px-2 py-2 text-sm font-medium rounded-md\">\r\n                                <FiSettings className=\"hover:text-purple-400 dark:hover:text-purple-400 mr-3 h-6 w-6\" />\r\n                                Settings\r\n                                </span>\r\n                            </NavLink>\r\n                \r\n                            <span className=\"text-orange-500 dark:text-white hover:text-orange-400 dark:hover:text-orange-400 group flex items-center px-2 py-2 text-sm font-medium rounded-md\">\r\n                            <BiExport className=\"hover:text-orange-500 dark:hover:text-orange-400 mr-3 h-6 w-6\" />\r\n                            Export\r\n                            </span>\r\n\r\n                            <div className=\"grid border-t w-1/2\">\r\n                                <div className=\"\">\r\n                                    <Switch \r\n                                    checked={darkMode}\r\n                                    onChange={e => {\r\n                                        setDarkMode(e)\r\n                                        changeDarkMode(e)\r\n                                    }}\r\n                                    as=\"button\" \r\n                                    className={`${darkMode ? \"bg-darkOther-100\" : \"bg-other-100\"} shadow-md border-gray-300 border-1 mt-2 inline-flex flex-shrink-0 h-5 w-10 border-2 border-transparent rounded-full cursor-pointer transition-colors ease-in-out duration-200 focus:outline-none`}>\r\n\r\n                                        {darkMode ?\r\n                                         \r\n                                        <BiMoon aria-hidden=\"true\" className=\"pointer-events-none translate-x-0 inline-block h-4 w-auto rounded-full text-other-100 shadow transform ring-0 transition ease-in-out duration-200 \" />: \r\n                                        <BiSun aria-hidden=\"true\" className=\"pointer-events-none translate-x-5 inline-block h-4 w-auto rounded-full text-yellow-500 shadow transform ring-0 transition ease-in-out duration-200\" />\r\n                                        }\r\n\r\n                                    </Switch>\r\n                                </div>\r\n                    \r\n                          \r\n                            </div>\r\n                        </nav>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"flex-shrink-0 w-14\" aria-hidden=\"true\">\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n    \r\n                <div className=\"hidden md:flex md:flex-shrink-0\">\r\n                <div className=\"flex flex-col w-64\">\r\n                <div className=\"flex flex-col flex-grow pt-5 pb-4 bg-other-100 dark:bg-darkOther-100 overflow-y-auto\">\r\n                    {loaded ? <div className=\"flex items-center flex-shrink-0 px-4\">\r\n                        <img alt={appName} className=\"h-16 w-auto rounded-full select-none\" src={appImage} alt={appName} /> <span className=\"text-2xl font-medium text-other-200 ml-2 text-20 dark:text-other-100 select-none\">{appName}</span>\r\n                    </div> : <div></div>}\r\n                    <div className=\"mt-5 flex-grow flex flex-col\">\r\n                    <nav className=\"flex-1 px-2 bg-other-100 dark:bg-darkOther-100 space-y-1\">\r\n                        \r\n                            <NavLink to='/home' activeClassName=\"text-green-500 dark:text-green-500\" className=\"dark:text-white\">\r\n                                <span className=\"hover:text-green-400 dark:hover:text-green-400 group flex items-center px-2 py-2 text-sm font-medium rounded-md\">\r\n                                <AiOutlineHome className=\"hover:text-green-400 dark:hover:text-green-400 mr-3 h-6 w-6\" id='hide'/>\r\n                                Home\r\n                                </span>\r\n                            </NavLink>\r\n                \r\n                            <NavLink to='/licenses' activeClassName=\"dark:text-yellow-500 text-yellow-500\" className=\"dark:text-white\">\r\n                                <span className=\"hover:text-yellow-400 dark:hover:text-yellow-400 group flex items-center px-2 py-2 text-sm font-medium rounded-md\">\r\n                                <IoKeyOutline className=\"hover:text-yellow-400 dark:hover:text-yellow-400 mr-3 h-6 w-6\"/>\r\n                                Licenses\r\n                                </span>\r\n                            </NavLink>\r\n                \r\n                            <NavLink to='/users' activeClassName=\"dark:text-blue-500 text-blue-500\" className=\"dark:text-white\">\r\n                                <span className=\"hover:text-blue-400 dark:hover:text-blue-400 group flex items-center px-2 py-2 text-sm font-medium rounded-md\">\r\n                                <FiUsers className=\"hover:text-blue-400 dark:hover:text-blue-400 mr-3 h-6 w-6\" />\r\n                                Users\r\n                                </span>\r\n                            </NavLink>\r\n                \r\n                            <NavLink to='/settings' activeClassName=\"dark:text-purple-500 text-purple-500\" className=\"dark:text-white\">\r\n                                <span className=\"hover:text-purple-400 dark:hover:text-purple-400 group flex items-center px-2 py-2 text-sm font-medium rounded-md\">\r\n                                <FiSettings className=\"hover:text-purple-400 dark:hover:text-purple-400 mr-3 h-6 w-6\" />\r\n                                Settings\r\n                                </span>\r\n                            </NavLink>\r\n                \r\n                            <span className=\"text-orange-500 dark:text-white hover:text-orange-400 dark:hover:text-orange-400 group flex items-center px-2 py-2 text-sm font-medium rounded-md\">\r\n                            <BiExport className=\"hover:text-orange-500 dark:hover:text-orange-400 mr-3 h-6 w-6\" />\r\n                            Export\r\n                            </span>\r\n\r\n                            <div className=\"grid border-t w-1/2\">\r\n                                <div className=\"\">\r\n                                    <Switch \r\n                                    checked={darkMode}\r\n                                    onChange={e => {\r\n                                        setDarkMode(e)\r\n                                        changeDarkMode(e)\r\n                                    }}\r\n                                    as=\"button\" \r\n                                    className={`${darkMode ? \"bg-darkOther-100\" : \"bg-other-100\"} shadow-md border-gray-300 border-1 mt-2 inline-flex flex-shrink-0 h-5 w-10 border-2 border-transparent rounded-full cursor-pointer transition-colors ease-in-out duration-200 focus:outline-none`}>\r\n\r\n                                        {darkMode ?\r\n                                         \r\n                                        <BiMoon aria-hidden=\"true\" className=\"pointer-events-none translate-x-0 inline-block h-4 w-auto rounded-full text-other-100 shadow transform ring-0 transition ease-in-out duration-200 \" />: \r\n                                        <BiSun aria-hidden=\"true\" className=\"pointer-events-none translate-x-5 inline-block h-4 w-auto rounded-full text-yellow-500 shadow transform ring-0 transition ease-in-out duration-200\" />\r\n                                        }\r\n\r\n                                    </Switch>\r\n                                </div>\r\n                    \r\n                          \r\n                            </div>\r\n\r\n                    \r\n                    </nav>\r\n                    </div>\r\n                </div>\r\n                </div>\r\n                </div>\r\n\r\n\r\n\r\n            </div>\r\n        );\r\n    // }\r\n}\r\n\r\nexport default AdminNavigation;\r\n",["128","129"],"E:\\dashboard-react\\src\\components\\adminSearch.js",["130","131"],"import '../static/styles/main.css'; \r\nimport React, {useState, useEffect} from 'react';\r\n\r\n\r\nimport { AiOutlineSearch, AiOutlineMenu } from 'react-icons/ai';\r\nimport { IoNotificationsOutline } from 'react-icons/io5';\r\nimport {FaUserCircle} from 'react-icons/fa'\r\n\r\n\r\nconst AdminSearch = () =>  {\r\n\r\n    const [userImage, setUserImage] = useState(\"\")\r\n\r\n    async function fetchData(){\r\n        const res = await fetch('/discord/data');\r\n        res.json()\r\n        .then(res => {\r\n            setUserImage(res.discordImage)\r\n        })\r\n        .catch(err =>  { console.log(err) });\r\n        \r\n    }\r\n\r\n\r\n    useEffect(() =>{\r\n        const abortController = new AbortController();\r\n        fetchData()\r\n\r\n        return () => {\r\n            abortController.abort();\r\n        };\r\n\r\n    }, [])\r\n\r\n    // render() {\r\n        return (\r\n\r\n            <div className=\"relative z-10 flex h-16 shadow-sm\">\r\n                        <button className=\"px-4 text-gray-500 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-indigo-500 md:hidden\" onClick={() => {\r\n                                    document.querySelector('#mob-nav').classList.contains('hidden') ? document.querySelector('#mob-nav').classList.remove('hidden') : document.querySelector('#mob-nav').classList.add('hidden')\r\n                                    document.querySelector('#mob-screen').classList.contains('hidden') ? document.querySelector('#mob-screen').classList.remove('hidden') : document.querySelector('#mob-screen').classList.add('hidden')\r\n                            }}>\r\n                            <AiOutlineMenu className=\"h-6 w-6\"/>\r\n                        </button>\r\n                        \r\n                        <div className=\"flex-1 px-4 flex justify-between bg-other-100 dark:bg-darkOther-100 mr-2\">\r\n                            <div className=\"flex-1 flex\">\r\n                                <form className=\"w-full flex md:ml-0\" action=\"#\" method=\"GET\">\r\n                                    <label className=\"sr-only\">Search</label>\r\n                                    <div className=\"relative w-full text-gray-400 focus-within:text-gray-600\">\r\n                                    <div className=\"absolute inset-y-0 left-0 flex items-center pointer-events-none\">\r\n                                        <AiOutlineSearch className=\"h-5 w-5 text-gray-900 dark:text-other-100\"/>\r\n                                    </div>\r\n                                    <input id=\"search_field\" disabled=\"disabled\" autoComplete=\"off\" className=\"bg-other-100 dark:bg-darkOther-100 block w-full h-full pl-8 pr-3 py-2 border-transparent text-gray-900 placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-0 focus:border-transparent sm:text-sm\" placeholder=\"Search\" type=\"search\" name=\"search\" />\r\n                                    </div>\r\n                                </form>\r\n                            </div>\r\n            \r\n                            <div className=\"ml-4 flex items-center md:ml-6 \">\r\n                                <button className=\"p-1 rounded-full bg-darkOther-200 text-other-100 dark:bg-other-200 dark:text-other-100 focus:outline-none\" onClick={() => {\r\n                                    document.querySelector('#notif-dropdown').classList.contains('hidden') ? document.querySelector('#notif-dropdown').classList.remove('hidden') : document.querySelector('#notif-dropdown').classList.add('hidden')\r\n                                }}>\r\n                                    <span className=\"sr-only\">View notifications</span>\r\n                                    <IoNotificationsOutline className=\"h-7 w-7\" id='hide'/>\r\n                                </button>\r\n\r\n                                <div className=\"dark:bg-darkOther-200 hidden absolute right-0 mt-24 mr-24 w-48 rounded-md shadow-lg py-1 bg-white focus:outline-none\" role=\"menu\" id=\"notif-dropdown\" aria-orientation=\"vertical\">\r\n                                        <span className=\"block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 hover:bg-gray-100 hover:text-gray-900 dark:hover:bg-darkOther-300 dark:text-white\" role=\"menuitem\" id='hide'>No notifications</span>\r\n                                </div>\r\n                        \r\n                                <div className=\"ml-3 relative\">\r\n                                    <div>  \r\n                                        <button className=\"max-w-xs bg-white flex items-center text-sm rounded-full focus:outline-none\" id=\"profile-button-hide\" name=\"profile-dropdown\" aria-haspopup=\"true\"  onClick={() => {\r\n                                            document.querySelector('#profile-dropdown').classList.contains('hidden') ? document.querySelector('#profile-dropdown').classList.remove('hidden') : document.querySelector('#profile-dropdown').classList.add('hidden')\r\n                                        }}>\r\n                                            <span className=\"sr-only\">Open user menu</span>\r\n                                            {userImage == \"\" ? <FaUserCircle className=\"h-10 w-10 rounded-full bg-darkOther-200 text-other-100 dark:bg-other-200 dark:text-other-100 \" id=\"profile-button-hide\" name=\"profile-dropdown\" /> : <img className=\"h-8 w-8 rounded-full text-other-100 dark:text-darkOther-300\" src={userImage} id=\"profile-button-hide\" name=\"profile-dropdown\" />}\r\n                                        </button>\r\n                                    </div>\r\n            \r\n                                    <div className=\"dark:bg-darkOther-200 hidden origin-top-right absolute right-0 mt-2 w-48 rounded-md shadow-lg py-1 bg-white\" role=\"menu\" id=\"profile-dropdown\" aria-orientation=\"vertical\" aria-labelledby=\"user-menu\">\r\n                                        <span href=\"#\" className=\"block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 hover:text-gray-900 dark:hover:bg-darkOther-300 dark:text-white\" role=\"menuitem\" id='hide'>Sign out</span>\r\n                                    </div>\r\n                                </div>\r\n            \r\n                            </div>\r\n                        </div>\r\n            </div>\r\n        )\r\n}\r\n\r\nexport default AdminSearch;","E:\\dashboard-react\\src\\components\\home\\planModal.js",["132","133","134","135","136","137","138"],"import '../../static/styles/main.css'; \r\nimport React, { useEffect, useState } from 'react';\r\nimport Select from 'react-select';\r\nimport makeAnimated from 'react-select/animated';\r\nimport chroma from 'chroma-js';\r\nimport currencyOptions from '../../static/data/currencies.json'\r\nimport { Switch } from '@headlessui/react'\r\nimport DatePicker from 'react-date-picker';\r\n\r\n\r\n\r\nimport { AiOutlineClose } from 'react-icons/ai';\r\nimport { IoPricetagOutline } from 'react-icons/io5';\r\nimport { BsCalendar } from 'react-icons/bs'\r\nimport { MdClear } from 'react-icons/md'\r\n\r\nvar planOptions = [\r\n    {label:'Recurring & Onetime Payment', value:'recurring+onetime-payment'},\r\n    {label:'Recurring', value:'recurring'},\r\n    {label:'Lifetime', value:'lifetime'},\r\n    {label:'Rental', value:'rental'}\r\n]\r\nvar intervalTypeOptions = [\r\n    {label:'Day', value:'day'},\r\n    {label:'Week', value:'week'},\r\n    {label:'Month', value:'month'},\r\n    {label:'Year', value:'year'}\r\n]\r\n\r\nconst PlanModal = () => {\r\n\r\n    const [availableRoles, setavailableRoles] = useState([])\r\n    const [planName, setplanName] = useState(\"\")\r\n    const [planType, setplanType] = useState(\"\")\r\n    const [planRole, setplanRole] = useState([])\r\n    const [price, setprice] = useState(\"\")\r\n    const [priceCurrency, setpriceCurrency] = useState(\"\")\r\n    const [interval, setinterval] = useState(\"\")\r\n    const [intervalType, setintervalType] = useState(\"\")\r\n    const [unbinding, setunbinding] = useState(true)\r\n    const [oneTimePrice, setOneTimePrice] = useState(\"\")\r\n    const [expDate, setExpDate] = useState(new Date());\r\n    // const [selectColor, setSelectColor] = useState(true)\r\n\r\n    async function fetchPlans(){\r\n        const res = await fetch('/discord/guild/roles');\r\n        res.json()\r\n        .then(res => {\r\n            setavailableRoles(res.roles)\r\n        })\r\n        .catch(err =>  {console.log(err)});\r\n        \r\n    }\r\n\r\n    useEffect(() =>{\r\n        const abortController = new AbortController();\r\n        fetchPlans()\r\n\r\n\r\n\r\n        return () => {\r\n            abortController.abort();\r\n        };\r\n\r\n    }, [])\r\n\r\n    const colourStyles = {\r\n        control: styles => ({ ...styles, backgroundColor: localStorage.getItem('mode')  }),\r\n        option: (styles, { data, isDisabled, isFocused, isSelected }) => {\r\n          const color = chroma(data.color);\r\n          return {\r\n            ...styles,\r\n            backgroundColor: isDisabled\r\n              ? null\r\n              : isSelected\r\n              ? data.color\r\n              : isFocused\r\n              ? color.alpha(0.1).css()\r\n              : null,\r\n            color: isDisabled\r\n              ? '#ccc'\r\n              : isSelected\r\n              ? chroma.contrast(color, 'white') > 2\r\n                ? 'white'\r\n                : 'black'\r\n              : data.color,\r\n            cursor: isDisabled ? 'not-allowed' : 'default',\r\n      \r\n            ':active': {\r\n              ...styles[':active'],\r\n              backgroundColor:\r\n                !isDisabled && (isSelected ? data.color : color.alpha(0.3).css()),\r\n            },\r\n          };\r\n        },\r\n        multiValue: (styles, { data }) => {\r\n          const color = chroma(data.color);\r\n          return {\r\n            ...styles,\r\n            backgroundColor: color.alpha(0.1).css(),\r\n          };\r\n        },\r\n        multiValueLabel: (styles, { data }) => ({\r\n          ...styles,\r\n          color: data.color,\r\n        }),\r\n        multiValueRemove: (styles, { data }) => ({\r\n          ...styles,\r\n          color: data.color,\r\n          ':hover': {\r\n            backgroundColor: data.color,\r\n            color: 'white',\r\n          },\r\n        }),\r\n    }\r\n    const colourStyle = {\r\n        control: styles => ({ ...styles, backgroundColor: localStorage.getItem('mode') })\r\n    }\r\n\r\n\r\n    \r\n    const submitHandler = async (e) => {\r\n        e.preventDefault()\r\n\r\n        if(planName.length > 0 && planType.length > 0) {\r\n            // console.log(expDate)\r\n            // console.log(expDate.getTime())\r\n        \r\n            var response = await fetch('/plans/add', {\r\n                method:'post',\r\n                body:JSON.stringify({\r\n                    planName:planName,\r\n                    price:price,\r\n                    currency:priceCurrency,\r\n                    type:planType,\r\n                    role:JSON.stringify(planRole),\r\n                    interval:interval,\r\n                    intervalType:intervalType,\r\n                    planId:'',\r\n                    id:'',\r\n                    unbinding:unbinding,\r\n                    oneTimeAmount:oneTimePrice,\r\n                    expiry:expDate.getTime()\r\n                }),\r\n                \"headers\": {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            })\r\n            if(response.ok) {\r\n                setavailableRoles()\r\n                setinterval(\"\")\r\n                setintervalType(\"\")\r\n                setplanName(\"\")\r\n                setplanRole([])\r\n                setplanType(\"\")\r\n                setprice(\"\")\r\n                setpriceCurrency(\"\")\r\n                setunbinding(true)\r\n\r\n                return\r\n            }else{\r\n                return\r\n            }\r\n        }\r\n        else{\r\n            return;\r\n        }\r\n    }\r\n\r\n        \r\n        return (\r\n                <div className=\"fixed z-10 inset-0 overflow-y-auto hidden\" id=\"plan-modal\">\r\n            \r\n                    <form onSubmit={submitHandler}>\r\n                        <div className=\"flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0\">\r\n\r\n                            <div className=\"fixed inset-0 transition-opacity\" aria-hidden=\"true\">\r\n                                <div className=\"absolute inset-0 bg-gray-500 opacity-75\"></div>\r\n                            </div>\r\n                \r\n                            <span className=\"hidden sm:inline-block sm:align-middle sm:h-screen\" aria-hidden=\"true\">&#8203;</span>\r\n\r\n            \r\n                            <div className=\"inline-block align-bottom bg-white rounded-lg px-4 pt-5 pb-4 text-left shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-sm sm:w-full sm:p-6 dark:bg-darkOther-200\" role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"modal-headline\">\r\n                        \r\n                                <div>\r\n                                    <button type=\"button\" onClick={() => {\r\n                                        document.querySelector('#plan-modal').classList.contains('hidden') ? document.querySelector('#plan-modal').classList.remove('hidden') : document.querySelector('#plan-modal').classList.add('hidden')\r\n                                    }}><AiOutlineClose className=\"text-red-500 h-6 w-6 \" id='hide' /></button>\r\n\r\n\r\n                                    <div className=\"mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-green-100\">\r\n            \r\n                                    \r\n                                    <IoPricetagOutline className=\"h-6 w-6 text-green-600 select-none\" id='hide'/>\r\n                                </div>\r\n        \r\n\r\n                                <div className=\"mt-3 text-center sm:mt-5\">  \r\n                                    <h3 className=\"text-lg leading-6 font-medium text-gray-900 dark:text-white select-none\" id=\"modal-headline\">\r\n                                    Create a Plan...\r\n                                    </h3>\r\n        \r\n                                    <div className=\"mt-2\">\r\n                                        \r\n                                        <div>\r\n\r\n                                            <fieldset className=\"mt-2 bg-white dark:bg-darkOther-200\">\r\n                                                <div className=\"md:grid md:grid-cols-2\">\r\n                                                <div className=\"\">\r\n                                                        <legend className=\"block text-sm font-medium text-gray-700 text-left dark:text-gray-300 select-none\">Plan Name</legend>\r\n                                                        <div className=\"mt-1 rounded-md shadow-sm -space-y-px\">\r\n                                                            <div>\r\n                                                            <label className=\"block text-sm font-medium text-gray-700\"></label>\r\n                                                            <input  name=\"planName\" id=\"name\" autoComplete=\"off\" className=\"dark:bg-darkOther-200 focus:outline-none dark:text-white block w-full font-medium text-md rounded-md py-2\" \r\n                                                            placeholder=\"Member\" value={planName} onChange={e => setplanName(e.target.value)} />                                                         \r\n                                                            \r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                    \r\n                                                    <div className=\"\">\r\n                                                        <legend className=\"block text-sm font-medium text-gray-700 text-left dark:text-gray-300 select-none\">Type</legend>\r\n                                                        <div className=\"mt-1 rounded-md shadow-sm -space-y-px\">\r\n                                                            <div>\r\n                                                                <label className=\"sr-only\">type</label>\r\n                                                                \r\n                                                                <Select defaultValue={planOptions[0]} styles={colourStyle} placeholder=\"Plan Type\" id=\"type\" value={planType} name=\"planType\" options={planOptions} className=\"relative block w-full rounded-none rounded-t-md focus:z-10 font-normal text-md focus:outline-none\"\r\n                                                                onChange={e => setplanType(e.value)} value={planOptions.filter(function(planOptions) {return planOptions.value === planType})}/>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                \r\n                                                </div>\r\n                \r\n                                            </fieldset>\r\n\r\n                                            {planType == \"recurring\" || planType == \"recurring+onetime-payment\" ?  <fieldset className=\"mt-2 bg-white dark:bg-darkOther-200\">\r\n                                                <div className=\"md:grid md:grid-cols-2\">\r\n                                                <div className=\"\">\r\n                                                        <legend className=\"block text-sm font-medium text-gray-700 text-left dark:text-gray-300 select-none\">Interval</legend>\r\n                                                        <div className=\"mt-1 rounded-md shadow-sm -space-y-px\">\r\n                                                            <div className=\"mt-1 flex rounded-md shadow-sm -space-y-px\">\r\n                                                                <span className=\"inline-flex items-center px-3 rounded-l-md border-r-2 border-gray-200 bg-gray-50 text-gray-800 sm:text-sm mr-2 dark:bg-darkOther-100 dark:text-white select-none\">\r\n                                                                    every\r\n                                                                </span>\r\n                                                                <input name=\"interval\" id=\"interval\" type=\"text\" placeholder=\"Count\" autoComplete=\"off\" className=\"dark:bg-darkOther-200 block w-full font-medium text-md rounded-md py-2 focus:outline-none dark:text-white\" value={interval} onChange={e => setinterval(e.target.value)}/>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                    \r\n                                                    <div className=\"\">\r\n                                                        <legend className=\"block text-sm font-medium text-gray-700 text-left dark:text-gray-300 select-none\">Interval Type</legend>\r\n                                                        <div className=\"mt-1 rounded-md shadow-sm -space-y-px\">\r\n                                                            <div>\r\n                                                                <label className=\"sr-only select-none\">Interval Type</label>\r\n                                                                \r\n                                                                <Select defaultValue={intervalTypeOptions[3]} styles={colourStyle} id=\"type\" value={intervalType} name=\"intervalType\" options={intervalTypeOptions} placeholder=\"Interval\" \r\n                                                                className=\"relative block w-full rounded-none rounded-t-md focus:z-10 font-normal text-md\"\r\n                                                                onChange={e => setintervalType(e.value)} value={intervalTypeOptions.filter(function(intervalTypeOptions) {return intervalTypeOptions.value === intervalType})}/>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                \r\n                                                </div>\r\n                \r\n                                            </fieldset> :  <></> }\r\n\r\n                                            \r\n                                        \r\n\r\n                                            <fieldset className=\"mt-4 bg-white dark:bg-darkOther-200\">\r\n                                                <legend className=\"block text-sm font-medium text-gray-700 text-left dark:text-gray-300 select-none\">Price</legend>\r\n                                                <div className=\"mt-1 bg-white rounded-md shadow-sm dark:bg-darkOther-200\">\r\n                                                    <div>\r\n                                                        <div className=\"mt-1 relative rounded-md shadow-sm\">\r\n                                                            <input type=\"text\" name=\"price\" id=\"price\" className=\"dark:bg-darkOther-200 focus:outline-none block w-full font-medium text-md  rounded-md py-2 dark:text-white\" \r\n                                                            placeholder=\"0.00\" value={price} autoComplete=\"off\" onChange={e => setprice(e.target.value)}/>\r\n\r\n                                                            <div className=\"absolute inset-y-0 right-0 flex items-center\">\r\n                                                                <label className=\"sr-only\">Currency</label>\r\n                                                                <Select defaultValue={currencyOptions[0]} styles={colourStyle}  id=\"type\" value={priceCurrency} name=\"priceCurrency\" placeholder=\"Currency\" options={currencyOptions} className=\"px-3 w-48 dark:bg-darkOther-200\"\r\n                                                                onChange={e => setpriceCurrency(e.value)} isSearchable value={currencyOptions.filter(function(currencyOptions) {return currencyOptions.value === priceCurrency})}/>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </div>\r\n                                            \r\n                                            </fieldset>\r\n\r\n                                            {planType == \"rental\" ? <fieldset className=\"mt-4 bg-white dark:bg-darkOther-200\">\r\n                                                <legend className=\"block text-sm font-medium text-gray-700 text-left dark:text-gray-300 select-none\">Expiry</legend>\r\n                                                <div className=\"mt-1 bg-white  dark:bg-darkOther-200\">\r\n                                                    <div>\r\n                                                        <div className=\"mt-1 relative rounded-md shadow-sm text-left dark:text-white\" id=\"calend\">\r\n                                                        <DatePicker\r\n                                                            onChange={setExpDate}\r\n                                                            value={expDate}\r\n                                                            calendarAriaLabel={\"Select Date\"}\r\n                                                            calendarIcon={<BsCalendar />}\r\n                                                            clearIcon={<MdClear />}\r\n                                                            onCalendarClose={() => {\r\n                                                                document.querySelector('#calend').classList.add('dark:text-white')\r\n                                                            }}\r\n                                                            onCalendarOpen={() => {\r\n                                                                document.querySelector('#calend').classList.remove('dark:text-white')\r\n                                                            }}\r\n                                                        />\r\n\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </div>\r\n                                            \r\n                                            </fieldset> : <></>}\r\n\r\n                                            {planType == \"recurring+onetime-payment\" ? <fieldset className=\"mt-2 bg-whit dark:bg-darkOther-200\" id=\"interval-fieldset\">\r\n                                                    <div className=\"\">\r\n                                                        <legend className=\"block text-sm font-medium text-gray-700 text-left dark:text-gray-300 select-none\">Onetime Payment Price</legend>\r\n                                                        <div className=\"mt-1 rounded-md shadow-sm -space-y-px\">\r\n                                                            <div>\r\n                                                                <label className=\"sr-only\">price</label>\r\n                                                                <input type=\"text\" className=\"dark:bg-darkOther-200 focus:outline-none block w-full font-medium text-md rounded-md py-2 dark:text-white\" \r\n                                                                placeholder=\"0.00\" value={oneTimePrice} autoComplete=\"off\" onChange={e => setOneTimePrice(e.target.value)}/>\r\n                                                                                                                                    \r\n                                                            \r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                            \r\n                                            </fieldset> : <></>}\r\n\r\n        \r\n                                            <fieldset className=\"mt-2 bg-whit dark:bg-darkOther-200\" id=\"interval-fieldset\">\r\n                                                    <div className=\"\">\r\n                                                        <legend className=\"block text-sm font-medium text-gray-700 text-left dark:text-gray-300 select-none\">Roles</legend>\r\n                                                        <div className=\"mt-1 rounded-md shadow-sm -space-y-px\">\r\n                                                            <div>\r\n                                                                <label className=\"sr-only\">roles</label>\r\n                                    \r\n                                                                <Select id=\"roles\" value={planRole}  placeholder=\"Roles\" closeMenuOnSelect={false} styles={colourStyles} name=\"planRole\" isSearchable components={makeAnimated()} isMulti options={availableRoles} className=\"focus:ring-other-200 focus:border-other-200 relative block w-full rounded-none rounded-t-md bg-transparent focus:z-10 font-medium text-md dark:focus:border-darkOther-200 dark:focus:ring-darkOther-200\"\r\n                                                                    onChange={e => setplanRole(e)} />\r\n                                                                                                                                                                              \r\n                                                            \r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                            \r\n                                            </fieldset>\r\n\r\n                                            <fieldset className=\"mt-2 bg-white dark:bg-darkOther-200\" id=\"interval-fieldset\">\r\n                                                    <div className=\"\">\r\n                                                        <legend className=\"block text-sm font-medium text-gray-700 text-left dark:text-gray-300 select-none\">{unbinding ? \"Unbinding Enabled\" : \"Unbinding Disabled\"}</legend>\r\n                                                        <div className=\"mt-1 rounded-md shadow-sm -space-y-px\">\r\n                                                            <div className=\"text-left\">\r\n                                                                <label className=\"sr-only\">allow unbinding</label>\r\n                                                                <Switch \r\n                                                                checked={unbinding}\r\n                                                                onChange={e => setunbinding(e)}\r\n                                                                as=\"button\" \r\n                                                                className={`${unbinding ? \"bg-green-400\" : \"bg-gray-200\"} relative inline-flex flex-shrink-0 h-6 w-11 border-2 border-transparent rounded-full cursor-pointer transition-colors ease-in-out duration-200 focus:outline-none`}>\r\n\r\n                                                                    {unbinding ? \r\n                                                                    <span aria-hidden=\"true\" className=\"pointer-events-none translate-x-0 inline-block h-5 w-5 rounded-full bg-white shadow transform ring-0 transition ease-in-out duration-200\"></span> : \r\n                                                                    <span aria-hidden=\"true\" className=\"pointer-events-none translate-x-5 inline-block h-5 w-5 rounded-full bg-white shadow transform ring-0 transition ease-in-out duration-200\"></span>\r\n                                                                    }\r\n\r\n                                                                </Switch>\r\n                                                                                                                                    \r\n                                                            \r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                            \r\n                                            </fieldset>\r\n        \r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"mt-5 sm:mt-6\">\r\n                                <button  name=\"license-modal\" type=\"submit\" className=\"inline-flex justify-center w-full rounded-md border border-transparent shadow-sm px-4 py-2 bg-blue-500 text-base font-medium text-white hover:bg-other-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-other-200 sm:text-sm dark:focus:ring-darkOther-200 dark:hover:bg-darkOther-200 dark:bg-darkOther-100\">\r\n                                    Create\r\n                                </button>\r\n                            </div>\r\n\r\n                        </div>\r\n                    \r\n                    </div>\r\n                    </form>\r\n            </div>\r\n\r\n        )\r\n\r\n}\r\nexport default PlanModal","E:\\dashboard-react\\src\\components\\home\\restockModal.js",["139"],"import '../../static/styles/main.css'; \r\nimport React, { useState, useEffect } from 'react';\r\nimport Select from 'react-select';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport { AiOutlineClose, AiOutlineShoppingCart } from 'react-icons/ai';\r\n\r\n\r\nconst RestockModal = () => {\r\n    const [plans, setPlans] = useState([])\r\n    const [password, setPassword] = useState(\"\")\r\n    const [stock, setStock] = useState(\"\")\r\n    const [restockPlan, setRestockPlan] = useState(\"\")\r\n    const [planName, setPlanName] = useState(\"\")\r\n\r\n    async function fetchPlans(){\r\n        const res = await fetch('/plans/data');\r\n        res.json()\r\n        .then(res => {setPlans(res)})\r\n        .catch(err =>  fetchPlans());\r\n        \r\n    }\r\n\r\n    useEffect(() =>{\r\n        var abortController = new AbortController();\r\n        fetchPlans()\r\n\r\n        setInterval(() => {\r\n            abortController = new AbortController();\r\n            fetchPlans()\r\n        }, 5000);\r\n\r\n\r\n        return () => {\r\n            abortController.abort();\r\n        };\r\n\r\n    }, [])\r\n\r\n    const colourStyle = {\r\n        control: styles => ({ ...styles, backgroundColor: localStorage.getItem('mode') }),\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    const submitHandler = async (e) => {\r\n        e.preventDefault()\r\n        \r\n        try{\r\n            if(password.length > 0 && stock.length > 0) {\r\n                await fetch('/restocks/add', {\r\n                    method:'POST',\r\n                    body:JSON.stringify({\r\n                        password:password,\r\n                        stock:parseInt(stock),\r\n                        stockRemaining:parseInt(stock),\r\n                        planId:restockPlan,\r\n                        restockMethod:'regular',\r\n                        id:uuidv4(),\r\n                        planName:planName\r\n                    }),\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n                    }\r\n                })\r\n                .then(response => {\r\n                    console.log(document.querySelector('#button-create').classList)\r\n                    document.querySelector('#button-create').classList.remove('bg-other-200')\r\n                    document.querySelector('#button-create').classList.remove('hover:bg-other-300')\r\n                    document.querySelector('#button-create').classList.remove('dark:bg-darkOther-200')\r\n        \r\n                    document.querySelector('#button-create').classList.add('bg-green-500')\r\n                    document.querySelector('#button-create').classList.add('hover:bg-green-600')\r\n\r\n                    setPlans([])\r\n                    setPassword(\"\")\r\n                    setStock(\"\")\r\n                    setRestockPlan(\"\")\r\n                }).catch(err => console.log(err))\r\n            }else{\r\n                return\r\n            }\r\n        }catch(err){\r\n            console.log(err)\r\n            return;\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n        return (\r\n            <div className=\"fixed z-10 inset-0 overflow-y-auto hidden\" id=\"restock-modal\">\r\n\r\n                <div className=\"flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0\">\r\n                    <form onSubmit={submitHandler}>\r\n                    <div className=\"fixed inset-0 transition-opacity\" aria-hidden=\"true\">\r\n                    <div className=\"absolute inset-0 bg-gray-500 opacity-75\"></div>\r\n\r\n                </div>\r\n\r\n                <span className=\"hidden sm:inline-block sm:align-middle sm:h-screen\" aria-hidden=\"true\">&#8203;</span>\r\n\r\n\r\n                <div className=\"inline-block align-bottom bg-white rounded-lg px-4 pt-5 pb-4 text-left shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-sm sm:w-full sm:p-6 dark:bg-darkOther-200\" role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"modal-headline\">\r\n\r\n                    <div>\r\n\r\n                    <button type=\"button\" onClick={() => {\r\n                        document.querySelector('#button-create').classList.remove('bg-other-200')\r\n                        document.querySelector('#button-create').classList.remove('dark:bg-darkOther-200')\r\n                        document.querySelector('#button-create').classList.remove('hover:bg-other-300')\r\n            \r\n                        document.querySelector('#button-create').classList.remove('bg-green-500')\r\n                        document.querySelector('#button-create').classList.remove('hover:bg-green-600')\r\n\r\n                        document.querySelector('#restock-modal').classList.contains('hidden') ? document.querySelector('#restock-modal').classList.remove('hidden') : document.querySelector('#restock-modal').classList.add('hidden')\r\n                    }}><AiOutlineClose className=\"text-red-500 h-6 w-6\" /></button>\r\n                        \r\n\r\n                        <div className=\"mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-green-100\">\r\n\r\n\r\n                            <AiOutlineShoppingCart className=\"h-6 w-6 text-green-600 select-none\"/>\r\n\r\n                    </div>\r\n\r\n                    <div className=\"mt-3 text-center sm:mt-5\">\r\n                        <h3 className=\"text-lg leading-6 font-medium text-gray-900 dark:text-white select-none\" id=\"modal-headline\">\r\n                          Create a Restock\r\n                        </h3>\r\n\r\n                        <div className=\"mt-2\">\r\n\r\n                            <div>\r\n                                <fieldset >\r\n                                    <legend className=\"block text-sm font-medium text-gray-700 text-left dark:text-gray-300 select-none\">Password</legend>\r\n                                    <div className=\"mt-1 bg-white rounded-md shadow-sm dark:bg-darkOther-200\">\r\n                                        <div>\r\n                                            <label className=\"block text-sm font-medium text-gray-700\"></label>\r\n                                            <input  name=\"password\" id=\"password\" autoComplete=\"off\" className=\"dark:bg-darkOther-200 dark:text-white block w-full font-medium text-md rounded-md py-2\" placeholder=\"passsword\" onChange={e => setPassword(e.target.value)} />\r\n                                        </div>\r\n                                    </div>\r\n                                </fieldset>\r\n\r\n                                <fieldset className=\"mt-2 bg-white dark:bg-darkOther-200\">\r\n                                    <legend className=\"block text-sm font-medium text-gray-700 text-left dark:text-gray-300 select-none\">Stock</legend>\r\n                                    <div className=\"mt-1 rounded-md shadow-sm \">\r\n                                        <div>\r\n                                            <label className=\"block text-sm font-medium text-gray-700\"></label>\r\n                                            <input  name=\"stock\"  autoComplete=\"off\" className=\"dark:bg-darkOther-200 dark:text-white block w-full font-medium text-md rounded-md py-2\" placeholder=\"10\" onChange={e => setStock(e.target.value)} />\r\n                                        </div>\r\n                                    </div>\r\n                                </fieldset>\r\n  \r\n  \r\n\r\n                                <fieldset className=\"mt-2 bg-white dark:bg-darkOther-200\">\r\n                                    <div className=\"mt-1 bg-white rounded-md shadow-sm dark:bg-darkOther-200\">\r\n                                        <div>\r\n                                            <legend className=\"block text-sm font-medium text-gray-700 text-left dark:text-gray-300 select-none\">Plan</legend>\r\n                                            <div className=\"mt-1 rounded-md shadow-sm -space-y-px\">\r\n                                                <div>\r\n                                                    <label className=\"sr-only select-none\">Plan</label>\r\n                                                    <Select name=\"restockPlan\" value={restockPlan.value} options={plans} styles={colourStyle} className=\"relative block w-full rounded-none rounded-t-md bg-transparent focus:z-10 font-medium text-md\" onChange={(e)=> { \r\n                                                        setRestockPlan(e.value)\r\n                                                        setPlanName(e.label)\r\n                                                    }}/>\r\n                                                    \r\n\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </fieldset>\r\n\r\n                            </div>\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"mt-5 sm:mt-6\">\r\n                  <button type=\"submit\" id=\"button-create\" className=\"inline-flex justify-center w-full rounded-md border border-transparent shadow-sm px-4 py-2 bg-blue-500 text-base font-medium text-white hover:bg-other-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-other-200 sm:text-sm dark:focus:ring-darkOther-200 dark:hover:bg-darkOther-200 dark:bg-darkOther-100\">\r\n                    Create\r\n                  </button>\r\n                </div>\r\n\r\n            </div>\r\n            </form>\r\n            </div>\r\n            </div>\r\n\r\n        )\r\n\r\n\r\n}\r\nexport default RestockModal","E:\\dashboard-react\\src\\components\\licenses\\licenses.js",["140","141","142"],"E:\\dashboard-react\\src\\components\\licenses\\licenseModal.js",[],"E:\\dashboard-react\\src\\components\\licenses\\table.js",["143","144","145","146","147"],"import '../../static/styles/main.css'; \r\nimport React, { useEffect, useState } from 'react';\r\nimport { BsThreeDots } from 'react-icons/bs';\r\nimport SquareLoader from \"react-spinners/SquareLoader\";\r\n\r\n\r\nconst LicenseTable = () => {\r\n\r\n    const [users, setUsers] = useState([])\r\n    const [loaded, setLoaded] = useState(false)\r\n\r\n    async function fetchUsers(){\r\n        const res = await fetch('/users/fetch');\r\n        res.json()\r\n        .then(res => {\r\n            setUsers(res)\r\n            setLoaded(true)\r\n        })\r\n        .catch(err =>  fetchUsers());\r\n        \r\n    }\r\n\r\n\r\n    useEffect(() =>{\r\n        var abortController = new AbortController();\r\n        fetchUsers()\r\n\r\n\r\n        setInterval(() => {\r\n            abortController = new AbortController();\r\n            fetchUsers()\r\n\r\n        }, 5000);\r\n\r\n\r\n        return () => {\r\n            abortController.abort();\r\n        };\r\n\r\n    }, [])\r\n\r\n    const submitEmailHandler = async (e, key,email) => {\r\n        e.preventDefault()\r\n\r\n        try{\r\n\r\n            await fetch('/users/email', {\r\n                method:'POST',\r\n                body:JSON.stringify({\r\n                    email:email,\r\n                    key:key\r\n                }),\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                }\r\n            })\r\n            .then(response => {\r\n            }).catch(err => console.log(err))\r\n        }catch(err){\r\n            console.log(err)\r\n            return;\r\n        }\r\n\r\n    }\r\n    const submitUnbindHandler = async (e, id) => {\r\n        e.preventDefault()\r\n        \r\n        try{\r\n\r\n            await fetch('/users/force/unbind/' +id, {\r\n                method:'get'\r\n            })\r\n            .then(response => {\r\n                {}\r\n            }).catch(err => console.log(err))\r\n        }catch(err){\r\n            console.log(err)\r\n            return;\r\n        }\r\n\r\n    }\r\n    const submitRevokeHandler = async (e, id) => {\r\n        e.preventDefault()\r\n        \r\n        try{\r\n\r\n            await fetch('/users/revoke/' + id, {\r\n                method:'get'\r\n            })\r\n            .then(response => {\r\n                // setPlan(\"\")\r\n                // setEmail(\"\")\r\n            }).catch(err => console.log(err))\r\n        }catch(err){\r\n            console.log(err)\r\n            return;\r\n        }\r\n\r\n    }\r\n\r\n\r\n    const renderTableRows = () => {\r\n        return users.map(user => {\r\n            var date = new Date(user.dateCreated * 1000)\r\n            return (\r\n    \r\n                <tr key={user.id}>\r\n                    <td className=\"px-6 py-4 whitespace-nowrap dark:bg-darkOther-200\">\r\n                        {/* <div className=\"flex items-center\"> */}\r\n\r\n                            {/* <div className=\"ml-2\"> */}\r\n\r\n                                {/* style=\"font-family: 'Ubuntu Mono', monospace;\" */}\r\n                                <div className=\"text-gray-500 dark:text-gray-300 font-mono\" id=\"key\">\r\n                                    {user.key}\r\n                                </div>\r\n                                <div className=\"text-xs gray-900 dark:text-gray-500\" id=\"discordId\">{user.plan}</div>\r\n\r\n                            {/* </div> */}\r\n\r\n                        {/* </div> */}\r\n                    </td>\r\n\r\n                    <td className=\"px-6 py-4 whitespace-nowrap dark:bg-darkOther-200\">\r\n                        <div className=\"text-sm text-gray-900 dark:text-gray-500\" id=\"discordName\">{user.discordName == \"empty\" ? \"Unbound\" : user.discordName}</div>\r\n                        <div className=\"text-sm text-gray-500 dark:text-gray-300\" id=\"discordId\">{user.discordId == 123456789 ? \"Unbound\" : user.discordId}</div>\r\n                    </td>\r\n\r\n                    {/* <td className=\"px-6 py-4 whitespace-nowrap dark:bg-darkOther-200\">\r\n                        <div className=\"text-sm text-gray-900\" id=\"keyType\">{user.keyType}</div>\r\n                        <span className=\"px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800\">\r\n                            Active\r\n                        </span>\r\n                    </td> */}\r\n\r\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:bg-darkOther-200\">\r\n                        {\r\n                        `${date.getDate()} ${['January','February','March','April','May','June','July','August','September','October','November','December'][date.getMonth()]}, ${date.getFullYear()}`\r\n                        }\r\n                    </td>\r\n\r\n                    <td className=\"px-6 py-4 whitespace-nowrap dark:bg-darkOther-200\">\r\n                        \r\n                        <button className=\"ml-2 text-gray-600 hover:text-gray-900\" id={`${user.id}-dropdown-button-hide`} onClick={() => {\r\n                            document.querySelector(`#dropdown-${user.id}`).classList.contains('hidden') ? document.querySelector(`#dropdown-${user.id}`).classList.remove('hidden') : document.querySelector(`#dropdown-${user.id}`).classList.add('hidden')\r\n                        }}> <BsThreeDots className=\"h-4 w-4\" id={`${user.id}-icon-hide`} />\r\n                        </button>\r\n\r\n                        <div id={`dropdown-${user.id}`} className=\"dark:bg-darkOther-200 hidden mx-3 mr-10 origin-top-right absolute right-7 top-0 w-48 mt-1 rounded-md shadow-lg z-10 bg-white ring-1 ring-black ring-opacity-5\">\r\n\r\n                            <button className=\"block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 dark:text-white dark:hover:bg-darkOther-300 w-full\" role=\"menuitem\" id={`hide-${user.id}`} onClick={(e) => submitUnbindHandler(e, user.id)}>Unbind from User</button>\r\n                            <button className=\"block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 dark:text-white dark:hover:bg-darkOther-300 w-full\" role=\"menuitem\" id={`hide-${user.id}`} onClick={(e) => submitRevokeHandler(e, user.id)}>Revoke & Delete</button>\r\n                            <button className=\"block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 dark:text-white dark:hover:bg-darkOther-300 w-full\" role=\"menuitem\" id={`hide-${user.id}`} onClick={(e) => submitEmailHandler(e, user.key, user.email)}>Send receipt via email</button>\r\n                            <button disabled className=\"block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 dark:text-white dark:hover:bg-darkOther-300 w-full\" role=\"menuitem\" id={`hide-${user.id}`} onClick={(e) => {}}>Extend license (disabled)</button>\r\n                    \r\n                        </div>\r\n\r\n                    </td>\r\n\r\n                </tr>\r\n            )\r\n            \r\n            \r\n        })\r\n    }\r\n\r\n\r\n\r\n    return (\r\n\r\n        <table className=\"w-full overflow-y-auto\" id=\"table\" id='table'>\r\n\r\n                <thead className=\"bg-gray-200 dark:bg-darkOther-100\">\r\n\r\n                    <tr>\r\n                        <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider select-none\">\r\n                        Key\r\n                        </th>\r\n\r\n                        <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider select-none\">\r\n                        User\r\n                        </th>\r\n\r\n                        {/* <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider select-none\">\r\n                        Plan\r\n                        </th> */}\r\n\r\n                        <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider select-none\">\r\n                        Created\r\n                        </th>\r\n\r\n                        <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider select-none\">\r\n                            Options\r\n                        </th>\r\n                    </tr>\r\n\r\n                </thead>\r\n                \r\n                <tbody className=\"divide-y divide-gray-200 dark:divide-gray-700 min-h-full\">\r\n                    {\r\n                        loaded ? renderTableRows() : \r\n                        <tr>\r\n                        <td className=\"px-6 py-4 whitespace-nowrap dark:bg-darkOther-200\">\r\n                            {/* <div className=\"flex items-center\"> */}\r\n    \r\n                                {/* <div className=\"ml-2\"> */}\r\n    \r\n                                    {/* style=\"font-family: 'Ubuntu Mono', monospace;\" */}\r\n                                    <div className=\"text-sm text-gray-700 font-mono dark:text-gray-400\" id=\"key\">\r\n                                    <SquareLoader color={'#302f2f'} loading={true} size={25} />\r\n                                    </div>\r\n    \r\n                                {/* </div> */}\r\n    \r\n                            {/* </div> */}\r\n                        </td>\r\n    \r\n                        <td className=\"px-6 py-4 whitespace-nowrap dark:bg-darkOther-200\">\r\n                            <div className=\"text-sm text-gray-900 dark:text-gray-500\" id=\"discordName\"><SquareLoader color={'#302f2f'} loading={true} size={25} /></div>\r\n                            <div className=\"text-sm text-gray-500 dark:text-gray-300\" id=\"discordId\"><SquareLoader color={'#302f2f'} loading={true} size={25} /></div>\r\n                        </td>\r\n    \r\n                        {/* <td className=\"px-6 py-4 whitespace-nowrap dark:bg-darkOther-200\">\r\n                            <div className=\"text-sm text-gray-900\" id=\"keyType\">{user.keyType}</div>\r\n                            <span className=\"px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800\">\r\n                                Active\r\n                            </span>\r\n                        </td> */}\r\n    \r\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:bg-darkOther-200\">\r\n                        <SquareLoader color={'#302f2f'} loading={true} size={25} />\r\n                        </td>\r\n    \r\n                        <td className=\"px-6 py-4 whitespace-nowrap dark:bg-darkOther-200\">\r\n                            \r\n                        <SquareLoader color={'#302f2f'} loading={true} size={25} />\r\n\r\n    \r\n                        </td>\r\n    \r\n                    </tr>\r\n                    }\r\n                </tbody>\r\n                \r\n        </table>\r\n\r\n            \r\n\r\n\r\n    )\r\n\r\n\r\n\r\n}\r\nexport default LicenseTable","E:\\dashboard-react\\src\\components\\users\\table.js",["148","149","150","151","152"],"import '../../static/styles/main.css'; \r\nimport React, { useState, useEffect } from 'react';\r\n\r\nimport {FaUserCircle} from 'react-icons/fa'\r\nimport SquareLoader from \"react-spinners/SquareLoader\";\r\n\r\n\r\nconst LicenseTable = () => {\r\n    const [users, setUsers] = useState([])\r\n    const [loaded, setLoaded] = useState(false)\r\n    \r\n\r\n    async function fetchUsers(){\r\n        const res = await fetch('/users/fetch');\r\n        res.json()\r\n        .then(res => {\r\n            setUsers(res)\r\n            setLoaded(true)\r\n        })\r\n        .catch(err =>  {});\r\n        \r\n    }\r\n\r\n\r\n    useEffect(() =>{\r\n        var abortController = new AbortController();\r\n        fetchUsers()\r\n\r\n\r\n        setInterval(() => {\r\n            abortController = new AbortController();\r\n            fetchUsers()\r\n\r\n        }, 4000);\r\n\r\n\r\n        return () => {\r\n            abortController.abort();\r\n        };\r\n\r\n    }, [])\r\n\r\n\r\n\r\n    const renderTableRows = () => {\r\n        return users.map(user => {\r\n            var date = new Date(user.dateJoined * 1000)\r\n            return (\r\n                <tr key={user.id}>\r\n                    <td className=\"px-6 py-4 whitespace-nowra dark:bg-darkOther-200\">\r\n                        <div className=\"flex items-center\">\r\n                            <div className=\"flex-shrink-0 h-10 w-10\">\r\n                            {user.discordImage == \"\" ? <FaUserCircle className=\"h-10 w-10 rounded-full bg-other-200 text-other-100\" /> : <img className=\"h-10 w-10 rounded-full\" src={user.discordImage} alt=\"\" />}\r\n                            \r\n                            </div>\r\n\r\n                            <div className=\"ml-4\">\r\n                                <div className=\"text-sm font-medium text-gray-900 dark:text-gray-400\">\r\n                                {user.discordName == \"empty\" ? \"Unbound\" : user.discordName}\r\n                                </div>\r\n\r\n                                <div className=\"text-sm text-gray-500 dark:text-gray-300\">\r\n                                {user.discordId == 123456789 ? \"Unbound\" : user.discordId}\r\n                                </div>\r\n                                \r\n                            </div>\r\n                        </div>\r\n\r\n                    </td>\r\n\r\n                    <td className=\"px-6 py-4 whitespace-nowrap dark:bg-darkOther-200\">\r\n                        <div className=\"text-sm text-gray-900 dark:text-gray-400\">{user.email}</div>\r\n                    </td>\r\n\r\n                    <td className=\"px-6 py-4 whitespace-nowrap dark:bg-darkOther-200\">\r\n                        <div className=\"text-sm text-gray-700 font-mono dark:text-gray-400\">{user.key}</div>\r\n                        <div className=\"text-sm text-gray-500 dark:text-gray-300\">{user.keyType}</div>\r\n                    </td>\r\n             \r\n\r\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:bg-darkOther-200 dark:text-gray-400\">\r\n                    {user.dateJoined == 0 ? \"Not joined\" : \r\n                        `${date.getDate()} ${['January','February','March','April','May','June','July','August','September','October','November','December'][date.getMonth()]}, ${date.getFullYear()}`\r\n                    }\r\n                    </td>\r\n\r\n                    <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium dark:bg-darkOther-200\">\r\n                        <span className=\"text-other-200 hover:text-indigo-900\"></span>\r\n                    </td>\r\n\r\n                </tr>\r\n            )\r\n            \r\n        })\r\n    }\r\n\r\n\r\n\r\n    return (\r\n\r\n            <table className=\"w-full overflow-y-auto\" id=\"table\" id='table'>\r\n\r\n                <thead className=\"bg-gray-200 dark:bg-darkOther-100\">\r\n\r\n                    <tr>\r\n                        <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider select-none\">\r\n                            User\r\n                        </th>\r\n    \r\n                        <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider select-none\">\r\n                            Email\r\n                        </th>\r\n    \r\n                        <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider select-none\">\r\n                            Key\r\n                        </th>\r\n    \r\n                        <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider select-none\">\r\n                            Joined\r\n                        </th>\r\n    \r\n                        <th scope=\"col\" className=\"relative px-6 py-3\">\r\n                        </th>\r\n\r\n                    </tr>\r\n\r\n                </thead>\r\n                \r\n                <tbody className=\"divide-y divide-gray-200 dark:divide-gray-700 min-h-full\">\r\n                    {loaded ? renderTableRows() : \r\n                    <tr>\r\n                        <td className=\"px-6 py-4 whitespace-nowra dark:bg-darkOther-200\">\r\n                            <div className=\"flex items-center\">\r\n                                <div className=\"flex-shrink-0 h-10 w-10\">\r\n                                <SquareLoader color={'#302f2f'} loading={true} size={25} />\r\n                                \r\n                                </div>\r\n\r\n                                <div className=\"ml-4\">\r\n                                    <div className=\"text-sm font-medium text-gray-900 dark:text-gray-400\">\r\n                                    <SquareLoader color={'#302f2f'} loading={true} size={25} />\r\n                                    </div>\r\n\r\n                                    <div className=\"text-sm text-gray-500 dark:text-gray-300\">\r\n                                    <SquareLoader color={'#302f2f'} loading={true} size={25} />\r\n                                    </div>\r\n                                    \r\n                                </div>\r\n                            </div>\r\n\r\n                        </td>\r\n\r\n                        <td className=\"px-6 py-4 whitespace-nowrap dark:bg-darkOther-200\">\r\n                            <div className=\"text-sm text-gray-900 dark:text-gray-400\"><SquareLoader color={'#302f2f'} loading={true} size={25} /></div>\r\n                        </td>\r\n\r\n                        <td className=\"px-6 py-4 whitespace-nowrap dark:bg-darkOther-200\">\r\n                            <div className=\"text-sm text-gray-700 font-mono dark:text-gray-400\"><SquareLoader color={'#302f2f'} loading={true} size={25} /></div>\r\n                            <div className=\"text-sm text-gray-500 dark:text-gray-300\"><SquareLoader color={'#302f2f'} loading={true} size={25} /></div>\r\n                        </td>\r\n                \r\n\r\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:bg-darkOther-200 dark:text-gray-400\">\r\n                        <SquareLoader color={'#302f2f'} loading={true} size={25} />\r\n                        </td>\r\n\r\n                        <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium dark:bg-darkOther-200\">\r\n                            <span className=\"text-other-200 hover:text-indigo-900\"></span>\r\n                        </td>\r\n\r\n                    </tr>}\r\n                </tbody>\r\n                \r\n            </table>\r\n\r\n    )\r\n\r\n\r\n}\r\nexport default LicenseTable","E:\\dashboard-react\\src\\components\\settings\\settings.js",["153","154","155","156","157","158","159","160"],"E:\\dashboard-react\\src\\components\\home\\planTable.js",["161"],"import '../../static/styles/main.css'; \r\nimport React, { useState, useEffect } from 'react';\r\nimport currencyToSymbolMap from 'currency-symbol-map/map'\r\nimport PlanEditModal from './planEditModal'\r\n\r\nimport { AiOutlineDelete, AiOutlineEdit } from 'react-icons/ai';\r\nimport { BsThreeDots } from 'react-icons/bs';\r\nimport SquareLoader from \"react-spinners/SquareLoader\";\r\n\r\nconst PlanTable = () => {\r\n\r\n    const [plans, setPlans] = useState([])\r\n    const [loaded, setLoaded] = useState(false)\r\n\r\n    async function fetchPlans(){\r\n        const res = await fetch('/plans');\r\n        res.json()\r\n        .then(res => {\r\n            setPlans(res)\r\n            setLoaded(true)\r\n        })\r\n        .catch(err =>  fetchPlans());\r\n        \r\n    }\r\n\r\n\r\n    useEffect(() =>{\r\n        var abortController = new AbortController();\r\n        fetchPlans()\r\n\r\n\r\n        setInterval(() => {\r\n            abortController = new AbortController();\r\n            fetchPlans()\r\n\r\n        }, 5000);\r\n\r\n\r\n        return () => {\r\n            abortController.abort();\r\n        };\r\n\r\n    }, [])\r\n\r\n\r\n\r\n    const deletePlan =  async (id) => {\r\n        await fetch('/plans/delete/' + id)\r\n\r\n    }\r\n\r\n\r\n    const renderTableRows = () => {\r\n        return plans.map(plan => {\r\n            return (\r\n                <tr key={plan.id}>\r\n\r\n                    <td className=\"px-6 py-3 max-w-0 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-white dark:bg-darkOther-200\">\r\n                        <div className=\"flex items-center lg:pl-2\">\r\n                            {/* <div className=\"flex-shrink-0 w-2.5 h-2.5 rounded-full bg-pink-600\" aria-hidden=\"true\"></div> */}\r\n                            {plan.planName}\r\n                        </div>\r\n                    </td>\r\n\r\n                    <td className=\"px-6 py-3 text-sm text-gray-800 dark:text-white font-medium dark:bg-darkOther-200\">\r\n                        <div className=\"flex items-center space-x-2\">\r\n                            <span className=\"flex-shrink-0 text-xs leading-5 font-medium\"> {currencyToSymbolMap[plan.currency]}{plan.price} / {plan.interval || ''}  {plan.intervalType || plan.type}</span>\r\n                        </div>\r\n                    </td>\r\n\r\n\r\n\r\n                    <td className=\"pr-6 dark:bg-darkOther-200 dark:text-white\">\r\n                        <div className=\"relative flex justify-end items-center\">\r\n                        <button id={`${plan.id}-plans-dropdown-button-hide`} name=\"plans-options-dropdown\" aria-haspopup=\"true\" type=\"button\" aria-expanded=\"true\" className=\"dark:text-white w-8 h-8 inline-flex items-center justify-center text-gray-800 rounded-full hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500\"  onClick={() => {\r\n                            document.querySelector('#plans-options-dropdown-' + plan.id).classList.contains('hidden') ? document.querySelector('#plans-options-dropdown-' + plan.id).classList.remove('hidden') : document.querySelector('#plans-options-dropdown-' + plan.id).classList.add('hidden')\r\n                        }}>\r\n                            <BsThreeDots className=\"h-4 w-4\" id={`${plan.id}-icon-hide`} />\r\n                        </button>\r\n\r\n                        <div id={`plans-options-dropdown-${plan.id}`} type=\"button\" className=\"dark:bg-darkOther-200 hidden mx-3 mr-10 origin-top-right absolute right-7 top-0 w-48 mt-1 rounded-md shadow-lg z-10 bg-white ring-1 ring-black ring-opacity-5\" role=\"menu\" aria-orientation=\"vertical\" aria-labelledby=\"project-options-menu-0\">\r\n                            <div className=\"py-1\" role=\"none\">\r\n                            <button  id={`plans-edit-${plan.id}`} className=\"group flex items-center px-4 w-full py-2 text-sm text-gray-700 hover:bg-gray-100 hover:text-gray-900 dark:hover:bg-darkOther-300 dark:text-white\" role=\"menuitem\" onClick={() => {\r\n                            document.querySelector(`#plan-modal-edit-${plan.id}`).classList.contains('hidden') ? document.querySelector(`#plan-modal-edit-${plan.id}`).classList.remove('hidden') : document.querySelector(`#plan-modal-edit-${plan.id}`).classList.add('hidden')\r\n                            \r\n                            }}>\r\n                            <AiOutlineEdit className=\"mr-3 h-5 w-5 text-gray-400 group-hover:text-gray-500\" />\r\n                                Edit\r\n                            </button>\r\n                            <button id={`plans-delete-${plan.id}`} type=\"button\" className=\"group flex w-full items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 hover:text-gray-900 dark:hover:bg-darkOther-300 dark:text-white\" role=\"menuitem\" onClick={() => deletePlan(plan.id)}>\r\n                                <AiOutlineDelete className=\"mr-3 h-5 w-5 text-gray-400 group-hover:text-gray-500\" onClick={() => deletePlan(plan.id)}/>\r\n                                Delete\r\n                            </button>\r\n                            </div>\r\n                        </div>\r\n                        </div>\r\n                    </td>\r\n\r\n                    <PlanEditModal {...plan}/>\r\n\r\n                    \r\n\r\n                </tr>\r\n            )\r\n            \r\n        })\r\n    }\r\n    \r\n\r\n\r\n\r\n    return (\r\n\r\n            <table className=\"bg-white w-full overflow-y-auto mt-2 rounded-md\" id=\"table\">\r\n\r\n                <thead className=\"bg-gray-200 rounded-md dark:bg-darkOther-100\">\r\n\r\n                    <tr className=\"border-gray-200\">\r\n\r\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider select-none\">\r\n                        <span className=\"lg:pl-2 \"> Plan</span>\r\n                        </th>\r\n\r\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider select-none\">\r\n                            Interval\r\n                        </th>\r\n\r\n\r\n\r\n                        <th className=\"md:table-cell px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider select-none\">\r\n                            Options\r\n                        </th>\r\n\r\n                    </tr>\r\n\r\n                </thead>\r\n                \r\n                <tbody className=\"bg-white divide-y divide-gray-200 dark:divide-gray-500 w-full\">\r\n                    {loaded ? renderTableRows() : \r\n                        <tr>\r\n\r\n                            <td className=\"px-6 py-3 max-w-0 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-white dark:bg-darkOther-200\">\r\n                                <div className=\"flex items-center lg:pl-2\">\r\n                                    <SquareLoader color={'#302f2f'} loading={true} size={25} />\r\n                                </div>\r\n                            </td>\r\n\r\n                            <td className=\"px-6 py-3 text-sm text-gray-800 dark:text-white font-medium dark:bg-darkOther-200\">\r\n                                <div className=\"flex items-center space-x-2\">\r\n                                    <span className=\"flex-shrink-0 text-xs leading-5 font-medium\"> <SquareLoader color={'#302f2f'} loading={true} size={25} /> </span>\r\n                                </div>\r\n                            </td>\r\n\r\n\r\n\r\n                            <td className=\"pr-6 dark:bg-darkOther-200 dark:text-white\">\r\n                                <div className=\"relative flex justify-end items-center\">\r\n                                <SquareLoader color={'#302f2f'} loading={true} size={25} />\r\n\r\n                                </div>\r\n                            </td>\r\n\r\n\r\n                        </tr>\r\n                    }\r\n                </tbody>\r\n                \r\n            </table>\r\n\r\n    )\r\n\r\n\r\n}\r\nexport default PlanTable","E:\\dashboard-react\\src\\components\\home\\restockTable.js",["162"],"import '../../static/styles/main.css'; \r\nimport React, { useState, useEffect } from 'react';\r\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\r\nimport ProgressBar from \"@ramonak/react-progress-bar\";\r\n\r\n\r\nimport { AiOutlineDelete, AiOutlineCopy } from 'react-icons/ai';\r\nimport { BsThreeDots } from 'react-icons/bs';\r\nimport SquareLoader from \"react-spinners/SquareLoader\";\r\n\r\n\r\nconst RestockTable = () => {\r\n    const [restocks, setRestocks] = useState([])\r\n    const [loaded, setLoaded] = useState(false)\r\n\r\n    async function fetchRestocks(){\r\n        const res = await fetch('/restocks');\r\n        res.json()\r\n        .then(res => {\r\n            setRestocks(res)\r\n            setLoaded(true)\r\n        })\r\n        .catch(err =>  fetchRestocks());\r\n        \r\n    }\r\n\r\n    useEffect(() =>{\r\n        var abortController = new AbortController();\r\n        fetchRestocks()\r\n        \r\n\r\n        setInterval(() => {\r\n            abortController = new AbortController();\r\n            fetchRestocks()\r\n        }, 5000);\r\n\r\n\r\n        return () => {\r\n            abortController.abort();\r\n        };\r\n\r\n    }, [])\r\n\r\n    const deleteRestock = async (id) => {\r\n        var response = await fetch('/restocks/delete/' + id, {\r\n            method:'get',\r\n            headers: {\r\n                authorization:1\r\n            }\r\n        })\r\n        if(response.ok) {\r\n            return\r\n        }else{\r\n            return\r\n        }\r\n    }\r\n\r\n\r\n    const renderTableRows = () => {\r\n        return restocks.map(restock => {\r\n            return (\r\n                <tr key={restock.id}>\r\n\r\n                    <td className=\"px-6 py-3 max-w-0 whitespace-nowrap text-sm font-medium text-gray-900 dark:bg-darkOther-200 dark:text-white\">\r\n                        <div className=\"flex items-center lg:pl-2\">\r\n                            {/* <div className=\"flex-shrink-0 w-2.5 h-2.5 rounded-full bg-pink-600\" aria-hidden=\"true\"></div> */}\r\n                            {restock.planName}\r\n                        </div>\r\n                    </td>\r\n\r\n                    <td className=\"px-6 py-3 text-sm text-gray-800 font-medium dark:bg-darkOther-200 dark:text-white\">\r\n                        <div className=\"flex items-center space-x-2\">\r\n\r\n                        <span className=\"flex-shrink-0 text-xs leading-5 font-medium w-full\"><ProgressBar bgcolor='#3B82F6' completed={(100 * restock.stockRemaining) / restock.stock} /></span>\r\n                        </div>\r\n                    </td>\r\n\r\n                    <td className=\"pr-6 dark:bg-darkOther-200 dark:text-white\">\r\n                        <div className=\"relative flex justify-end items-center\">\r\n                            <button id=\"restock-options-button-hide\" name=\"restock-options-dropdown\" aria-haspopup=\"true\" type=\"button\" aria-expanded=\"true\" className=\"w-8 h-8 inline-flex items-center justify-center text-gray-800 rounded-full hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500 dark:text-white\" onClick={() => {\r\n                                document.querySelector('#restock-options-dropdown-' + restock.id).classList.contains('hidden') ? document.querySelector('#restock-options-dropdown-' + restock.id).classList.remove('hidden') : document.querySelector('#restock-options-dropdown-'  + restock.id).classList.add('hidden')\r\n                            }}>\r\n                            <BsThreeDots className=\"h-4 w-4\" id='hide'/>\r\n                            </button>\r\n\r\n                            <div id={\"restock-options-dropdown-\" + restock.id} className=\"dark:bg-darkOther-200 hidden mx-3 mr-10 origin-top-right absolute right-7 top-0 w-48 mt-1 rounded-md shadow-lg z-10 bg-white ring-1 ring-black ring-opacity-5\" role=\"menu\" aria-orientation=\"vertical\" aria-labelledby=\"project-options-menu-0\">\r\n                                <div className=\"py-1\" role=\"none\">\r\n                                    <CopyToClipboard href=\"#\" className=\"group flex w-full items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 hover:text-gray-900 dark:hover:bg-darkOther-300 dark:text-white\" role=\"menuitem\" text={`${window.location.origin}/purchase?password=${restock.password}`} onCopy={() => {\r\n                                    document.querySelector('#copy-hide-' + restock.id).classList.add('text-green-500')\r\n                                    setTimeout(() => {\r\n                                        document.querySelector('#copy-hide-' + restock.id).classList.remove(['text-green-500'])\r\n                                    }, 1500);\r\n                                    }}>\r\n                                    <button className=\"w-full\" type='button' id={\"restock-options-dropdown-copy-\" + restock.id}>\r\n                                        <AiOutlineCopy className=\"mr-3 h-5 w-5 text-gray-400 group-hover:text-gray-500\" id={'copy-hide-'+ restock.id}/>\r\n                                        Copy Restock\r\n                                    </button>\r\n                                    </CopyToClipboard>\r\n\r\n                                    <button type='button' className=\"group flex w-full items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 hover:text-gray-900 dark:hover:bg-darkOther-300 dark:text-white\" role=\"menuitem\" onClick={() => deleteRestock(restock.id)} >\r\n                                        <AiOutlineDelete className=\"mr-3 h-5 w-5 text-gray-400 group-hover:text-gray-500\" onClick={() => deleteRestock(restock.id)}/>\r\n                                        Delete\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n\r\n                        </div>\r\n                    \r\n                    </td>\r\n\r\n                </tr>\r\n            )\r\n            \r\n        })\r\n    }\r\n\r\n\r\n\r\n    return (\r\n\r\n            <table className=\"bg-white w-full overflow-y-auto mt-2 rounded-md\" id='table'>\r\n\r\n                <thead className=\"bg-gray-200 rounded-md dark:bg-darkOther-100\">\r\n                    <tr className=\"border-gray-200\">\r\n\r\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider select-none\">\r\n                            <span className=\"lg:pl-2\">Plan</span>\r\n                        </th>\r\n\r\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-widerr select-none\">\r\n                            Stock\r\n                        </th>\r\n\r\n                        <th className=\"md:table-cell px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider select-none\">\r\n                            Options\r\n                        </th>\r\n\r\n                    </tr>\r\n                </thead>\r\n                \r\n                <tbody className=\"bg-white divide-y divide-gray-200 dark:divide-gray-500 w-full\">\r\n                {loaded ? renderTableRows() : \r\n\r\n                <tr>\r\n\r\n                <td className=\"px-6 py-3 max-w-0 whitespace-nowrap text-sm font-medium text-gray-900 dark:bg-darkOther-200 dark:text-white\">\r\n                    <div className=\"flex items-center lg:pl-2\">\r\n                    <SquareLoader color={'#302f2f'} loading={true} size={25} />\r\n                    </div>\r\n                </td>\r\n\r\n                <td className=\"px-6 py-3 text-sm text-gray-800 font-medium dark:bg-darkOther-200 dark:text-white\">\r\n                    <div className=\"flex items-center space-x-2\">\r\n\r\n                    <span className=\"flex-shrink-0 text-xs leading-5 font-medium w-full\"><SquareLoader color={'#302f2f'} loading={true} size={25} /></span>\r\n                    </div>\r\n                </td>\r\n\r\n                <td className=\"pr-6 dark:bg-darkOther-200 dark:text-white\">\r\n                    <div className=\"relative flex justify-end items-center\">\r\n                    <SquareLoader color={'#302f2f'} loading={true} size={25} />\r\n\r\n                    </div>\r\n\r\n                </td>\r\n\r\n                </tr>\r\n                \r\n                }\r\n                </tbody>\r\n                \r\n            </table>\r\n\r\n    )\r\n\r\n\r\n}\r\nexport default RestockTable","E:\\dashboard-react\\src\\components\\siteHomePage\\home.js",["163","164"],"E:\\dashboard-react\\src\\components\\userDashboard\\dashboard.js",["165","166","167","168","169","170","171","172","173","174","175","176","177"],"E:\\dashboard-react\\src\\components\\bindPage\\bindPage.js",["178","179","180","181","182","183"],"E:\\dashboard-react\\src\\components\\userNav.js",["184","185"],"import '../static/styles/main.css'; \r\nimport React, {useState, useEffect} from 'react';\r\nimport BounceLoader from \"react-spinners/BounceLoader\";\r\n\r\n\r\n\r\nconst UserNav = () =>  {\r\n    const [loaded, setLoaded] = useState(false)\r\n    const [img, setImg] = useState(\"\")\r\n\r\n    async function fetchData(){\r\n        const res = await fetch('/accounts/user/data');\r\n        res.json()\r\n        .then(res => {\r\n            setImg(res.serverImage)\r\n            setLoaded(true)\r\n        })\r\n        .catch(err =>  {\r\n            fetchData()\r\n        });\r\n        \r\n    }\r\n\r\n\r\n    useEffect(() =>{\r\n        var abortController = new AbortController();\r\n        fetchData()\r\n\r\n\r\n\r\n\r\n        return () => {\r\n            abortController.abort();\r\n        };\r\n\r\n    }, [])\r\n\r\n\r\n    // render() {\r\n        return (\r\n\r\n            <>\r\n            <nav>\r\n                <div className=\"\">\r\n                    <div className=\"h-16 text-left\">\r\n\r\n                        <div className=\"text-left\">\r\n                            {loaded ? <img className=\"block h-24 w-auto rounded-full p-2\" src={img}/> : <BounceLoader color={'#302f2f'} loading={true} size={25} /> }\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n\r\n            </nav>\r\n            </>\r\n        )\r\n}\r\n\r\nexport default UserNav;","E:\\dashboard-react\\src\\components\\home\\planEditModal.js",["186","187","188","189","190","191","192"],"import '../../static/styles/main.css'; \r\nimport React, { useEffect, useState } from 'react';\r\nimport Select from 'react-select';\r\nimport makeAnimated from 'react-select/animated';\r\nimport chroma from 'chroma-js';\r\nimport { Switch } from '@headlessui/react'\r\nimport DatePicker from 'react-date-picker';\r\n\r\nimport { AiOutlineClose } from 'react-icons/ai';\r\nimport { IoPricetagOutline } from 'react-icons/io5';\r\nimport { BsCalendar } from 'react-icons/bs'\r\nimport { MdClear } from 'react-icons/md'\r\n\r\n\r\nconst PlanEditModal = (currentPlanData) => {\r\n\r\n    const [availableRoles, setavailableRoles] = useState([])\r\n    const [planName, setplanName] = useState(\"\")\r\n    const [planRole, setplanRole] = useState()\r\n    const [unbinding, setunbinding] = useState(true)\r\n    const [expDate, setExpDate] = useState(new Date())\r\n\r\n\r\n    async function fetchPlans(){\r\n        const res = await fetch('/discord/guild/roles');\r\n        res.json()\r\n        .then(res => {\r\n            setavailableRoles(res.roles)\r\n        })\r\n        .catch(err =>  {console.log(err)});\r\n        \r\n    }\r\n\r\n    useEffect(() =>{\r\n        // setExpDate(new Date(currentPlanData.expiry))\r\n        setunbinding(currentPlanData.unbindable)\r\n        setplanRole(JSON.parse(currentPlanData.role))\r\n        setplanName(currentPlanData.planName)\r\n        const abortController = new AbortController();\r\n        fetchPlans()\r\n\r\n\r\n\r\n        return () => {\r\n            abortController.abort();\r\n        };\r\n\r\n    }, [])\r\n\r\n    const colourStyles = {\r\n        control: styles => ({ ...styles, backgroundColor: localStorage.getItem('mode') }),\r\n        option: (styles, { data, isDisabled, isFocused, isSelected }) => {\r\n          const color = chroma(data.color);\r\n          return {\r\n            ...styles,\r\n            backgroundColor: isDisabled\r\n              ? null\r\n              : isSelected\r\n              ? data.color\r\n              : isFocused\r\n              ? color.alpha(0.1).css()\r\n              : null,\r\n            color: isDisabled\r\n              ? '#ccc'\r\n              : isSelected\r\n              ? chroma.contrast(color, 'white') > 2\r\n                ? 'white'\r\n                : 'black'\r\n              : data.color,\r\n            cursor: isDisabled ? 'not-allowed' : 'default',\r\n      \r\n            ':active': {\r\n              ...styles[':active'],\r\n              backgroundColor:\r\n                !isDisabled && (isSelected ? data.color : color.alpha(0.3).css()),\r\n            },\r\n          };\r\n        },\r\n        multiValue: (styles, { data }) => {\r\n          const color = chroma(data.color);\r\n          return {\r\n            ...styles,\r\n            backgroundColor: color.alpha(0.1).css(),\r\n          };\r\n        },\r\n        multiValueLabel: (styles, { data }) => ({\r\n          ...styles,\r\n          color: data.color,\r\n        }),\r\n        multiValueRemove: (styles, { data }) => ({\r\n          ...styles,\r\n          color: data.color,\r\n          ':hover': {\r\n            backgroundColor: data.color,\r\n            color: 'white',\r\n          },\r\n        }),\r\n      };\r\n    const colourStyle = {\r\n        control: styles => ({ ...styles, backgroundColor: localStorage.getItem('mode') }),\r\n\r\n    }\r\n\r\n\r\n    \r\n    const submitHandler2 = async (e) => {\r\n        e.preventDefault()\r\n\r\n        var response = await fetch('/plans/update', {\r\n            method:'post',\r\n            body:JSON.stringify({\r\n                id:currentPlanData.id,\r\n                planName:planName,\r\n                role:JSON.stringify(planRole),\r\n                unbinding:unbinding,\r\n                expiry:expDate.getTime()\r\n            }),\r\n            \"headers\": {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        })\r\n        if(response.ok) {\r\n\r\n            return\r\n        }else{\r\n            return\r\n        }\r\n    }\r\n\r\n        \r\n        return (\r\n            <div className=\"fixed z-10 inset-0 overflow-y-auto hidden\" id={`plan-modal-edit-${currentPlanData.id}`}>\r\n            \r\n            <form onSubmit={submitHandler2}>\r\n                <div className=\"flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0\">\r\n\r\n                    <div className=\"fixed inset-0 transition-opacity\" aria-hidden=\"true\">\r\n                        <div className=\"absolute inset-0 bg-gray-500 opacity-75\"></div>\r\n                    </div>\r\n        \r\n                    <span className=\"hidden sm:inline-block sm:align-middle sm:h-screen\" aria-hidden=\"true\">&#8203;</span>\r\n\r\n    \r\n                    <div className=\"inline-block align-bottom bg-white rounded-lg px-4 pt-5 pb-4 text-left shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-sm sm:w-full sm:p-6 dark:bg-darkOther-200\" role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"modal-headline\">\r\n                \r\n                        <div>\r\n                            <button type=\"button\" onClick={() => {\r\n                                document.querySelector(`#plan-modal-edit-${currentPlanData.id}`).classList.contains('hidden') ? document.querySelector(`#plan-modal-edit-${currentPlanData.id}`).classList.remove('hidden') : document.querySelector(`#plan-modal-edit-${currentPlanData.id}`).classList.add('hidden')\r\n                            }}><AiOutlineClose className=\"text-red-500 h-6 w-6 \" id='hide' /></button>\r\n\r\n\r\n                            <div className=\"mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-green-100\">\r\n    \r\n                            \r\n                            <IoPricetagOutline className=\"h-6 w-6 text-green-600 select-none\" id='hide'/>\r\n                        </div>\r\n\r\n\r\n                        <div className=\"mt-3 text-center sm:mt-5\">  \r\n                            <h3 className=\"text-lg leading-6 font-medium text-gray-900 dark:text-white select-none\" id=\"modal-headline\">\r\n                            Edit a Plan...\r\n                            </h3>\r\n\r\n                            <div className=\"mt-2\">\r\n                                \r\n                                <div>\r\n\r\n                                    <fieldset className=\"mt-2 bg-white dark:bg-darkOther-200\">\r\n                                        <div className=\"md:grid md:grid-cols-2\">\r\n                                        <div className=\"\">\r\n                                                <legend className=\"block text-sm font-medium text-gray-700 text-left dark:text-gray-300 select-none\">Plan Name</legend>\r\n                                                <div className=\"mt-1 rounded-md shadow-sm -space-y-px\">\r\n                                                    <div>\r\n                                                    <label className=\"block text-sm font-medium text-gray-700\"></label>\r\n                                                    <input  name=\"planName\" id=\"name\" autoComplete=\"off\" className=\"dark:bg-darkOther-200 dark:text-white focus:border-other-200 block w-full font-medium text-md rounded-md py-2 focus:outline-none\" \r\n                                                    placeholder=\"Member\" value={planName} onChange={e => setplanName(e.target.value)} />                                                         \r\n                                                    \r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                            \r\n                                            <div className=\"\">\r\n                                                <legend className=\"block text-sm font-medium text-gray-700 text-left dark:text-gray-300 select-none\">Type</legend>\r\n                                                <div className=\"mt-1 rounded-md shadow-sm -space-y-px\">\r\n                                                    <div>\r\n                                                        <label className=\"sr-only\">type</label>\r\n                                                        \r\n                                                        <Select isDisabled defaultValue={{\"label\":currentPlanData.type, \"value\":currentPlanData.type}} styles={colourStyle} placeholder=\"Plan Type\" id=\"type\" name=\"planType\" className=\"focus:ring-other-200 focus:border-other-200 relative block w-full rounded-none rounded-t-md bg-transparent focus:z-10 font-medium text-md dark:focus:border-darkOther-200 dark:focus:ring-darkOther-200\"/>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n        \r\n                                        </div>\r\n        \r\n                                    </fieldset>\r\n\r\n                                    {currentPlanData.type == \"recurring\" || currentPlanData.type == \"recurring+onetime-payment\" ?  <fieldset className=\"mt-2 bg-white dark:bg-darkOther-200\">\r\n                                        <div className=\"md:grid md:grid-cols-2\">\r\n                                        <div className=\"\">\r\n                                                <legend className=\"block text-sm font-medium text-gray-700 text-left dark:text-gray-300 select-none\">Interval</legend>\r\n                                                <div className=\"mt-1 rounded-md shadow-sm -space-y-px\">\r\n                                                    <div className=\"mt-1 flex rounded-md shadow-sm -space-y-px\">\r\n                                                        <span className=\"inline-flex items-center px-3 rounded-l-md border-r-2 border-gray-200 bg-gray-50 text-gray-800 sm:text-sm mr-2 dark:bg-darkOther-100 dark:text-white select-none\">\r\n                                                            every\r\n                                                        </span>\r\n                                                        <input isDisabled name=\"interval\" id=\"interval\" type=\"text\" placeholder=\"Count\" autoComplete=\"off\" className=\"dark:text-white dark:bg-darkOther-200 block w-full font-normal text-md rounded-md py-2 \" value={currentPlanData.interval}/>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                            \r\n                                            <div className=\"\">\r\n                                                <legend className=\"block text-sm font-medium text-gray-700 text-left dark:text-gray-300 select-none\">Interval Type</legend>\r\n                                                <div className=\"mt-1 rounded-md shadow-sm -space-y-px\">\r\n                                                    <div>\r\n                                                        <label className=\"sr-only select-none\">Interval Type</label>\r\n                                                        \r\n                                                        <Select isDisabled styles={colourStyle} id=\"type\" defaultValue={{\"label\":currentPlanData.intervalType, \"value\":currentPlanData.intervalType}}  name=\"intervalType\" placeholder=\"Interval\" \r\n                                                                className=\"relative block w-full rounded-none rounded-t-md focus:z-10 font-medium text-md\"/>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n        \r\n                                        </div>\r\n        \r\n                                    </fieldset> :  <></> }\r\n\r\n                                    \r\n                                \r\n\r\n                                    <fieldset className=\"mt-4 bg-white dark:bg-darkOther-200\">\r\n                                        <legend className=\"block text-sm font-medium text-gray-700 text-left dark:text-gray-300 select-none\">Price</legend>\r\n                                        <div className=\"mt-1 bg-white rounded-md shadow-sm\">\r\n                                            <div>\r\n                                                <div className=\"mt-1 relative rounded-md shadow-sm\">\r\n                                                    <input type=\"text\" isDisabled name=\"price\" id=\"price\" className=\"dark:text-white dark:bg-darkOther-200 block w-full font-medium text-md py-2 focus:outline-none\" \r\n                                                    placeholder=\"0.00\" value={currentPlanData.price}/>\r\n\r\n                                                    <div className=\"absolute inset-y-0 right-0 flex items-center\">\r\n                                                        <label className=\"sr-only\">Currency</label>\r\n                                                        <Select isDisabled styles={colourStyle}  id=\"type\" name=\"priceCurrency\" placeholder=\"Currency\" className=\"px-3 w-48 dark:bg-darkOther-200\" defaultValue={{\"label\":currentPlanData.currency, \"value\":currentPlanData.currency}}/>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    \r\n                                    </fieldset>\r\n\r\n                                    {currentPlanData.type == \"rental\" ? <fieldset className=\"mt-4 bg-white dark:bg-darkOther-200\">\r\n                                        <legend className=\"block text-sm font-medium text-gray-700 text-left dark:text-gray-300 select-none\">Expiry</legend>\r\n                                        <div className=\"mt-1 bg-white dark:bg-darkOther-200\">\r\n                                            <div>\r\n                                                <div className=\"mt-1 relative rounded-md shadow-sm text-left dark:text-white\" id=\"calendar\">\r\n                                                <DatePicker\r\n                                                    onChange={setExpDate}\r\n                                                    value={expDate}\r\n                                                    calendarIcon={<BsCalendar />}\r\n                                                    clearIcon={<MdClear />}\r\n                                                    onCalendarClose={() => {\r\n                                                        document.querySelector('#calendar').classList.add('dark:text-white')\r\n                                                    }}\r\n                                                    onCalendarOpen={() => {\r\n                                                        document.querySelector('#calendar').classList.remove('dark:text-white')\r\n                                                    }}\r\n                                                />\r\n\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    \r\n                                    </fieldset> : <></>}\r\n\r\n                                    {currentPlanData.type == \"recurring+onetime-payment\" ? <fieldset className=\"mt-2 bg-whit dark:bg-darkOther-200\" id=\"interval-fieldset\">\r\n                                            <div className=\"\">\r\n                                                <legend className=\"block text-sm font-medium text-gray-700 text-left dark:text-gray-300 select-none\">Onetime Payment Price</legend>\r\n                                                <div className=\"mt-1 rounded-md shadow-sm -space-y-px\">\r\n                                                    <div>\r\n                                                        <label className=\"sr-only\">price</label>\r\n                                                        <input type=\"text\" isDisabled className=\"dark:bg-darkOther-200 focus:ring-other-200 focus:border-other-200 block w-full font-medium text-md  rounded-md py-2 dark:focus:border-darkOther-200 dark:focus:ring-darkOther-200\" \r\n                                                        placeholder=\"0.00\" defaultValue={currentPlanData.oneTimeAmount}/>\r\n                                                                                                                            \r\n                                                    \r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                    \r\n                                    </fieldset> : <></>}\r\n\r\n\r\n                                    <fieldset className=\"mt-2 bg-whit dark:bg-darkOther-200\" id=\"interval-fieldset\">\r\n                                            <div className=\"\">\r\n                                                <legend className=\"block text-sm font-medium text-gray-700 text-left dark:text-gray-300 select-none\">Roles</legend>\r\n                                                <div className=\"mt-1 rounded-md shadow-sm -space-y-px\">\r\n                                                    <div>\r\n                                                        <label className=\"sr-only\">roles</label>\r\n                            \r\n                                                        <Select id=\"roles\" isMulti value={planRole} placeholder=\"Roles\" name=\"roles\" closeMenuOnSelect={false} styles={colourStyles} name=\"planRole\" isSearchable  options={availableRoles} className=\"focus:ring-other-200 focus:border-other-200 relative block w-full rounded-none rounded-t-md bg-transparent focus:z-10 font-medium text-md dark:focus:border-darkOther-200 dark:focus:ring-darkOther-200\"\r\n                                                                    onChange={e => setplanRole(e)} />\r\n                                                                                                                                                                      \r\n                                                    \r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                    \r\n                                    </fieldset>\r\n\r\n                                    <fieldset className=\"mt-2 bg-white dark:bg-darkOther-200\" id=\"interval-fieldset\">\r\n                                            <div className=\"\">\r\n                                                <legend className=\"block text-sm font-medium text-gray-700 text-left dark:text-gray-300 select-none\">{unbinding ? \"Unbinding Enabled\" : \"Unbinding Disabled\"}</legend>\r\n                                                <div className=\"mt-1 rounded-md shadow-sm -space-y-px\">\r\n                                                    <div className=\"text-left\">\r\n                                                        <label className=\"sr-only\">allow unbinding</label>\r\n                                                        <Switch \r\n                                                        type=\"button\"\r\n                                                        checked={unbinding}\r\n                                                        onChange={e => setunbinding(e)}\r\n                                                        as=\"button\" \r\n                                                        className={`${unbinding ? \"bg-green-400\" : \"bg-gray-200\"} relative inline-flex flex-shrink-0 h-6 w-11 border-2 border-transparent rounded-full cursor-pointer transition-colors ease-in-out duration-200 focus:outline-none`}>\r\n\r\n                                                            {unbinding ? \r\n                                                            <span aria-hidden=\"true\" className=\"pointer-events-none translate-x-0 inline-block h-5 w-5 rounded-full bg-white shadow transform ring-0 transition ease-in-out duration-200\"></span> : \r\n                                                            <span aria-hidden=\"true\" className=\"pointer-events-none translate-x-5 inline-block h-5 w-5 rounded-full bg-white shadow transform ring-0 transition ease-in-out duration-200\"></span>\r\n                                                            }\r\n\r\n                                                        </Switch>\r\n                                                                                                                            \r\n                                                    \r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                    \r\n                                    </fieldset>\r\n\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"mt-5 sm:mt-6\">\r\n                        <button  type=\"submit\" className=\"inline-flex justify-center w-full rounded-md border border-transparent shadow-sm px-4 py-2 bg-blue-500 text-base font-medium text-white hover:bg-other-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-other-200 sm:text-sm dark:focus:ring-darkOther-200 dark:hover:bg-darkOther-200 dark:bg-darkOther-100\">\r\n                            Edit\r\n                        </button>\r\n                    </div>\r\n\r\n                </div>\r\n            \r\n            </div>\r\n            </form>\r\n    </div>\r\n\r\n        )\r\n\r\n}\r\nexport default PlanEditModal","E:\\dashboard-react\\src\\components\\purchasePage\\purchase.js",["193","194","195","196","197"],"E:\\dashboard-react\\src\\components\\purchasePage\\checkout.js",["198","199","200","201","202","203","204","205","206","207"],"E:\\dashboard-react\\src\\components\\userDashboard\\renewModal.js",["208","209"],"import '../../static/styles/main.css'; \r\nimport React, { useEffect, useState } from 'react';\r\nimport Renew from './renew'\r\n\r\nimport { MdAutorenew } from 'react-icons/md';\r\n\r\n\r\n\r\nconst Modal = () => {\r\n\r\n        \r\n    return (\r\n            <div className=\"fixed z-10 inset-0 overflow-y-auto\" id=\"renew-modal\">\r\n        \r\n                    <div className=\"flex items-end justify-center min-h-screen pt-4 px-4 pb-64 text-center sm:block sm:p-0\r\n                    \">\r\n\r\n                        <div className=\"fixed inset-0 transition-opacity\" aria-hidden=\"true\">\r\n                            <div className=\"absolute inset-0 bg-gray-500 opacity-95\"></div>\r\n                        </div>\r\n            \r\n                        <span className=\"hidden lg:inline-block lg:align-middle lg:h-screen md:inline-block md:align-middle md:h-screen sm:inline-block sm:align-middle sm:h-screen \" aria-hidden=\"true\">&#8203;</span>\r\n\r\n        \r\n                        <div className=\"inline-block align-bottom bg-white rounded-lg px-4 pt-5 pb-4 text-left shadow-xl transform transition-all sm:align-middle md:align-middle lg:align-middle  max-w-sm w-full p-6 dark:bg-darkOther-200\" role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"modal-headline\">\r\n                    \r\n                            <div>\r\n\r\n\r\n                                <div className=\"mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-green-100\">\r\n        \r\n                                \r\n                                <MdAutorenew className=\"h-6 w-6 text-green-600 select-none\" id='hide'/>\r\n                            </div>\r\n    \r\n\r\n                            <div className=\"mt-3 text-center sm:mt-5\">  \r\n                                <h3 className=\"text-lg leading-6 font-medium text-gray-900 dark:text-white select-none\" id=\"modal-headline\">\r\n                                Renew Subscription\r\n                                </h3>\r\n    \r\n                                <div className=\"mt-2\">\r\n                                    \r\n                                    <div>\r\n\r\n                                        <fieldset className=\"mt-2 bg-white dark:bg-darkOther-200\">\r\n                                            <Renew />\r\n                                        </fieldset>\r\n\r\n\r\n    \r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                \r\n                </div>\r\n        </div>\r\n\r\n    )\r\n\r\n}\r\nexport default Modal","E:\\dashboard-react\\src\\components\\userDashboard\\renew.js",["210","211","212","213","214","215","216"],"import React, {useState, useEffect} from 'react';\r\nimport BeatLoader from \"react-spinners/BeatLoader\";\r\nimport {loadStripe} from '@stripe/stripe-js';\r\nimport {\r\n  CardElement,\r\n  Elements,\r\n  useStripe,\r\n  useElements,\r\n} from '@stripe/react-stripe-js';\r\n\r\n\r\nconst CheckoutForm = () => {\r\n    const stripe = useStripe();\r\n    const elements = useElements();\r\n    const [checkoutStatus, setCheckoutStatus] = useState(\"idle\")\r\n    const [key, setKey] = useState(\"\")\r\n    const [availableStock, setAvailableStock] = useState(false)\r\n    const [pricingDetails, setPricingDetails] = useState(\"\")\r\n\r\n    async function fetchData(){\r\n        setAvailableStock(true)\r\n        setPricingDetails(\"N/A\")  \r\n    }\r\n\r\n    useEffect(() =>{\r\n        const abortController = new AbortController();\r\n        fetchData()\r\n\r\n\r\n        return () => {\r\n            abortController.abort();\r\n        };\r\n\r\n    }, [])\r\n\r\n\r\n\r\n\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n        if (['success','pending'].includes(checkoutStatus)) {\r\n            console.log(\"\")\r\n        }\r\n        else {\r\n\r\n            const {error, paymentMethod} = await stripe.createPaymentMethod({\r\n                type: 'card',\r\n                card: elements.getElement(CardElement),\r\n            });\r\n            if(error) {\r\n                setCheckoutStatus(\"failed\")\r\n            }\r\n\r\n            setCheckoutStatus(\"pending\")\r\n            var response = await fetch('/stripe/renew', {\r\n                method:'post',\r\n                body:JSON.stringify({\r\n                    paymentMethod:paymentMethod\r\n                }),\r\n                \"headers\": {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            })\r\n            if(response.ok) {\r\n                if(response.status == 200) {\r\n                    setCheckoutStatus(\"success\")\r\n                    //setKey(await response.json().key)\r\n                }\r\n                else setCheckoutStatus(\"failed\")\r\n\r\n            } else {\r\n\r\n                setCheckoutStatus(\"failed\")\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <div className=\"w-full text-center\">\r\n            {availableStock ? <form onSubmit={handleSubmit}>\r\n\r\n                <fieldset>\r\n                <CardElement options={{\r\n                    style: {\r\n                    base: {\r\n                        fontSize: '16px',\r\n                        color: '#aab7c4',\r\n                        '::placeholder': {\r\n                        color: '#aab7c4',\r\n                        },\r\n                    },\r\n                    invalid: {\r\n                        color: '#9e2146',\r\n                    },\r\n                    },\r\n                }}/>\r\n                </fieldset>\r\n\r\n                <p className=\"text-xs text-gray-400 font-medium select-none\">{pricingDetails}</p>\r\n\r\n                {\r\n                    checkoutStatus == \"idle\" ? <button type=\"submit\" disabled={!stripe} className=\"duration-150 transform hover:scale-105 motion-reduce:transform-none font-medium text-md rounded-md text-white bg-other-900 p-2 px-5 text-center mt-12\">Renew Now</button> : \r\n                    checkoutStatus == \"failed\" ? <button type=\"submit\" disabled={!stripe} className=\"font-medium text-md rounded-md text-white bg-red-500 p-2 px-5 text-center mt-12\">Checkout Failed</button> :\r\n                    checkoutStatus == \"success\" ? <button type=\"submit\" disabled={!stripe} className=\"font-medium text-md rounded-md text-white bg-green-500 p-2 px-5 text-center mt-12\">Renewed</button> : \r\n                    checkoutStatus == \"pending\" ? <button type=\"submit\" disabled={!stripe} className=\"font-medium text-md rounded-md text-white bg-yellow-500 p-2 px-5 text-center mt-12\"><BeatLoader color={'#ffffff'} loading={true} size={10} /> </button> :\r\n                    <button type=\"submit\" disabled={!stripe} className=\"font-medium text-md rounded-md text-white bg-blue-500 p-2 px-5 text-center mt-12\">Renew Now</button>     \r\n                }\r\n\r\n                </form> : <button type=\"submit\" className=\"font-medium text-md rounded-md text-white bg-red-500 p-2 px-5 text-center mt-12\">Error</button>\r\n\r\n            }\r\n        </div>\r\n            \r\n    );\r\n};\r\n\r\n\r\nconst Checkout = () => (\r\n  <Elements stripe={loadStripe(process.env.REACT_APP_STRIPE_PUBLIC)}>\r\n    <CheckoutForm />\r\n  </Elements>\r\n);\r\n\r\nexport default Checkout",{"ruleId":"217","severity":1,"message":"218","line":2,"column":49,"nodeType":"219","messageId":"220","endLine":2,"endColumn":60},{"ruleId":"217","severity":1,"message":"221","line":2,"column":28,"nodeType":"219","messageId":"220","endLine":2,"endColumn":37},{"ruleId":"217","severity":1,"message":"222","line":21,"column":43,"nodeType":"219","messageId":"220","endLine":21,"endColumn":45},{"ruleId":"217","severity":1,"message":"223","line":19,"column":12,"nodeType":"219","messageId":"220","endLine":19,"endColumn":18},{"ruleId":"224","severity":1,"message":"225","line":47,"column":8,"nodeType":"226","endLine":47,"endColumn":10,"suggestions":"227"},{"ruleId":"217","severity":1,"message":"228","line":2,"column":19,"nodeType":"219","messageId":"220","endLine":2,"endColumn":23},{"ruleId":"224","severity":1,"message":"229","line":18,"column":5,"nodeType":"219","endLine":18,"endColumn":14,"suggestions":"230"},{"ruleId":"224","severity":1,"message":"231","line":18,"column":16,"nodeType":"232","endLine":28,"endColumn":6},{"ruleId":"233","severity":1,"message":"234","line":22,"column":35,"nodeType":"235","messageId":"236","endLine":22,"endColumn":37},{"ruleId":"233","severity":1,"message":"234","line":27,"column":28,"nodeType":"235","messageId":"236","endLine":27,"endColumn":30},{"ruleId":"233","severity":1,"message":"234","line":31,"column":14,"nodeType":"235","messageId":"236","endLine":31,"endColumn":16},{"ruleId":"237","severity":1,"message":"238","line":70,"column":108,"nodeType":"239","endLine":70,"endColumn":121},{"ruleId":"237","severity":1,"message":"238","line":142,"column":108,"nodeType":"239","endLine":142,"endColumn":121},{"ruleId":"240","replacedBy":"241"},{"ruleId":"242","replacedBy":"243"},{"ruleId":"233","severity":1,"message":"234","line":77,"column":56,"nodeType":"235","messageId":"236","endLine":77,"endColumn":58},{"ruleId":"244","severity":1,"message":"245","line":77,"column":238,"nodeType":"246","endLine":77,"endColumn":382},{"ruleId":"237","severity":1,"message":"238","line":229,"column":102,"nodeType":"239","endLine":229,"endColumn":191},{"ruleId":"233","severity":1,"message":"234","line":238,"column":55,"nodeType":"235","messageId":"236","endLine":238,"endColumn":57},{"ruleId":"233","severity":1,"message":"234","line":238,"column":82,"nodeType":"235","messageId":"236","endLine":238,"endColumn":84},{"ruleId":"237","severity":1,"message":"238","line":260,"column":106,"nodeType":"239","endLine":260,"endColumn":223},{"ruleId":"237","severity":1,"message":"238","line":283,"column":120,"nodeType":"239","endLine":283,"endColumn":226},{"ruleId":"233","severity":1,"message":"234","line":291,"column":55,"nodeType":"235","messageId":"236","endLine":291,"endColumn":57},{"ruleId":"233","severity":1,"message":"234","line":316,"column":55,"nodeType":"235","messageId":"236","endLine":316,"endColumn":57},{"ruleId":"224","severity":1,"message":"225","line":38,"column":8,"nodeType":"226","endLine":38,"endColumn":10,"suggestions":"247"},{"ruleId":"217","severity":1,"message":"221","line":2,"column":27,"nodeType":"219","messageId":"220","endLine":2,"endColumn":36},{"ruleId":"217","severity":1,"message":"248","line":13,"column":20,"nodeType":"219","messageId":"220","endLine":13,"endColumn":29},{"ruleId":"217","severity":1,"message":"222","line":18,"column":39,"nodeType":"219","messageId":"220","endLine":18,"endColumn":41},{"ruleId":"224","severity":1,"message":"249","line":40,"column":8,"nodeType":"226","endLine":40,"endColumn":10,"suggestions":"250"},{"ruleId":"251","severity":1,"message":"252","line":74,"column":17,"nodeType":"253","messageId":"254","endLine":74,"endColumn":19},{"ruleId":"233","severity":1,"message":"234","line":125,"column":118,"nodeType":"235","messageId":"236","endLine":125,"endColumn":120},{"ruleId":"233","severity":1,"message":"234","line":126,"column":114,"nodeType":"235","messageId":"236","endLine":126,"endColumn":116},{"ruleId":"237","severity":1,"message":"238","line":171,"column":62,"nodeType":"239","endLine":171,"endColumn":72},{"ruleId":"233","severity":1,"message":"234","line":53,"column":48,"nodeType":"235","messageId":"236","endLine":53,"endColumn":50},{"ruleId":"233","severity":1,"message":"234","line":59,"column":51,"nodeType":"235","messageId":"236","endLine":59,"endColumn":53},{"ruleId":"233","severity":1,"message":"234","line":63,"column":49,"nodeType":"235","messageId":"236","endLine":63,"endColumn":51},{"ruleId":"233","severity":1,"message":"234","line":82,"column":38,"nodeType":"235","messageId":"236","endLine":82,"endColumn":40},{"ruleId":"237","severity":1,"message":"238","line":101,"column":66,"nodeType":"239","endLine":101,"endColumn":76},{"ruleId":"217","severity":1,"message":"255","line":24,"column":11,"nodeType":"219","messageId":"220","endLine":24,"endColumn":25},{"ruleId":"217","severity":1,"message":"256","line":29,"column":13,"nodeType":"219","messageId":"220","endLine":29,"endColumn":21},{"ruleId":"217","severity":1,"message":"256","line":32,"column":13,"nodeType":"219","messageId":"220","endLine":32,"endColumn":21},{"ruleId":"217","severity":1,"message":"256","line":35,"column":13,"nodeType":"219","messageId":"220","endLine":35,"endColumn":21},{"ruleId":"217","severity":1,"message":"256","line":38,"column":13,"nodeType":"219","messageId":"220","endLine":38,"endColumn":21},{"ruleId":"233","severity":1,"message":"257","line":42,"column":18,"nodeType":"235","messageId":"236","endLine":42,"endColumn":20},{"ruleId":"217","severity":1,"message":"256","line":43,"column":13,"nodeType":"219","messageId":"220","endLine":43,"endColumn":21},{"ruleId":"237","severity":1,"message":"238","line":257,"column":88,"nodeType":"239","endLine":257,"endColumn":209},{"ruleId":"224","severity":1,"message":"225","line":43,"column":8,"nodeType":"226","endLine":43,"endColumn":10,"suggestions":"258"},{"ruleId":"224","severity":1,"message":"259","line":42,"column":8,"nodeType":"226","endLine":42,"endColumn":10,"suggestions":"260"},{"ruleId":"224","severity":1,"message":"261","line":35,"column":8,"nodeType":"226","endLine":35,"endColumn":10,"suggestions":"262"},{"ruleId":"263","severity":1,"message":"264","line":46,"column":21,"nodeType":"246","endLine":46,"endColumn":33},{"ruleId":"217","severity":1,"message":"265","line":24,"column":12,"nodeType":"219","messageId":"220","endLine":24,"endColumn":22},{"ruleId":"217","severity":1,"message":"266","line":24,"column":24,"nodeType":"219","messageId":"220","endLine":24,"endColumn":37},{"ruleId":"233","severity":1,"message":"234","line":30,"column":27,"nodeType":"235","messageId":"236","endLine":30,"endColumn":29},{"ruleId":"233","severity":1,"message":"234","line":30,"column":48,"nodeType":"235","messageId":"236","endLine":30,"endColumn":50},{"ruleId":"233","severity":1,"message":"234","line":32,"column":24,"nodeType":"235","messageId":"236","endLine":32,"endColumn":26},{"ruleId":"233","severity":1,"message":"234","line":47,"column":24,"nodeType":"235","messageId":"236","endLine":47,"endColumn":26},{"ruleId":"233","severity":1,"message":"234","line":47,"column":48,"nodeType":"235","messageId":"236","endLine":47,"endColumn":50},{"ruleId":"233","severity":1,"message":"234","line":60,"column":27,"nodeType":"235","messageId":"236","endLine":60,"endColumn":29},{"ruleId":"233","severity":1,"message":"234","line":60,"column":48,"nodeType":"235","messageId":"236","endLine":60,"endColumn":50},{"ruleId":"224","severity":1,"message":"261","line":76,"column":8,"nodeType":"226","endLine":76,"endColumn":10,"suggestions":"267"},{"ruleId":"237","severity":1,"message":"238","line":193,"column":199,"nodeType":"239","endLine":193,"endColumn":210},{"ruleId":"233","severity":1,"message":"234","line":222,"column":68,"nodeType":"235","messageId":"236","endLine":222,"endColumn":70},{"ruleId":"237","severity":1,"message":"238","line":298,"column":203,"nodeType":"239","endLine":298,"endColumn":214},{"ruleId":"233","severity":1,"message":"234","line":21,"column":27,"nodeType":"235","messageId":"236","endLine":21,"endColumn":29},{"ruleId":"233","severity":1,"message":"234","line":21,"column":48,"nodeType":"235","messageId":"236","endLine":21,"endColumn":50},{"ruleId":"233","severity":1,"message":"234","line":26,"column":24,"nodeType":"235","messageId":"236","endLine":26,"endColumn":26},{"ruleId":"233","severity":1,"message":"234","line":26,"column":48,"nodeType":"235","messageId":"236","endLine":26,"endColumn":50},{"ruleId":"233","severity":1,"message":"234","line":36,"column":27,"nodeType":"235","messageId":"236","endLine":36,"endColumn":29},{"ruleId":"233","severity":1,"message":"234","line":36,"column":48,"nodeType":"235","messageId":"236","endLine":36,"endColumn":50},{"ruleId":"224","severity":1,"message":"261","line":36,"column":8,"nodeType":"226","endLine":36,"endColumn":10,"suggestions":"268"},{"ruleId":"244","severity":1,"message":"245","line":48,"column":39,"nodeType":"246","endLine":48,"endColumn":102},{"ruleId":"217","severity":1,"message":"269","line":4,"column":8,"nodeType":"219","messageId":"220","endLine":4,"endColumn":20},{"ruleId":"224","severity":1,"message":"270","line":48,"column":8,"nodeType":"226","endLine":48,"endColumn":10,"suggestions":"271"},{"ruleId":"233","severity":1,"message":"234","line":197,"column":59,"nodeType":"235","messageId":"236","endLine":197,"endColumn":61},{"ruleId":"233","severity":1,"message":"234","line":197,"column":98,"nodeType":"235","messageId":"236","endLine":197,"endColumn":100},{"ruleId":"233","severity":1,"message":"234","line":248,"column":59,"nodeType":"235","messageId":"236","endLine":248,"endColumn":61},{"ruleId":"233","severity":1,"message":"234","line":272,"column":59,"nodeType":"235","messageId":"236","endLine":272,"endColumn":61},{"ruleId":"237","severity":1,"message":"238","line":296,"column":182,"nodeType":"239","endLine":296,"endColumn":197},{"ruleId":"233","severity":1,"message":"234","line":24,"column":24,"nodeType":"235","messageId":"236","endLine":24,"endColumn":26},{"ruleId":"233","severity":1,"message":"234","line":24,"column":48,"nodeType":"235","messageId":"236","endLine":24,"endColumn":50},{"ruleId":"233","severity":1,"message":"234","line":37,"column":27,"nodeType":"235","messageId":"236","endLine":37,"endColumn":29},{"ruleId":"233","severity":1,"message":"234","line":42,"column":27,"nodeType":"235","messageId":"236","endLine":42,"endColumn":29},{"ruleId":"224","severity":1,"message":"261","line":65,"column":8,"nodeType":"226","endLine":65,"endColumn":10,"suggestions":"272"},{"ruleId":"217","severity":1,"message":"273","line":24,"column":12,"nodeType":"219","messageId":"220","endLine":24,"endColumn":15},{"ruleId":"217","severity":1,"message":"274","line":24,"column":17,"nodeType":"219","messageId":"220","endLine":24,"endColumn":23},{"ruleId":"233","severity":1,"message":"234","line":78,"column":62,"nodeType":"235","messageId":"236","endLine":78,"endColumn":64},{"ruleId":"233","severity":1,"message":"234","line":78,"column":135,"nodeType":"235","messageId":"236","endLine":78,"endColumn":137},{"ruleId":"233","severity":1,"message":"234","line":82,"column":116,"nodeType":"235","messageId":"236","endLine":82,"endColumn":118},{"ruleId":"233","severity":1,"message":"234","line":97,"column":40,"nodeType":"235","messageId":"236","endLine":97,"endColumn":42},{"ruleId":"233","severity":1,"message":"234","line":171,"column":40,"nodeType":"235","messageId":"236","endLine":171,"endColumn":42},{"ruleId":"233","severity":1,"message":"234","line":172,"column":40,"nodeType":"235","messageId":"236","endLine":172,"endColumn":42},{"ruleId":"233","severity":1,"message":"234","line":173,"column":40,"nodeType":"235","messageId":"236","endLine":173,"endColumn":42},{"ruleId":"233","severity":1,"message":"234","line":174,"column":40,"nodeType":"235","messageId":"236","endLine":174,"endColumn":42},{"ruleId":"217","severity":1,"message":"221","line":2,"column":17,"nodeType":"219","messageId":"220","endLine":2,"endColumn":26},{"ruleId":"217","severity":1,"message":"275","line":2,"column":28,"nodeType":"219","messageId":"220","endLine":2,"endColumn":36},{"ruleId":"217","severity":1,"message":"273","line":16,"column":12,"nodeType":"219","messageId":"220","endLine":16,"endColumn":15},{"ruleId":"217","severity":1,"message":"274","line":16,"column":17,"nodeType":"219","messageId":"220","endLine":16,"endColumn":23},{"ruleId":"233","severity":1,"message":"234","line":66,"column":36,"nodeType":"235","messageId":"236","endLine":66,"endColumn":38},{"ruleId":"233","severity":1,"message":"234","line":104,"column":36,"nodeType":"235","messageId":"236","endLine":104,"endColumn":38},{"ruleId":"233","severity":1,"message":"234","line":105,"column":36,"nodeType":"235","messageId":"236","endLine":105,"endColumn":38},{"ruleId":"233","severity":1,"message":"234","line":106,"column":36,"nodeType":"235","messageId":"236","endLine":106,"endColumn":38},{"ruleId":"233","severity":1,"message":"234","line":107,"column":36,"nodeType":"235","messageId":"236","endLine":107,"endColumn":38},"no-unused-vars","'useLocation' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'td' is defined but never used.","'loaded' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchPlans'. Either include it or remove the dependency array.","ArrayExpression",["276"],"'Link' is defined but never used.","React Hook useEffect contains a call to 'setAppName'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [history] as a second argument to the useEffect Hook.",["277"],"Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-native-reassign",["278"],"no-negated-in-lhs",["279"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["280"],"'setLoaded' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchUsers'. Either include it or remove the dependency array.",["281"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'openIntergrate' is assigned a value but never used.","'response' is assigned a value but never used.","Expected '!==' and instead saw '!='.",["282"],"React Hook useEffect has a missing dependency: 'fetchRestocks'. Either include it or remove the dependency array.",["283"],"React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.",["284"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'background' is assigned a value but never used.","'setBackground' is assigned a value but never used.",["285"],["286"],"'makeAnimated' is defined but never used.","React Hook useEffect has missing dependencies: 'currentPlanData.planName', 'currentPlanData.role', and 'currentPlanData.unbindable'. Either include them or remove the dependency array. If 'setunbinding' needs the current value of 'currentPlanData.unbindable', you can also switch to useReducer instead of useState and read 'currentPlanData.unbindable' in the reducer.",["287"],["288"],"'key' is assigned a value but never used.","'setKey' is assigned a value but never used.","'useState' is defined but never used.",{"desc":"289","fix":"290"},{"desc":"291","fix":"292"},"no-global-assign","no-unsafe-negation",{"desc":"289","fix":"293"},{"desc":"294","fix":"295"},{"desc":"289","fix":"296"},{"desc":"297","fix":"298"},{"desc":"299","fix":"300"},{"desc":"299","fix":"301"},{"desc":"299","fix":"302"},{"desc":"303","fix":"304"},{"desc":"299","fix":"305"},"Update the dependencies array to be: [fetchPlans]",{"range":"306","text":"307"},"Add dependencies array: [history]",{"range":"308","text":"309"},{"range":"310","text":"307"},"Update the dependencies array to be: [fetchUsers]",{"range":"311","text":"312"},{"range":"313","text":"307"},"Update the dependencies array to be: [fetchRestocks]",{"range":"314","text":"315"},"Update the dependencies array to be: [fetchData]",{"range":"316","text":"317"},{"range":"318","text":"317"},{"range":"319","text":"317"},"Update the dependencies array to be: [currentPlanData.planName, currentPlanData.role, currentPlanData.unbindable]",{"range":"320","text":"321"},{"range":"322","text":"317"},[1240,1242],"[fetchPlans]",[1168,1168],", [history]",[1038,1040],[904,906],"[fetchUsers]",[1065,1067],[1108,1110],"[fetchRestocks]",[973,975],"[fetchData]",[3385,3387],[754,756],[1474,1476],"[currentPlanData.planName, currentPlanData.role, currentPlanData.unbindable]",[2753,2755]]