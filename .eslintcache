[{"E:\\dashboard-react\\src\\index.js":"1","E:\\dashboard-react\\src\\reportWebVitals.js":"2","E:\\dashboard-react\\src\\App.js":"3","E:\\dashboard-react\\src\\components\\users\\users.js":"4","E:\\dashboard-react\\src\\components\\home\\home.js":"5","E:\\dashboard-react\\src\\components\\adminNav.js":"6","E:\\dashboard-react\\src\\components\\adminSearch.js":"7","E:\\dashboard-react\\src\\components\\home\\planModal.js":"8","E:\\dashboard-react\\src\\components\\home\\restockModal.js":"9","E:\\dashboard-react\\src\\components\\licenses\\licenses.js":"10","E:\\dashboard-react\\src\\components\\licenses\\licenseModal.js":"11","E:\\dashboard-react\\src\\components\\licenses\\table.js":"12","E:\\dashboard-react\\src\\components\\users\\table.js":"13","E:\\dashboard-react\\src\\components\\settings\\settings.js":"14","E:\\dashboard-react\\src\\components\\home\\planTable.js":"15","E:\\dashboard-react\\src\\components\\home\\restockTable.js":"16","E:\\dashboard-react\\src\\components\\siteHomePage\\home.js":"17","E:\\dashboard-react\\src\\components\\userDashboard\\dashboard.js":"18","E:\\dashboard-react\\src\\components\\bindPage\\bindPage.js":"19","E:\\dashboard-react\\src\\components\\userNav.js":"20","E:\\dashboard-react\\src\\components\\home\\planEditModal.js":"21","E:\\dashboard-react\\src\\components\\purchasePage\\purchase.js":"22","E:\\dashboard-react\\src\\components\\purchasePage\\checkout.js":"23"},{"size":265,"mtime":1611228962182,"results":"24","hashOfConfig":"25"},{"size":362,"mtime":1611220658625,"results":"26","hashOfConfig":"25"},{"size":1447,"mtime":1612543842334,"results":"27","hashOfConfig":"25"},{"size":4506,"mtime":1612137887206,"results":"28","hashOfConfig":"25"},{"size":9027,"mtime":1612547346806,"results":"29","hashOfConfig":"25"},{"size":13346,"mtime":1612518430519,"results":"30","hashOfConfig":"25"},{"size":6163,"mtime":1611964426451,"results":"31","hashOfConfig":"25"},{"size":23748,"mtime":1612472043608,"results":"32","hashOfConfig":"25"},{"size":9553,"mtime":1612179175798,"results":"33","hashOfConfig":"25"},{"size":5793,"mtime":1612547354388,"results":"34","hashOfConfig":"25"},{"size":8996,"mtime":1612178535536,"results":"35","hashOfConfig":"25"},{"size":10369,"mtime":1612547357487,"results":"36","hashOfConfig":"25"},{"size":7469,"mtime":1612547748383,"results":"37","hashOfConfig":"25"},{"size":19003,"mtime":1612547365302,"results":"38","hashOfConfig":"25"},{"size":7626,"mtime":1612547309569,"results":"39","hashOfConfig":"25"},{"size":8151,"mtime":1612547329801,"results":"40","hashOfConfig":"25"},{"size":4725,"mtime":1612546025015,"results":"41","hashOfConfig":"25"},{"size":12276,"mtime":1612553072125,"results":"42","hashOfConfig":"25"},{"size":5514,"mtime":1612459486832,"results":"43","hashOfConfig":"25"},{"size":1315,"mtime":1612547820414,"results":"44","hashOfConfig":"25"},{"size":19386,"mtime":1612472173682,"results":"45","hashOfConfig":"25"},{"size":3523,"mtime":1612547362004,"results":"46","hashOfConfig":"25"},{"size":5540,"mtime":1612526629491,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"bywc2m",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"50"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"50"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"50"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"50"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"50"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"50"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"50"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"90","messages":"91","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"50"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"97","messages":"98","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"50"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"102","messages":"103","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"50"},"E:\\dashboard-react\\src\\index.js",[],["105","106"],"E:\\dashboard-react\\src\\reportWebVitals.js",[],"E:\\dashboard-react\\src\\App.js",["107"],"E:\\dashboard-react\\src\\components\\users\\users.js",["108","109"],"import '../../static/styles/main.css'; \r\nimport React, { Component, useEffect } from 'react';\r\nimport UserTable from './table';\r\nimport AdminNavigation from '../adminNav';\r\nimport AdminSearchbar from '../adminSearch';\r\n\r\nimport { AiOutlineSearch } from 'react-icons/ai';\r\n\r\n\r\nclass Users extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {}\r\n\r\n    }\r\n\r\n    \r\n\r\n    render() {\r\n        function filter() {\r\n            var input, filter, table, tr, td, i, txtValue;\r\n            input = document.getElementById(\"searchInput\");\r\n            filter = input.value.toUpperCase();\r\n            table = document.getElementById(\"table\");\r\n            tr = table.getElementsByTagName(\"tr\");\r\n            \r\n            // Loop through all table rows, and hide those who don't match the search query\r\n            for (i = 0; i < tr.length; i++) {\r\n                try{\r\n                    var td1 = tr[i].getElementsByTagName(\"td\")[2];\r\n\r\n                    txtValue = td1.textContent || td1.innerText;\r\n                    if (txtValue.toUpperCase().indexOf(filter) > -1) {\r\n                        tr[i].style.display = \"\";\r\n                    } else {\r\n                        tr[i].style.display = \"none\";\r\n                    }\r\n\r\n                }catch(e){\r\n                    console.log(e)\r\n                }\r\n            }\r\n        }\r\n        return (\r\n            <>\r\n                <AdminNavigation />\r\n                <div className=\"flex flex-col w-0 flex-1 overflow-hidden\">\r\n                <AdminSearchbar />\r\n                <main className=\"flex-1 relative overflow-y-auto focus:outline-none\" id=\"main\" tabIndex='0'>\r\n\r\n                    {/* style=\"min-height: 650px;max-height: 650px;\" */}\r\n                    <div className=\"bg-white overflow-hidden shadow rounded-lg divide-y mr-12 mt-5 dark:bg-darkOther-200\">\r\n\r\n                        <div className=\"px-4 py-5 sm:px-6\">\r\n\r\n                            <dl className=\"sm:grid sm:grid-cols-2\">\r\n\r\n                                <div className=\"flex flex-col p-2  bg-white mr-5 dark:bg-darkOther-200\">\r\n\r\n                                    <h1  className=\"dark:text-white\">Users</h1>\r\n\r\n                                    <div className=\"relative w-full text-gray-400 focus-within:text-gray-600\">\r\n\r\n                                        <div className=\"absolute inset-y-0 left-0 flex items-center pointer-events-none\">\r\n                                            <AiOutlineSearch className=\"h-5 w-5 text-gray-900 dark:text-other-100\"/>\r\n                                        </div>   \r\n                                                                               \r\n                                        <input id=\"searchInput\" onKeyUp={filter} autoComplete=\"off\" className=\"dark:text-white dark:bg-darkOther-200 bg-white block w-full h-full pl-8 pr-3 py-2 text-gray-900 placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-0 focus:border-transparent sm:text-sm\" placeholder=\"Search by Key\" type=\"search\" name=\"search\" />\r\n                                    \r\n                                    </div>\r\n        \r\n                                </div>\r\n\r\n\r\n                            </dl>\r\n\r\n                        </div>\r\n\r\n                        <div className=\"px-4 py-5 sm:p-6\">\r\n    \r\n\r\n                            <div className=\"flex flex-col \">\r\n\r\n                                <div className=\"-my-2 overflow-y-auto sm:-mx-6 lg: mr-12 dark:bg-darkOther-200\" style={{'min-height': '400px', 'max-height': '800px'}}>\r\n                                    <div className=\"py-2 align-middle inline-block min-w-full sm:px-6 lg:px-8\" >\r\n                                        \r\n                                        <div className=\"shadow overflow-hidden border-gray-200\">\r\n\r\n                                            {/* Table */}\r\n                                            <UserTable />\r\n\r\n                                        </div>\r\n\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                        </div>\r\n                    </div>\r\n\r\n                    <footer>\r\n                        <p className=\"text-sm font-small text-gray-600\">Invincible Services | 2021 | Thank you for using our services</p>\r\n                    </footer>\r\n   \r\n                </main>\r\n                </div>\r\n            \r\n            </>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Users","E:\\dashboard-react\\src\\components\\home\\home.js",["110"],"import '../../static/styles/main.css'; \r\nimport React, { useState, useEffect } from 'react';\r\nimport PlanModal from './planModal';\r\nimport RestockModal from './restockModal';\r\nimport PlanTable from './planTable';\r\nimport RestockTable from './restockTable';\r\n\r\nimport AdminNavigation from '../adminNav';\r\nimport AdminSearchbar from '../adminSearch';\r\n\r\nimport { FaPlus } from 'react-icons/fa';\r\nimport BounceLoader from \"react-spinners/BounceLoader\";\r\n\r\nconst Home = () => {\r\n    const [totalLicense, setTotalLicense] = useState(0)\r\n    const [monthlyRev, setMonthlyRev] = useState(\"$0\")\r\n    const [newCustomers, setNewCustomers] = useState(0)\r\n    const [loaded, setLoaded] = useState(false)\r\n\r\n    async function fetchPlans(){\r\n        const res = await fetch('/accounts/stats');\r\n        res.json()\r\n        .then(res => {\r\n            setTotalLicense(res.totalCustomers)\r\n            setMonthlyRev(res.revenue)\r\n            setNewCustomers(res.customersMonth)\r\n            setLoaded(true)\r\n            \r\n        })\r\n        .catch(err =>  {\r\n            fetchPlans()\r\n        });\r\n        \r\n    }\r\n\r\n    useEffect(() =>{\r\n        const abortController = new AbortController();\r\n        fetchPlans()\r\n\r\n\r\n\r\n        return () => {\r\n            abortController.abort();\r\n        };\r\n\r\n    }, [])\r\n\r\n        return (\r\n            <>\r\n                <AdminNavigation />\r\n                <div className=\"flex flex-col w-0 flex-1 overflow-hidden\">\r\n                    <AdminSearchbar />\r\n                {\r\n                    loaded ?\r\n                    <main className=\"flex-1 relative overflow-y-auto focus:outline-none\">\r\n                    <div className=\"py-6\">\r\n                        \r\n\r\n\r\n                        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 md:px-8\"></div>\r\n                                    \r\n\r\n                        <div className=\"mx-auto px-4 sm:px-6 md:px-8 w-full \">\r\n                            <div className=\"relative w-full\">\r\n                                <div className=\"overflow-hidden shadow divide-y mb-5 rounded-lg\">\r\n                                    <dl className=\"shadow-lg md:grid md:grid-cols-3\">\r\n                                        <div className=\"flex flex-col border-b border-gray-200 p-6 text-center sm:border-0 dark:bg-darkOther-200 bg-white\">\r\n                                          <dt className=\"order-2 mt-2 text-lg leading-6 font-medium text-gray-900 dark:text-white select-none\">\r\n                                            Total Licenses\r\n                                          </dt>\r\n                                          <dd className=\"order-1 text-5xl font-extrabold text-yellow-500 select-none\">\r\n                                            {totalLicense}\r\n                                          </dd>\r\n                                        </div>\r\n                                        <div className=\"flex flex-col border-t border-b border-gray-100 p-6 text-center sm:border-0 dark:bg-darkOther-200 bg-white\">\r\n                                          <dt className=\"order-2 mt-2 text-lg leading-6 font-medium text-gray-900 dark:text-white select-none\">\r\n                                            Monthly Revenue\r\n                                          </dt>\r\n                                          <dd className=\"order-1 text-5xl font-extrabold text-green-500 select-none\">\r\n                                            {monthlyRev}\r\n                                          </dd>\r\n                                        </div>\r\n                                        <div className=\"flex flex-col border-t border-gray-100 p-6 text-center sm:border-0 white dark:bg-darkOther-200 bg-white\">\r\n                                          <dt className=\"order-2 mt-2 text-lg leading-6 font-medium text-gray-900 dark:text-white select-none\">\r\n                                            New Customers \r\n                                          </dt>\r\n                                          <dd className=\"order-1 text-5xl font-extrabold text-blue-500 select-none\">\r\n                                            {newCustomers}\r\n                                          </dd>\r\n                                        </div>\r\n                                    </dl>\r\n                                </div>\r\n                            </div>\r\n                        \r\n\r\n                            <dl className=\"lg:grid md:grid-cols-2 sm:grid-cols-1 gap-4 sm:rounded-lg\">\r\n    \r\n                                <div className=\"flex flex-col p-6 text-center bg-white mt-5 dark:bg-darkOther-200 rounded-lg\" style={{'min-height': '400px', 'max-height': '800px'}}>\r\n                                    <div className=\"sm:grid sm:grid-cols-2\">\r\n                                        <div className=\"text-left\">\r\n                                        <h1 className=\"text-md font-medium text-other-200 dark:text-white select-none\">Plans</h1>\r\n                                        </div>\r\n                                        <div className=\"text-right\">\r\n                                            <button name=\"plan-modal\" id=\"plan-button-hide\" type=\"button\" className=\"inline-flex items-center px-3 py-2 border border-transparent shadow-sm text-sm leading-4 font-medium rounded-md dark:text-white bg-other-100 dark:bg-other-200 text-other-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-other-200 dark:focus:ring-darkOther-200\" onClick={() => {\r\n                                                document.querySelector('#plan-modal').classList.contains('hidden') ? document.querySelector('#plan-modal').classList.remove('hidden') : document.querySelector('#plan-modal').classList.add('hidden')\r\n                                            }}>\r\n                                                <FaPlus className=\"-ml-0.5 mr-2 h-4 w-4 dark:text-white text-other-500\" id='hide' />\r\n                                                New Plan\r\n                                            </button>\r\n                                        </div>\r\n                                    </div>\r\n                                \r\n    \r\n                                    <PlanTable />\r\n                                    \r\n                                </div>\r\n\r\n                                {/* PLAN CREATE MODAL */}\r\n                                <PlanModal />\r\n\r\n    \r\n\r\n\r\n                                <div className=\"flex flex-col p-6 text-center bg-white mt-5 dark:bg-darkOther-200 rounded-lg\" style={{'min-height': '400px', 'max-height': '800px'}}>\r\n                                    <div className=\"grid-cols-2 sm:grid sm:grid-cols-2\">\r\n                                        <div className=\"text-left\">\r\n                                            <h1 className=\"text-md font-medium text-other-200 dark:text-white select-none\">Restocks</h1>\r\n                                        </div>\r\n                                        <div className=\"text-right\">\r\n                                            <button name=\"restock-modal\" id=\"restock-button-hide\" type=\"button\" className=\"inline-flex items-center px-3 py-2 border border-transparent shadow-sm text-sm leading-4 font-medium rounded-md dark:text-white bg-other-100 dark:bg-other-200 text-other-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-other-200 dark:focus:ring-darkOther-200\" onClick={() => {\r\n                                                document.querySelector('#restock-modal').classList.contains('hidden') ? document.querySelector('#restock-modal').classList.remove('hidden') : document.querySelector('#restock-modal').classList.add('hidden')\r\n                                            }}>\r\n                                            <FaPlus className=\"-ml-0.5 mr-2 h-4 w-4 dark:text-white text-other-500\" id='hide' />\r\n                                            New Restock\r\n                                            </button>\r\n                                        </div>\r\n                                    </div>\r\n\r\n\r\n                                    <RestockTable />\r\n\r\n                                </div>\r\n\r\n                                {/* Create Restock Modal */}\r\n                                <RestockModal />\r\n\r\n                                \r\n\r\n      \r\n    \r\n                            </dl>\r\n                    </div>\r\n    \r\n\r\n                    </div>\r\n\r\n                    \r\n\r\n                    <footer>\r\n                        <p className=\"text-sm font-small text-gray-600\">Invincible Services | 2021 | Thank you for using our services</p>\r\n                    </footer>\r\n\r\n                </main>\r\n                :\r\n\r\n                <div className=\"m-auto\">\r\n                        \r\n                    <BounceLoader color={'#302f2f'} loading={true} size={25} />\r\n                        \r\n                </div>\r\n\r\n                }\r\n\r\n                </div>\r\n\r\n                \r\n\r\n            </>\r\n        );\r\n\r\n}\r\n\r\nexport default Home;\r\n","E:\\dashboard-react\\src\\components\\adminNav.js",["111","112","113","114","115","116","117"],"import '../static/styles/main.css'; \r\nimport { NavLink, Link } from 'react-router-dom'\r\nimport { React, useEffect, useState } from 'react';\r\nimport { Switch } from '@headlessui/react'\r\nimport { AiOutlineHome, AiOutlineCloseCircle } from 'react-icons/ai';\r\nimport { BiExport, BiSun, BiMoon } from 'react-icons/bi';\r\nimport { FiUsers, FiSettings } from 'react-icons/fi';\r\nimport { IoKeyOutline } from 'react-icons/io5';\r\nimport  { useHistory  } from 'react-router-dom'\r\n\r\nconst AdminNavigation = () =>  {\r\n    let history = useHistory()\r\n    const [appName, setAppName] = useState(\"\")\r\n    const [appImage, setAppImage] = useState(\"\")\r\n    const [darkMode, setDarkMode] = useState(false)\r\n    const [loaded, setLoaded] = useState(false)\r\n\r\n    useEffect( async () => {\r\n        var response = await fetch('/accounts/user/data')\r\n        if(response.ok) {\r\n            var responseBody = await response.json()\r\n            setAppName(responseBody.name)\r\n            setAppImage(responseBody.serverImage)\r\n            setLoaded(true)\r\n        }\r\n        if(response.status == 403) history.push('/')\r\n    })\r\n\r\n    const changeDarkMode = (e) => {\r\n        if(e == true) {\r\n            // dark mode on\r\n            console.log(document.documentElement)\r\n            document.documentElement.classList.add('dark');\r\n            localStorage.setItem(\"mode\",\"#0e1c2f\")\r\n        }else{\r\n            // dark mode off\r\n            document.documentElement.classList.remove('dark');\r\n            localStorage.setItem(\"mode\",\"white\")\r\n        }\r\n    }\r\n\r\n\r\n    // render() {\r\n        return (\r\n            \r\n            <div className=\"h-screen flex\">\r\n                \r\n\r\n                <div className=\"md:hidden\">\r\n                    \r\n                    <div className=\"fixed inset-0 flex z-40\" id=\"mob-screen\">\r\n    \r\n                    <div className=\"fixed inset-0\" aria-hidden=\"true\">\r\n                        <div className=\"absolute inset-0 bg-gray-600 opacity-75\"></div>\r\n                    </div>\r\n    \r\n                    <div className=\"relative flex-1 flex flex-col max-w-xs w-full pt-5 pb-4 bg-other-100 dark:bg-darkOther-100 transition-transform ease-in-out duration-200\" id=\"mob-nav\">\r\n                        <div className=\"absolute top-0 right-0 -mr-12 pt-2\">\r\n                        <button className=\"ml-1 flex items-center justify-center h-10 w-10 rounded-full focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white\" onClick={() => {\r\n                            document.querySelector('#mob-nav').classList.contains('hidden') ? document.querySelector('#mob-nav').classList.remove('hidden') : document.querySelector('#mob-nav').classList.add('hidden')\r\n                            document.querySelector('#mob-screen').classList.contains('hidden') ? document.querySelector('#mob-screen').classList.remove('hidden') : document.querySelector('#mob-screen').classList.add('hidden')\r\n                        }}>\r\n                            <span className=\"sr-only\">Close sidebar</span>\r\n                            <AiOutlineCloseCircle className=\"h-6 w-6 text-white\" id='hide'/>\r\n                        </button>\r\n                        </div>\r\n                        \r\n                        <div className=\"flex-shrink-0 flex items-center px-4\">\r\n                        <img alt={appName} className=\"h-16 w-auto rounded-full select-none\" src={appImage} alt={appName} /> <span className=\"text-2xl font-medium text-other-200 ml-2 text-20 dark:text-other-100 select-none\">{appName}</span>\r\n                        </div>\r\n    \r\n                        <div className=\"mt-5 flex-1 h-0 overflow-y-auto \" >\r\n                        <nav className=\"px-2 space-y-1 \">\r\n                            <NavLink to='/home' activeClassName=\"text-green-500 dark:text-green-500\" className=\"dark:text-white\">\r\n                                <span className=\"hover:text-green-400 dark:hover:text-green-400 group flex items-center px-2 py-2 text-sm font-medium rounded-md\">\r\n                                <AiOutlineHome className=\"hover:text-green-400 dark:hover:text-green-400 mr-3 h-6 w-6\" id='hide'/>\r\n                                Home\r\n                                </span>\r\n                            </NavLink>\r\n                \r\n                            <NavLink to='/licenses' activeClassName=\"dark:text-yellow-500 text-yellow-500\" className=\"dark:text-white\">\r\n                                <span className=\"hover:text-yellow-400 dark:hover:text-yellow-400 group flex items-center px-2 py-2 text-sm font-medium rounded-md\">\r\n                                <IoKeyOutline className=\"hover:text-yellow-400 dark:hover:text-yellow-400 mr-3 h-6 w-6\"/>\r\n                                Licenses\r\n                                </span>\r\n                            </NavLink>\r\n                \r\n                            <NavLink to='/users' activeClassName=\"dark:text-blue-500 text-blue-500\" className=\"dark:text-white\">\r\n                                <span className=\"hover:text-blue-400 dark:hover:text-blue-400 group flex items-center px-2 py-2 text-sm font-medium rounded-md\">\r\n                                <FiUsers className=\"hover:text-blue-400 dark:hover:text-blue-400 mr-3 h-6 w-6\" />\r\n                                Users\r\n                                </span>\r\n                            </NavLink>\r\n                \r\n                            <NavLink to='/settings' activeClassName=\"dark:text-purple-500 text-purple-500\" className=\"dark:text-white\">\r\n                                <span className=\"hover:text-purple-400 dark:hover:text-purple-400 group flex items-center px-2 py-2 text-sm font-medium rounded-md\">\r\n                                <FiSettings className=\"hover:text-purple-400 dark:hover:text-purple-400 mr-3 h-6 w-6\" />\r\n                                Settings\r\n                                </span>\r\n                            </NavLink>\r\n                \r\n                            <span className=\"text-orange-500 dark:text-white hover:text-orange-400 dark:hover:text-orange-400 group flex items-center px-2 py-2 text-sm font-medium rounded-md\">\r\n                            <BiExport className=\"hover:text-orange-500 dark:hover:text-orange-400 mr-3 h-6 w-6\" />\r\n                            Export\r\n                            </span>\r\n\r\n                            <div className=\"grid border-t w-1/2\">\r\n                                <div className=\"\">\r\n                                    <Switch \r\n                                    checked={darkMode}\r\n                                    onChange={e => {\r\n                                        setDarkMode(e)\r\n                                        changeDarkMode(e)\r\n                                    }}\r\n                                    as=\"button\" \r\n                                    className={`${darkMode ? \"bg-darkOther-100\" : \"bg-other-100\"} shadow-md border-gray-300 border-1 mt-2 inline-flex flex-shrink-0 h-5 w-10 border-2 border-transparent rounded-full cursor-pointer transition-colors ease-in-out duration-200 focus:outline-none`}>\r\n\r\n                                        {darkMode ?\r\n                                         \r\n                                        <BiMoon aria-hidden=\"true\" className=\"pointer-events-none translate-x-0 inline-block h-4 w-auto rounded-full text-other-100 shadow transform ring-0 transition ease-in-out duration-200 \" />: \r\n                                        <BiSun aria-hidden=\"true\" className=\"pointer-events-none translate-x-5 inline-block h-4 w-auto rounded-full text-yellow-500 shadow transform ring-0 transition ease-in-out duration-200\" />\r\n                                        }\r\n\r\n                                    </Switch>\r\n                                </div>\r\n                    \r\n                          \r\n                            </div>\r\n                        </nav>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"flex-shrink-0 w-14\" aria-hidden=\"true\">\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n    \r\n                <div className=\"hidden md:flex md:flex-shrink-0\">\r\n                <div className=\"flex flex-col w-64\">\r\n                <div className=\"flex flex-col flex-grow pt-5 pb-4 bg-other-100 dark:bg-darkOther-100 overflow-y-auto\">\r\n                    {loaded ? <div className=\"flex items-center flex-shrink-0 px-4\">\r\n                        <img alt={appName} className=\"h-16 w-auto rounded-full select-none\" src={appImage} alt={appName} /> <span className=\"text-2xl font-medium text-other-200 ml-2 text-20 dark:text-other-100 select-none\">{appName}</span>\r\n                    </div> : <div></div>}\r\n                    <div className=\"mt-5 flex-grow flex flex-col\">\r\n                    <nav className=\"flex-1 px-2 bg-other-100 dark:bg-darkOther-100 space-y-1\">\r\n                        \r\n                            <NavLink to='/home' activeClassName=\"text-green-500 dark:text-green-500\" className=\"dark:text-white\">\r\n                                <span className=\"hover:text-green-400 dark:hover:text-green-400 group flex items-center px-2 py-2 text-sm font-medium rounded-md\">\r\n                                <AiOutlineHome className=\"hover:text-green-400 dark:hover:text-green-400 mr-3 h-6 w-6\" id='hide'/>\r\n                                Home\r\n                                </span>\r\n                            </NavLink>\r\n                \r\n                            <NavLink to='/licenses' activeClassName=\"dark:text-yellow-500 text-yellow-500\" className=\"dark:text-white\">\r\n                                <span className=\"hover:text-yellow-400 dark:hover:text-yellow-400 group flex items-center px-2 py-2 text-sm font-medium rounded-md\">\r\n                                <IoKeyOutline className=\"hover:text-yellow-400 dark:hover:text-yellow-400 mr-3 h-6 w-6\"/>\r\n                                Licenses\r\n                                </span>\r\n                            </NavLink>\r\n                \r\n                            <NavLink to='/users' activeClassName=\"dark:text-blue-500 text-blue-500\" className=\"dark:text-white\">\r\n                                <span className=\"hover:text-blue-400 dark:hover:text-blue-400 group flex items-center px-2 py-2 text-sm font-medium rounded-md\">\r\n                                <FiUsers className=\"hover:text-blue-400 dark:hover:text-blue-400 mr-3 h-6 w-6\" />\r\n                                Users\r\n                                </span>\r\n                            </NavLink>\r\n                \r\n                            <NavLink to='/settings' activeClassName=\"dark:text-purple-500 text-purple-500\" className=\"dark:text-white\">\r\n                                <span className=\"hover:text-purple-400 dark:hover:text-purple-400 group flex items-center px-2 py-2 text-sm font-medium rounded-md\">\r\n                                <FiSettings className=\"hover:text-purple-400 dark:hover:text-purple-400 mr-3 h-6 w-6\" />\r\n                                Settings\r\n                                </span>\r\n                            </NavLink>\r\n                \r\n                            <span className=\"text-orange-500 dark:text-white hover:text-orange-400 dark:hover:text-orange-400 group flex items-center px-2 py-2 text-sm font-medium rounded-md\">\r\n                            <BiExport className=\"hover:text-orange-500 dark:hover:text-orange-400 mr-3 h-6 w-6\" />\r\n                            Export\r\n                            </span>\r\n\r\n                            <div className=\"grid border-t w-1/2\">\r\n                                <div className=\"\">\r\n                                    <Switch \r\n                                    checked={darkMode}\r\n                                    onChange={e => {\r\n                                        setDarkMode(e)\r\n                                        changeDarkMode(e)\r\n                                    }}\r\n                                    as=\"button\" \r\n                                    className={`${darkMode ? \"bg-darkOther-100\" : \"bg-other-100\"} shadow-md border-gray-300 border-1 mt-2 inline-flex flex-shrink-0 h-5 w-10 border-2 border-transparent rounded-full cursor-pointer transition-colors ease-in-out duration-200 focus:outline-none`}>\r\n\r\n                                        {darkMode ?\r\n                                         \r\n                                        <BiMoon aria-hidden=\"true\" className=\"pointer-events-none translate-x-0 inline-block h-4 w-auto rounded-full text-other-100 shadow transform ring-0 transition ease-in-out duration-200 \" />: \r\n                                        <BiSun aria-hidden=\"true\" className=\"pointer-events-none translate-x-5 inline-block h-4 w-auto rounded-full text-yellow-500 shadow transform ring-0 transition ease-in-out duration-200\" />\r\n                                        }\r\n\r\n                                    </Switch>\r\n                                </div>\r\n                    \r\n                          \r\n                            </div>\r\n\r\n                    \r\n                    </nav>\r\n                    </div>\r\n                </div>\r\n                </div>\r\n                </div>\r\n\r\n\r\n\r\n            </div>\r\n        );\r\n    // }\r\n}\r\n\r\nexport default AdminNavigation;\r\n","E:\\dashboard-react\\src\\components\\adminSearch.js",["118","119"],"import '../static/styles/main.css'; \r\nimport React, {useState, useEffect} from 'react';\r\n\r\n\r\nimport { AiOutlineSearch, AiOutlineMenu } from 'react-icons/ai';\r\nimport { IoNotificationsOutline } from 'react-icons/io5';\r\nimport {FaUserCircle} from 'react-icons/fa'\r\n\r\n\r\nconst AdminSearch = () =>  {\r\n\r\n    const [userImage, setUserImage] = useState(\"\")\r\n\r\n    async function fetchData(){\r\n        const res = await fetch('/discord/data');\r\n        res.json()\r\n        .then(res => {setUserImage(res.discordImage)})\r\n        .catch(err =>  { console.log(err) });\r\n        \r\n    }\r\n\r\n\r\n    useEffect(() =>{\r\n        const abortController = new AbortController();\r\n        fetchData()\r\n\r\n        return () => {\r\n            abortController.abort();\r\n        };\r\n\r\n    }, [])\r\n\r\n    // render() {\r\n        return (\r\n\r\n            <div className=\"relative z-10 flex h-16 shadow-sm\">\r\n                        <button className=\"px-4 text-gray-500 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-indigo-500 md:hidden\" onClick={() => {\r\n                                    document.querySelector('#mob-nav').classList.contains('hidden') ? document.querySelector('#mob-nav').classList.remove('hidden') : document.querySelector('#mob-nav').classList.add('hidden')\r\n                                    document.querySelector('#mob-screen').classList.contains('hidden') ? document.querySelector('#mob-screen').classList.remove('hidden') : document.querySelector('#mob-screen').classList.add('hidden')\r\n                            }}>\r\n                            <AiOutlineMenu className=\"h-6 w-6\"/>\r\n                        </button>\r\n                        \r\n                        <div className=\"flex-1 px-4 flex justify-between bg-other-100 dark:bg-darkOther-100 mr-2\">\r\n                            <div className=\"flex-1 flex\">\r\n                                <form className=\"w-full flex md:ml-0\" action=\"#\" method=\"GET\">\r\n                                    <label className=\"sr-only\">Search</label>\r\n                                    <div className=\"relative w-full text-gray-400 focus-within:text-gray-600\">\r\n                                    <div className=\"absolute inset-y-0 left-0 flex items-center pointer-events-none\">\r\n                                        <AiOutlineSearch className=\"h-5 w-5 text-gray-900 dark:text-other-100\"/>\r\n                                    </div>\r\n                                    <input id=\"search_field\" disabled=\"disabled\" autoComplete=\"off\" className=\"bg-other-100 dark:bg-darkOther-100 block w-full h-full pl-8 pr-3 py-2 border-transparent text-gray-900 placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-0 focus:border-transparent sm:text-sm\" placeholder=\"Search\" type=\"search\" name=\"search\" />\r\n                                    </div>\r\n                                </form>\r\n                            </div>\r\n            \r\n                            <div className=\"ml-4 flex items-center md:ml-6 \">\r\n                                <button className=\"p-1 rounded-full bg-darkOther-200 text-other-100 dark:bg-other-200 dark:text-other-100 focus:outline-none\" onClick={() => {\r\n                                    document.querySelector('#notif-dropdown').classList.contains('hidden') ? document.querySelector('#notif-dropdown').classList.remove('hidden') : document.querySelector('#notif-dropdown').classList.add('hidden')\r\n                                }}>\r\n                                    <span className=\"sr-only\">View notifications</span>\r\n                                    <IoNotificationsOutline className=\"h-7 w-7\" id='hide'/>\r\n                                </button>\r\n\r\n                                <div className=\"dark:bg-darkOther-200 hidden absolute right-0 mt-24 mr-24 w-48 rounded-md shadow-lg py-1 bg-white focus:outline-none\" role=\"menu\" id=\"notif-dropdown\" aria-orientation=\"vertical\">\r\n                                        <span className=\"block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 hover:bg-gray-100 hover:text-gray-900 dark:hover:bg-darkOther-300 dark:text-white\" role=\"menuitem\" id='hide'>No notifications</span>\r\n                                </div>\r\n                        \r\n                                <div className=\"ml-3 relative\">\r\n                                    <div>  \r\n                                        <button className=\"max-w-xs bg-white flex items-center text-sm rounded-full focus:outline-none\" id=\"profile-button-hide\" name=\"profile-dropdown\" aria-haspopup=\"true\"  onClick={() => {\r\n                                            document.querySelector('#profile-dropdown').classList.contains('hidden') ? document.querySelector('#profile-dropdown').classList.remove('hidden') : document.querySelector('#profile-dropdown').classList.add('hidden')\r\n                                        }}>\r\n                                            <span className=\"sr-only\">Open user menu</span>\r\n                                            {userImage == \"\" ? <FaUserCircle className=\"h-10 w-10 rounded-full bg-darkOther-200 text-other-100 dark:bg-other-200 dark:text-other-100 \" id=\"profile-button-hide\" name=\"profile-dropdown\" /> : <img className=\"h-8 w-8 rounded-full text-other-100 dark:text-darkOther-300\" src={userImage} id=\"profile-button-hide\" name=\"profile-dropdown\" />}\r\n                                        </button>\r\n                                    </div>\r\n            \r\n                                    <div className=\"dark:bg-darkOther-200 hidden origin-top-right absolute right-0 mt-2 w-48 rounded-md shadow-lg py-1 bg-white\" role=\"menu\" id=\"profile-dropdown\" aria-orientation=\"vertical\" aria-labelledby=\"user-menu\">\r\n                                        <span href=\"#\" className=\"block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 hover:text-gray-900 dark:hover:bg-darkOther-300 dark:text-white\" role=\"menuitem\" id='hide'>Sign out</span>\r\n                                    </div>\r\n                                </div>\r\n            \r\n                            </div>\r\n                        </div>\r\n            </div>\r\n        )\r\n}\r\n\r\nexport default AdminSearch;","E:\\dashboard-react\\src\\components\\home\\planModal.js",["120","121","122","123","124"],"import '../../static/styles/main.css'; \r\nimport React, { useEffect, useState } from 'react';\r\nimport Select from 'react-select';\r\nimport makeAnimated from 'react-select/animated';\r\nimport chroma from 'chroma-js';\r\nimport currencyOptions from '../../static/data/currencies.json'\r\nimport { Switch } from '@headlessui/react'\r\n\r\n\r\nimport { AiOutlineClose } from 'react-icons/ai';\r\nimport { IoPricetagOutline } from 'react-icons/io5';\r\n\r\nvar planOptions = [\r\n    {label:'Recurring & Onetime Payment', value:'recurring+onetime-payment'},\r\n    {label:'Recurring', value:'recurring'},\r\n    {label:'Lifetime', value:'lifetime'},\r\n    {label:'Rental', value:'rental'}\r\n]\r\nvar intervalTypeOptions = [\r\n    {label:'Day', value:'day'},\r\n    {label:'Week', value:'week'},\r\n    {label:'Month', value:'month'},\r\n    {label:'Year', value:'year'}\r\n]\r\n\r\nconst PlanModal = () => {\r\n\r\n    const [availableRoles, setavailableRoles] = useState([])\r\n    const [planName, setplanName] = useState(\"\")\r\n    const [planType, setplanType] = useState(\"\")\r\n    const [planRole, setplanRole] = useState([])\r\n    const [price, setprice] = useState(\"\")\r\n    const [priceCurrency, setpriceCurrency] = useState(\"\")\r\n    const [interval, setinterval] = useState(\"\")\r\n    const [intervalType, setintervalType] = useState(\"\")\r\n    const [unbinding, setunbinding] = useState(true)\r\n    // const [selectColor, setSelectColor] = useState(true)\r\n\r\n    async function fetchPlans(){\r\n        const res = await fetch('/discord/guild/roles');\r\n        res.json()\r\n        .then(res => {\r\n            setavailableRoles(res.roles)\r\n        })\r\n        .catch(err =>  {console.log(err)});\r\n        \r\n    }\r\n\r\n    useEffect(() =>{\r\n        const abortController = new AbortController();\r\n        fetchPlans()\r\n\r\n\r\n\r\n        return () => {\r\n            abortController.abort();\r\n        };\r\n\r\n    }, [])\r\n\r\n    const colourStyles = {\r\n        control: styles => ({ ...styles, backgroundColor: localStorage.getItem('mode')  }),\r\n        option: (styles, { data, isDisabled, isFocused, isSelected }) => {\r\n          const color = chroma(data.color);\r\n          return {\r\n            ...styles,\r\n            backgroundColor: isDisabled\r\n              ? null\r\n              : isSelected\r\n              ? data.color\r\n              : isFocused\r\n              ? color.alpha(0.1).css()\r\n              : null,\r\n            color: isDisabled\r\n              ? '#ccc'\r\n              : isSelected\r\n              ? chroma.contrast(color, 'white') > 2\r\n                ? 'white'\r\n                : 'black'\r\n              : data.color,\r\n            cursor: isDisabled ? 'not-allowed' : 'default',\r\n      \r\n            ':active': {\r\n              ...styles[':active'],\r\n              backgroundColor:\r\n                !isDisabled && (isSelected ? data.color : color.alpha(0.3).css()),\r\n            },\r\n          };\r\n        },\r\n        multiValue: (styles, { data }) => {\r\n          const color = chroma(data.color);\r\n          return {\r\n            ...styles,\r\n            backgroundColor: color.alpha(0.1).css(),\r\n          };\r\n        },\r\n        multiValueLabel: (styles, { data }) => ({\r\n          ...styles,\r\n          color: data.color,\r\n        }),\r\n        multiValueRemove: (styles, { data }) => ({\r\n          ...styles,\r\n          color: data.color,\r\n          ':hover': {\r\n            backgroundColor: data.color,\r\n            color: 'white',\r\n          },\r\n        }),\r\n    }\r\n    const colourStyle = {\r\n        control: styles => ({ ...styles, backgroundColor: localStorage.getItem('mode') }),\r\n\r\n    }\r\n\r\n\r\n    \r\n    const submitHandler = async (e) => {\r\n        e.preventDefault()\r\n\r\n        if(planName.length > 0 && planType.length > 0 && interval.length > 0) {\r\n\r\n            var response = await fetch('/plans/add', {\r\n                method:'post',\r\n                body:JSON.stringify({\r\n                    planName:planName,\r\n                    price:price,\r\n                    currency:priceCurrency,\r\n                    type:planType,\r\n                    role:JSON.stringify(planRole),\r\n                    interval:interval,\r\n                    intervalType:intervalType,\r\n                    planId:'',\r\n                    id:'',\r\n                    unbinding:unbinding\r\n                }),\r\n                \"headers\": {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            })\r\n            if(response.ok) {\r\n                setavailableRoles()\r\n                setinterval(\"\")\r\n                setintervalType(\"\")\r\n                setplanName(\"\")\r\n                setplanRole([])\r\n                setplanType(\"\")\r\n                setprice(\"\")\r\n                setpriceCurrency(\"\")\r\n                setunbinding(true)\r\n\r\n                return\r\n            }else{\r\n                return\r\n            }\r\n        }\r\n        else{\r\n            return;\r\n        }\r\n    }\r\n\r\n        \r\n        return (\r\n                <div className=\"fixed z-10 inset-0 overflow-y-auto hidden\" id=\"plan-modal\">\r\n            \r\n                    <form onSubmit={submitHandler}>\r\n                        <div className=\"flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0\">\r\n\r\n                            <div className=\"fixed inset-0 transition-opacity\" aria-hidden=\"true\">\r\n                                <div className=\"absolute inset-0 bg-gray-500 opacity-75\"></div>\r\n                            </div>\r\n                \r\n                            <span className=\"hidden sm:inline-block sm:align-middle sm:h-screen\" aria-hidden=\"true\">&#8203;</span>\r\n\r\n            \r\n                            <div className=\"inline-block align-bottom bg-white rounded-lg px-4 pt-5 pb-4 text-left shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-sm sm:w-full sm:p-6 dark:bg-darkOther-200\" role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"modal-headline\">\r\n                        \r\n                                <div>\r\n                                    <button type=\"button\" onClick={() => {\r\n                                        document.querySelector('#plan-modal').classList.contains('hidden') ? document.querySelector('#plan-modal').classList.remove('hidden') : document.querySelector('#plan-modal').classList.add('hidden')\r\n                                    }}><AiOutlineClose className=\"text-red-500 h-6 w-6 \" id='hide' /></button>\r\n\r\n\r\n                                    <div className=\"mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-green-100\">\r\n            \r\n                                    \r\n                                    <IoPricetagOutline className=\"h-6 w-6 text-green-600 select-none\" id='hide'/>\r\n                                </div>\r\n        \r\n\r\n                                <div className=\"mt-3 text-center sm:mt-5\">  \r\n                                    <h3 className=\"text-lg leading-6 font-medium text-gray-900 dark:text-white select-none\" id=\"modal-headline\">\r\n                                    Create a Plan...\r\n                                    </h3>\r\n        \r\n                                    <div className=\"mt-2\">\r\n                                        \r\n                                        <div>\r\n\r\n                                            <fieldset className=\"mt-2 bg-white dark:bg-darkOther-200\">\r\n                                                <div className=\"md:grid md:grid-cols-2\">\r\n                                                <div className=\"\">\r\n                                                        <legend className=\"block text-sm font-medium text-gray-700 text-left dark:text-gray-300 select-none\">Plan Name</legend>\r\n                                                        <div className=\"mt-1 rounded-md shadow-sm -space-y-px\">\r\n                                                            <div>\r\n                                                            <label className=\"block text-sm font-medium text-gray-700\"></label>\r\n                                                            <input  name=\"planName\" id=\"name\" autoComplete=\"off\" className=\"dark:bg-darkOther-200 focus:ring-other-200 focus:border-other-200 block w-full font-medium text-md rounded-md py-2 dark:focus:ring-darkOther-200 dark:focus:border-darkOther-200\" \r\n                                                            placeholder=\"Member\" value={planName} onChange={e => setplanName(e.target.value)} />                                                         \r\n                                                            \r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                    \r\n                                                    <div className=\"\">\r\n                                                        <legend className=\"block text-sm font-medium text-gray-700 text-left dark:text-gray-300 select-none\">Type</legend>\r\n                                                        <div className=\"mt-1 rounded-md shadow-sm -space-y-px\">\r\n                                                            <div>\r\n                                                                <label className=\"sr-only\">type</label>\r\n                                                                \r\n                                                                <Select defaultValue={planOptions[0]} styles={colourStyle} placeholder=\"Plan Type\" id=\"type\" value={planType} name=\"planType\" options={planOptions} className=\"focus:ring-other-200 focus:border-other-200 relative block w-full rounded-none rounded-t-md bg-transparent focus:z-10 font-medium text-md dark:focus:border-darkOther-200 dark:focus:ring-darkOther-200\"\r\n                                                                onChange={e => setplanType(e.value)} value={planOptions.filter(function(planOptions) {return planOptions.value === planType})}/>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                \r\n                                                </div>\r\n                \r\n                                            </fieldset>\r\n\r\n                                            {planType == \"recurring\" || planType == \"recurring+onetime-payment\" ?  <fieldset className=\"mt-2 bg-white dark:bg-darkOther-200\">\r\n                                                <div className=\"md:grid md:grid-cols-2\">\r\n                                                <div className=\"\">\r\n                                                        <legend className=\"block text-sm font-medium text-gray-700 text-left dark:text-gray-300 select-none\">Interval</legend>\r\n                                                        <div className=\"mt-1 rounded-md shadow-sm -space-y-px\">\r\n                                                            <div className=\"mt-1 flex rounded-md shadow-sm -space-y-px\">\r\n                                                                <span className=\"inline-flex items-center px-3 rounded-l-md border-r-2 border-gray-200 bg-gray-50 text-gray-800 sm:text-sm mr-2 dark:bg-darkOther-100 dark:text-white select-none\">\r\n                                                                    every\r\n                                                                </span>\r\n                                                                <input name=\"interval\" id=\"interval\" type=\"text\" placeholder=\"Count\" autoComplete=\"off\" className=\"dark:bg-darkOther-200 block w-full font-medium text-md rounded-md py-2 \" value={interval} onChange={e => setinterval(e.target.value)}/>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                    \r\n                                                    <div className=\"\">\r\n                                                        <legend className=\"block text-sm font-medium text-gray-700 text-left dark:text-gray-300 select-none\">Interval Type</legend>\r\n                                                        <div className=\"mt-1 rounded-md shadow-sm -space-y-px\">\r\n                                                            <div>\r\n                                                                <label className=\"sr-only select-none\">Interval Type</label>\r\n                                                                \r\n                                                                <Select defaultValue={intervalTypeOptions[3]} styles={colourStyle} id=\"type\" value={intervalType} name=\"intervalType\" options={intervalTypeOptions} placeholder=\"Interval\" \r\n                                                                className=\"focus:ring-other-200 focus:border-other-200 relative block w-full rounded-none rounded-t-md focus:z-10 font-medium text-md dark:focus:border-darkOther-200 dark:focus:ring-darkOther-200\"\r\n                                                                onChange={e => setintervalType(e.value)} value={intervalTypeOptions.filter(function(intervalTypeOptions) {return intervalTypeOptions.value === intervalType})}/>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                \r\n                                                </div>\r\n                \r\n                                            </fieldset> : <div></div> }\r\n\r\n                                            {/* {planType == \"recurring\" ? <fieldset className=\"mt-2 bg-white dark:bg-darkOther-200\" id=\"interval-options\">\r\n                                                <legend className=\"block text-sm font-medium text-gray-700 text-left dark:text-gray-300\">Interval</legend>\r\n                                                <div className=\"mt-1 bg-white rounded-md shadow-sm dark:bg-darkOther-200\">\r\n\r\n                                                    <div className=\"md:grid-cols-1 lg:grid-cols-1 sm:grid-cols-2 gap-2\">\r\n\r\n                                                        <div className=\"relative rounded-md shadow-sm\">\r\n                                                            <div className=\"mt-1 flex rounded-md shadow-sm -space-y-px\">\r\n                                                                <span className=\"inline-flex items-center px-3 rounded-l-md border-r-2 border-gray-200 bg-gray-50 text-gray-800 sm:text-sm mr-2 dark:bg-darkOther-100 dark:text-white\">\r\n                                                                    every\r\n                                                                </span>\r\n                                                                <input name=\"interval\" id=\"interval\" type=\"text\" placeholder=\"Interval Count\" autoComplete=\"off\" className=\"dark:bg-darkOther-200 block w-full font-medium text-md rounded-md py-2 \" value={interval} onChange={e => setinterval(e.target.value)}/>\r\n                                                            </div>\r\n\r\n                                                            <div className=\"inset-y-0 right-0 flex items-center -space-y-px\">\r\n                                                                <label className=\"sr-only\">Interval Type</label>\r\n                                                                <Select defaultValue={intervalTypeOptions[3]} styles={colourStyle} id=\"type\" value={intervalType} name=\"intervalType\" options={intervalTypeOptions} placeholder=\"Interval\" className=\"px-3 w-32\"\r\n                                                                onChange={e => setintervalType(e.value)} value={intervalTypeOptions.filter(function(intervalTypeOptions) {return intervalTypeOptions.value === intervalType})}/>\r\n                                                            </div>\r\n\r\n                                                        </div>\r\n\r\n                                                    </div>\r\n                                                </div>\r\n                                            </fieldset> : <div></div>} */}\r\n                                        \r\n\r\n                                            <fieldset className=\"mt-4 bg-white dark:bg-darkOther-200\">\r\n                                                <legend className=\"block text-sm font-medium text-gray-700 text-left dark:text-gray-300 select-none\">Price</legend>\r\n                                                <div className=\"mt-1 bg-white rounded-md shadow-sm dark:bg-darkOther-200\">\r\n                                                    <div>\r\n                                                        <div className=\"mt-1 relative rounded-md shadow-sm\">\r\n                                                            <input type=\"text\" name=\"price\" id=\"price\" className=\"dark:bg-darkOther-200 focus:ring-other-200 focus:border-other-200 block w-full font-medium text-md  rounded-md py-2 dark:focus:border-darkOther-200 dark:focus:ring-darkOther-200\" \r\n                                                            placeholder=\"0.00\" value={price} autoComplete=\"off\" onChange={e => setprice(e.target.value)}/>\r\n\r\n                                                            <div className=\"absolute inset-y-0 right-0 flex items-center\">\r\n                                                                <label className=\"sr-only\">Currency</label>\r\n                                                                <Select defaultValue={currencyOptions[0]} styles={colourStyle}  id=\"type\" value={priceCurrency} name=\"priceCurrency\" placeholder=\"Currency\" options={currencyOptions} className=\"px-3 w-48 dark:bg-darkOther-200\"\r\n                                                                onChange={e => setpriceCurrency(e.value)} isSearchable value={currencyOptions.filter(function(currencyOptions) {return currencyOptions.value === priceCurrency})}/>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </div>\r\n                                            \r\n                                            </fieldset>\r\n        \r\n                                            <fieldset className=\"mt-2 bg-whit dark:bg-darkOther-200\" id=\"interval-fieldset\">\r\n                                                    <div className=\"\">\r\n                                                        <legend className=\"block text-sm font-medium text-gray-700 text-left dark:text-gray-300 select-none\">Roles</legend>\r\n                                                        <div className=\"mt-1 rounded-md shadow-sm -space-y-px\">\r\n                                                            <div>\r\n                                                                <label className=\"sr-only\">roles</label>\r\n                                                                <Select id=\"roles\" value={planRole}  placeholder=\"Roles\" closeMenuOnSelect={false} styles={colourStyles} name=\"planRole\" isSearchable components={makeAnimated()} isMulti options={availableRoles} className=\"focus:ring-other-200 focus:border-other-200 relative block w-full rounded-none rounded-t-md bg-transparent focus:z-10 font-medium text-md dark:focus:border-darkOther-200 dark:focus:ring-darkOther-200\"\r\n                                                                    onChange={e => setplanRole(e)} />\r\n                                                                                                                                    \r\n                                                            \r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                            \r\n                                            </fieldset>\r\n\r\n                                            <fieldset className=\"mt-2 bg-white dark:bg-darkOther-200\" id=\"interval-fieldset\">\r\n                                                    <div className=\"\">\r\n                                                        <legend className=\"block text-sm font-medium text-gray-700 text-left dark:text-gray-300 select-none\">{unbinding ? \"Unbinding Enabled\" : \"Unbinding Disabled\"}</legend>\r\n                                                        <div className=\"mt-1 rounded-md shadow-sm -space-y-px\">\r\n                                                            <div className=\"text-left\">\r\n                                                                <label className=\"sr-only\">allow unbinding</label>\r\n                                                                <Switch \r\n                                                                checked={unbinding}\r\n                                                                onChange={e => setunbinding(e)}\r\n                                                                as=\"button\" \r\n                                                                className={`${unbinding ? \"bg-green-400\" : \"bg-gray-200\"} relative inline-flex flex-shrink-0 h-6 w-11 border-2 border-transparent rounded-full cursor-pointer transition-colors ease-in-out duration-200 focus:outline-none`}>\r\n\r\n                                                                    {unbinding ? \r\n                                                                    <span aria-hidden=\"true\" className=\"pointer-events-none translate-x-0 inline-block h-5 w-5 rounded-full bg-white shadow transform ring-0 transition ease-in-out duration-200\"></span> : \r\n                                                                    <span aria-hidden=\"true\" className=\"pointer-events-none translate-x-5 inline-block h-5 w-5 rounded-full bg-white shadow transform ring-0 transition ease-in-out duration-200\"></span>\r\n                                                                    }\r\n\r\n                                                                </Switch>\r\n                                                                                                                                    \r\n                                                            \r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                            \r\n                                            </fieldset>\r\n        \r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"mt-5 sm:mt-6\">\r\n                                <button  name=\"license-modal\" type=\"submit\" className=\"inline-flex justify-center w-full rounded-md border border-transparent shadow-sm px-4 py-2 bg-blue-500 text-base font-medium text-white hover:bg-other-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-other-200 sm:text-sm dark:focus:ring-darkOther-200 dark:hover:bg-darkOther-200 dark:bg-darkOther-100\">\r\n                                    Create\r\n                                </button>\r\n                            </div>\r\n\r\n                        </div>\r\n                    \r\n                    </div>\r\n                    </form>\r\n            </div>\r\n\r\n        )\r\n\r\n}\r\nexport default PlanModal","E:\\dashboard-react\\src\\components\\home\\restockModal.js",[],"E:\\dashboard-react\\src\\components\\licenses\\licenses.js",["125","126","127"],"E:\\dashboard-react\\src\\components\\licenses\\licenseModal.js",[],"E:\\dashboard-react\\src\\components\\licenses\\table.js",["128","129","130","131","132"],"import '../../static/styles/main.css'; \r\nimport React, { useEffect, useState } from 'react';\r\nimport { BsThreeDots } from 'react-icons/bs';\r\nimport BounceLoader from \"react-spinners/BounceLoader\";\r\n\r\n\r\nconst LicenseTable = () => {\r\n\r\n    const [users, setUsers] = useState([])\r\n    const [loaded, setLoaded] = useState(false)\r\n\r\n    async function fetchUsers(){\r\n        const res = await fetch('/users');\r\n        res.json()\r\n        .then(res => {\r\n            setUsers(res)\r\n            setLoaded(true)\r\n        })\r\n        .catch(err =>  fetchUsers());\r\n        \r\n    }\r\n\r\n\r\n    useEffect(() =>{\r\n        var abortController = new AbortController();\r\n        fetchUsers()\r\n\r\n\r\n        setInterval(() => {\r\n            abortController = new AbortController();\r\n            fetchUsers()\r\n\r\n        }, 5000);\r\n\r\n\r\n        return () => {\r\n            abortController.abort();\r\n        };\r\n\r\n    }, [])\r\n\r\n    const submitEmailHandler = async (e, key,email) => {\r\n        e.preventDefault()\r\n\r\n        try{\r\n\r\n            await fetch('/users/email', {\r\n                method:'POST',\r\n                body:JSON.stringify({\r\n                    email:email,\r\n                    key:key\r\n                }),\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                }\r\n            })\r\n            .then(response => {\r\n            }).catch(err => console.log(err))\r\n        }catch(err){\r\n            console.log(err)\r\n            return;\r\n        }\r\n\r\n    }\r\n    const submitUnbindHandler = async (e, id) => {\r\n        e.preventDefault()\r\n        \r\n        try{\r\n\r\n            await fetch('/users/unbind/' +id, {\r\n                method:'get'\r\n            })\r\n            .then(response => {\r\n                {}\r\n            }).catch(err => console.log(err))\r\n        }catch(err){\r\n            console.log(err)\r\n            return;\r\n        }\r\n\r\n    }\r\n    const submitRevokeHandler = async (e, id) => {\r\n        e.preventDefault()\r\n        \r\n        try{\r\n\r\n            await fetch('/users/revoke/' + id, {\r\n                method:'get'\r\n            })\r\n            .then(response => {\r\n                // setPlan(\"\")\r\n                // setEmail(\"\")\r\n            }).catch(err => console.log(err))\r\n        }catch(err){\r\n            console.log(err)\r\n            return;\r\n        }\r\n\r\n    }\r\n\r\n\r\n    const renderTableRows = () => {\r\n        return users.map(user => {\r\n            var date = new Date(user.dateCreated * 1000)\r\n            return (\r\n    \r\n                <tr key={user.id}>\r\n                    <td className=\"px-6 py-4 whitespace-nowrap dark:bg-darkOther-200\">\r\n                        {/* <div className=\"flex items-center\"> */}\r\n\r\n                            {/* <div className=\"ml-2\"> */}\r\n\r\n                                {/* style=\"font-family: 'Ubuntu Mono', monospace;\" */}\r\n                                <div className=\"text-sm text-gray-700 font-mono dark:text-gray-400\" id=\"key\">\r\n                                    {user.key}\r\n                                </div>\r\n\r\n                            {/* </div> */}\r\n\r\n                        {/* </div> */}\r\n                    </td>\r\n\r\n                    <td className=\"px-6 py-4 whitespace-nowrap dark:bg-darkOther-200\">\r\n                        <div className=\"text-sm text-gray-900 dark:text-gray-500\" id=\"discordName\">{user.discordName == \"empty\" ? \"Unbound\" : user.discordName}</div>\r\n                        <div className=\"text-sm text-gray-500 dark:text-gray-300\" id=\"discordId\">{user.discordId == 123456789 ? \"Unbound\" : user.discordId}</div>\r\n                    </td>\r\n\r\n                    {/* <td className=\"px-6 py-4 whitespace-nowrap dark:bg-darkOther-200\">\r\n                        <div className=\"text-sm text-gray-900\" id=\"keyType\">{user.keyType}</div>\r\n                        <span className=\"px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800\">\r\n                            Active\r\n                        </span>\r\n                    </td> */}\r\n\r\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:bg-darkOther-200\">\r\n                        {\r\n                        `${date.getDate()} ${['January','February','March','April','May','June','July','August','September','October','November','December'][date.getMonth()]}, ${date.getFullYear()}`\r\n                        }\r\n                    </td>\r\n\r\n                    <td className=\"px-6 py-4 whitespace-nowrap dark:bg-darkOther-200\">\r\n                        \r\n                        <button className=\"ml-2 text-gray-600 hover:text-gray-900\" id={`${user.id}-dropdown-button-hide`} onClick={() => {\r\n                            document.querySelector(`#dropdown-${user.id}`).classList.contains('hidden') ? document.querySelector(`#dropdown-${user.id}`).classList.remove('hidden') : document.querySelector(`#dropdown-${user.id}`).classList.add('hidden')\r\n                        }}> <BsThreeDots className=\"h-4 w-4\" id={`${user.id}-icon-hide`} />\r\n                        </button>\r\n\r\n                        <div id={`dropdown-${user.id}`} className=\"dark:bg-darkOther-200 hidden mx-3 mr-10 origin-top-right absolute right-7 top-0 w-48 mt-1 rounded-md shadow-lg z-10 bg-white ring-1 ring-black ring-opacity-5\">\r\n\r\n                            <button className=\"block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 dark:text-white dark:hover:bg-darkOther-300 w-full\" role=\"menuitem\" id={`hide-${user.id}`} onClick={(e) => submitUnbindHandler(e, user.id)}>Unbind from User</button>\r\n                            <button className=\"block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 dark:text-white dark:hover:bg-darkOther-300 w-full\" role=\"menuitem\" id={`hide-${user.id}`} onClick={(e) => submitRevokeHandler(e, user.id)}>Revoke & Delete</button>\r\n                            <button className=\"block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 dark:text-white dark:hover:bg-darkOther-300 w-full\" role=\"menuitem\" id={`hide-${user.id}`} onClick={(e) => submitEmailHandler(e, user.key, user.email)}>Send receipt via email</button>\r\n                            <button className=\"block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 dark:text-white dark:hover:bg-darkOther-300 w-full\" role=\"menuitem\" id={`hide-${user.id}`} onClick={(e) => {}}>Extend license</button>\r\n                    \r\n                        </div>\r\n\r\n                    </td>\r\n\r\n                </tr>\r\n            )\r\n            \r\n            \r\n        })\r\n    }\r\n\r\n\r\n\r\n    return (\r\n\r\n        <table className=\"w-full overflow-y-auto\" id=\"table\" id='table'>\r\n\r\n                <thead className=\"bg-gray-200 dark:bg-darkOther-100\">\r\n\r\n                    <tr>\r\n                        <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider select-none\">\r\n                        Key\r\n                        </th>\r\n\r\n                        <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider select-none\">\r\n                        User\r\n                        </th>\r\n\r\n                        {/* <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider select-none\">\r\n                        Plan\r\n                        </th> */}\r\n\r\n                        <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider select-none\">\r\n                        Created\r\n                        </th>\r\n\r\n                        <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider select-none\">\r\n                            Options\r\n                        </th>\r\n                    </tr>\r\n\r\n                </thead>\r\n                \r\n                <tbody className=\"divide-y divide-gray-200 dark:divide-gray-700 min-h-full\">\r\n                    {\r\n                        loaded ? renderTableRows() : \r\n                        <tr>\r\n                        <td className=\"px-6 py-4 whitespace-nowrap dark:bg-darkOther-200\">\r\n                            {/* <div className=\"flex items-center\"> */}\r\n    \r\n                                {/* <div className=\"ml-2\"> */}\r\n    \r\n                                    {/* style=\"font-family: 'Ubuntu Mono', monospace;\" */}\r\n                                    <div className=\"text-sm text-gray-700 font-mono dark:text-gray-400\" id=\"key\">\r\n                                    <BounceLoader color={'#302f2f'} loading={true} size={25} />\r\n                                    </div>\r\n    \r\n                                {/* </div> */}\r\n    \r\n                            {/* </div> */}\r\n                        </td>\r\n    \r\n                        <td className=\"px-6 py-4 whitespace-nowrap dark:bg-darkOther-200\">\r\n                            <div className=\"text-sm text-gray-900 dark:text-gray-500\" id=\"discordName\"><BounceLoader color={'#302f2f'} loading={true} size={25} /></div>\r\n                            <div className=\"text-sm text-gray-500 dark:text-gray-300\" id=\"discordId\"><BounceLoader color={'#302f2f'} loading={true} size={25} /></div>\r\n                        </td>\r\n    \r\n                        {/* <td className=\"px-6 py-4 whitespace-nowrap dark:bg-darkOther-200\">\r\n                            <div className=\"text-sm text-gray-900\" id=\"keyType\">{user.keyType}</div>\r\n                            <span className=\"px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800\">\r\n                                Active\r\n                            </span>\r\n                        </td> */}\r\n    \r\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:bg-darkOther-200\">\r\n                        <BounceLoader color={'#302f2f'} loading={true} size={25} />\r\n                        </td>\r\n    \r\n                        <td className=\"px-6 py-4 whitespace-nowrap dark:bg-darkOther-200\">\r\n                            \r\n                        <BounceLoader color={'#302f2f'} loading={true} size={25} />\r\n\r\n    \r\n                        </td>\r\n    \r\n                    </tr>\r\n                    }\r\n                </tbody>\r\n                \r\n        </table>\r\n\r\n            \r\n\r\n\r\n    )\r\n\r\n\r\n\r\n}\r\nexport default LicenseTable","E:\\dashboard-react\\src\\components\\users\\table.js",["133","134","135","136","137"],"E:\\dashboard-react\\src\\components\\settings\\settings.js",["138","139","140","141","142","143"],"import '../../static/styles/main.css'; \r\nimport React, { useState, useEffect } from 'react';\r\nimport AdminNavigation from '../adminNav';\r\nimport AdminSearchbar from '../adminSearch';\r\nimport BounceLoader from \"react-spinners/BounceLoader\";\r\nimport Select from 'react-select';\r\n\r\nimport { FaStripe } from 'react-icons/fa'\r\n\r\nconst failedPaymentOptions = [\r\n    {\"value\":\"1\", \"label\":\"Delete Key & Kick User\"},\r\n    {\"value\":\"2\", \"label\":\"Remove roles & allow user to renew\"}\r\n]\r\n\r\nconst Settings = () => {\r\n    const [accountName, setAccountName] = useState(\"\")\r\n    const [supportEmail, setSupportEmail] = useState(\"\")\r\n    const [imageURL, setImageURL] = useState(\"\")\r\n    const [failedPayment, setFailedPayments] = useState(\"\")\r\n    const [loaded, setLoaded] = useState(false)\r\n    const [bgURL, setbgUrl] = useState(\"\")\r\n    const [description, setDescription] = useState(\"\")\r\n\r\n    const openIntergrate = () => {\r\n        window.open('https://connect.stripe.com/oauth/authorize?response_type=code&client_id=ca_IoulDfRGftLWpHLLkw7NJwDFfs9LqhgT&scope=read_write&redirect_uri=http://127.0.0.1:4000/stripe/oauth/uri', '_blank').focus()\r\n    }\r\n\r\n    const accountHandle = async () => {\r\n        var response = await fetch('/accounts/dashboard/name/' + accountName)\r\n    } \r\n    const supportHandle = async () => {\r\n        var response = await fetch('/accounts/dashboard/supportEmail/' + supportEmail)\r\n    } \r\n    const logoHandle = async () => {\r\n        var response = await fetch('/accounts/dashboard/logo/' + btoa(imageURL))\r\n    } \r\n    const failedPaymentHandle = async () => {\r\n        var response = await fetch('/accounts/dashboard/payment/' + failedPayment) \r\n    } \r\n    const bgHandle = async () => {\r\n        var response = await fetch('/accounts/dashboard/background/' + btoa(bgURL)) \r\n    } \r\n    const descriptionHandle = async () => {\r\n        var response = await fetch('/accounts/dashboard/description/' + description) \r\n        console.log(response)\r\n    }\r\n\r\n\r\n    async function fetchData(){\r\n        const res = await fetch('/accounts/dashboard');\r\n        res.json()\r\n        .then(res => {\r\n            setAccountName(res[0].name)\r\n            setSupportEmail(res[0].supportEmail)\r\n            setImageURL(res[0].branding.logoUrl)\r\n            setFailedPayments(res[0].settings.payments.failedPaymentOption)\r\n            setDescription(res[0].description)\r\n            setbgUrl(res[0].backgroundUrl)\r\n            setLoaded(true)\r\n        })\r\n        .catch(err =>  {\r\n        });\r\n        \r\n    }\r\n\r\n    useEffect(() =>{\r\n        const abortController = new AbortController();\r\n        localStorage.setItem('pswd',window.location.search.split('?password=')[1])\r\n        fetchData()\r\n\r\n        return () => {\r\n            abortController.abort();\r\n        };\r\n\r\n    }, [])\r\n\r\n\r\n        return (\r\n            <>\r\n                \r\n                <AdminNavigation />\r\n                {\r\n                loaded ? \r\n                <div className=\"flex flex-col w-0 flex-1 overflow-hidden\">\r\n                <AdminSearchbar />\r\n                <main className=\"flex-1 relative overflow-y-auto focus:outline-none\">\r\n                <div className=\"py-6\">\r\n\r\n                    <div className=\"max-w-7xl mx-auto px-4 sm:px-6 md:px-8\"></div>\r\n                    \r\n                    <div className=\"mx-auto px-4 sm:px-6 md:px-8 w-full\">\r\n                    \r\n                        <section aria-labelledby=\"section1\">\r\n\r\n                            <div className=\"shadow-lg sm:rounded-md sm:overflow-hidden mt-8 shadow-lg lg:w-3/4 md:3/4 sm:w-full\">\r\n                                <div className=\"bg-white py-4 px-4 sm:p-6 dark:bg-darkOther-200\">\r\n                                    <div>\r\n                                        <h1 className=\"text-lg font-medium text-other-300 dark:text-white select-none\">General Settings</h1>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <form onSubmit={accountHandle}> \r\n                            <div className=\"shadow-lg sm:rounded-md sm:overflow-hidden mt-3 lg:w-3/4 md:3/4 sm:w-full\">\r\n                                <div className=\"bg-white py-4 px-4 sm:p-6 dark:bg-darkOther-200\">\r\n                                        <div>\r\n                                            <label for=\"accountName\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-400 select-none\">Account Name</label>\r\n                                            <div className=\"mt-1\">\r\n                                                <input type=\"text\" defaultValue={accountName} onChange={e => setAccountName(e.target.value)} autoComplete=\"off\" className=\"dark:text-other-100 dark:bg-darkOther-100 shadow-sm focus:ring-other-200 focus:border-other-200 block w-1/2 text-md border-gray-300 rounded-md py-2 dark:focus:ring-darkOther-200 dark:focus:border-darkOther-200\" placeholder=\"Cook Group\" aria-describedby=\"email-description\" />\r\n                                            </div>\r\n\r\n                                            <p className=\"mt-2 text-sm text-gray-500 select-none\" id=\"accountName-description\">This account name will be displayed on the Dashboard & in email receipts</p>\r\n                                        </div>\r\n\r\n                                        <div className=\"text-right\">\r\n                                            <button type=\"submit\" className=\"text-other-200 text-sm font-medium bg-gray-200 rounded-lg py-2 px-8 text-right dark:bg-darkOther-100 dark:text-other-100\">Save</button>\r\n                                        </div>\r\n                                </div>\r\n                            </div>\r\n                            </form>\r\n\r\n                            {/* <div className=\"shadow sm:rounded-md sm:overflow-hidden mt-3 lg:w-3/4 md:3/4 sm:w-full\">\r\n                                <div className=\"bg-white py-4 px-4 sm:p-6 dark:bg-darkOther-200\">\r\n                                    <div>\r\n                                        <label for=\"domain\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-400 select-none\">Dashboard Domain</label>\r\n                                        <div className=\"mt-1\">\r\n                                        <input type=\"text\" name=\"domain\" id=\"domain\" className=\"dark:text-other-100 dark:bg-darkOther-100 shadow-sm focus:ring-other-200 focus:border-other-200 dark:focus:ring-darkOther-200 dark:focus:border-darkOther-200 block w-1/2 text-md border-gray-300 rounded-md py-2\" placeholder=\"www.cookgroup.com\" aria-describedby=\"domain-description\" />\r\n                                        </div>\r\n                                        <p className=\"mt-2 text-sm text-gray-500 select-none\" id=\"accountName-description\">Don't include the https://</p>\r\n                                    </div>\r\n\r\n                                    <div className=\"text-right\">\r\n                                        <button className=\"text-other-200 text-sm font-medium bg-gray-200 rounded-lg py-2 px-8 text-right dark:bg-darkOther-100 dark:text-other-100\">Save</button>\r\n                                    </div>\r\n\r\n                                </div>\r\n                            </div> */}\r\n\r\n                            <form onSubmit={supportHandle}> \r\n                            <div className=\"shadow-lg sm:rounded-md sm:overflow-hidden mt-3 lg:w-3/4 md:3/4 sm:w-full\">\r\n                                <div className=\"bg-white py-4 px-4 sm:p-6 dark:bg-darkOther-200\">\r\n                                    <div>\r\n                                        <label for=\"supportEmail\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-400 select-none\">Support email</label>\r\n                                        <div className=\"mt-1\">\r\n                                            <input type=\"text\" defaultValue={supportEmail} onChange={e => setSupportEmail(e.target.value)} className=\"dark:text-other-100 dark:bg-darkOther-100 shadow-sm focus:ring-other-200 focus:border-other-200 dark:focus:ring-darkOther-200 dark:focus:border-darkOther-200 block w-1/2 text-md border-gray-300 rounded-md py-2\" placeholder=\"help@cookgroup.com\" aria-describedby=\"supportEmail-description\" />\r\n                                        </div>\r\n                                        <p className=\"mt-2 text-sm text-gray-500 select-none\" id=\"supportEmail-description\">This will be displayed to all your users if they require assistance</p>\r\n                                    </div>\r\n\r\n                                    <div className=\"text-right\">\r\n                                        <button type=\"submit\" className=\"text-other-200 text-sm font-medium bg-gray-200 rounded-lg py-2 px-8 text-right dark:bg-darkOther-100 dark:text-other-100\">Save</button>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            </form>\r\n                            \r\n                        </section>\r\n\r\n                        <section aria-labelledby=\"section2\">\r\n                            <div className=\"shadow-lg sm:rounded-md sm:overflow-hidden mt-8 shadow-lg lg:w-3/4 md:3/4 sm:w-full\">\r\n                                <div className=\"bg-white py-4 px-4 sm:p-6 dark:bg-darkOther-200\">\r\n                                    <div>\r\n                                        <h1 className=\"text-lg font-medium text-other-300 dark:text-white select-none\">Branding Settings</h1>\r\n                                    </div>\r\n                                    </div>\r\n                            </div>\r\n\r\n                            <form onSubmit={logoHandle}> \r\n                            <div className=\"shadow-lg sm:rounded-md sm:overflow-hidden mt-3 lg:w-3/4 md:3/4 sm:w-full\">\r\n                                <div className=\"bg-white py-4 px-4 sm:p-6 dark:bg-darkOther-200\">\r\n                                    <div>\r\n                                        <label for=\"logo\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-400 select-none\">Logo</label>\r\n                                        <div className=\"mt-1\">\r\n                                        <input type=\"text\" defaultValue={imageURL} onChange={e => setImageURL(e.target.value)} className=\"dark:text-other-100 dark:bg-darkOther-100 shadow-sm focus:ring-other-200 focus:border-other-200 dark:focus:ring-darkOther-200 dark:focus:border-darkOther-200 block w-1/2 text-md border-gray-300 rounded-md py-2\" placeholder=\"hhttps://i.imgur.com/z78zpi3.png\" aria-describedby=\"logo-description\" />\r\n                                        </div>\r\n                                        <p className=\"mt-2 text-sm text-gray-500 select-none\" id=\"logo-description\">Enter an image URL here</p>\r\n                                    </div>\r\n                                    <div className=\"text-right\">\r\n                                        <button type=\"submit\" className=\"text-other-200 text-sm font-medium bg-gray-200 rounded-lg py-2 px-8 text-right dark:bg-darkOther-100 dark:text-other-100\">Save</button>\r\n                                    </div>\r\n\r\n                                </div>\r\n                            </div>\r\n                            </form>\r\n\r\n                            <form onSubmit={bgHandle}> \r\n                            <div className=\"shadow-lg sm:rounded-md sm:overflow-hidden mt-3 lg:w-3/4 md:3/4 sm:w-full\">\r\n                                <div className=\"bg-white py-4 px-4 sm:p-6 dark:bg-darkOther-200\">\r\n                                    <div>\r\n                                        <label for=\"logo\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-400 select-none\">Dashboard Background</label>\r\n                                        <div className=\"mt-1\">\r\n                                        <input type=\"text\" defaultValue={bgURL} onChange={e => setbgUrl(e.target.value)} className=\"dark:text-other-100 dark:bg-darkOther-100 shadow-sm focus:ring-other-200 focus:border-other-200 dark:focus:ring-darkOther-200 dark:focus:border-darkOther-200 block w-1/2 text-md border-gray-300 rounded-md py-2\" placeholder=\"https://i.imgur.com/z78zpi3.png\" aria-describedby=\"bg-description\" />\r\n                                        </div>\r\n                                        <p className=\"mt-2 text-sm text-gray-500 select-none\" id=\"logo-description\">Enter an image URL here</p>\r\n                                    </div>\r\n                                    <div className=\"text-right\">\r\n                                        <button type=\"submit\" className=\"text-other-200 text-sm font-medium bg-gray-200 rounded-lg py-2 px-8 text-right dark:bg-darkOther-100 dark:text-other-100\">Save</button>\r\n                                    </div>\r\n\r\n                                </div>\r\n                            </div>\r\n                            </form>\r\n\r\n                            <form onSubmit={descriptionHandle}> \r\n                            <div className=\"shadow-lg sm:rounded-md sm:overflow-hidden mt-3 lg:w-3/4 md:3/4 sm:w-full\">\r\n                                <div className=\"bg-white py-4 px-4 sm:p-6 dark:bg-darkOther-200\">\r\n                                    <div>\r\n                                        <label for=\"logo\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-400 select-none\">Description</label>\r\n                                        <div className=\"mt-1\">\r\n                                        <input type=\"text\" defaultValue={description} onChange={e => setDescription(e.target.value)} className=\"dark:text-other-100 dark:bg-darkOther-100 shadow-sm focus:ring-other-200 focus:border-other-200 dark:focus:ring-darkOther-200 dark:focus:border-darkOther-200 block w-1/2 text-md border-gray-300 rounded-md py-2\" placeholder=\"\" aria-describedby=\"bg-description\" />\r\n                                        </div>\r\n                                        <p className=\"mt-2 text-sm text-gray-500 select-none\" id=\"logo-description\">A brief description or moto. Will be displayed on the home page and in receipts.</p>\r\n                                    </div>\r\n                                    <div className=\"text-right\">\r\n                                        <button type=\"submit\" className=\"text-other-200 text-sm font-medium bg-gray-200 rounded-lg py-2 px-8 text-right dark:bg-darkOther-100 dark:text-other-100\">Save</button>\r\n                                    </div>\r\n\r\n                                </div>\r\n                            </div>\r\n                            </form>\r\n                        </section>\r\n\r\n\r\n                        <section aria-labelledby=\"section3\">\r\n                            <div className=\"shadow-lg sm:rounded-md sm:overflow-hidden mt-8 shadow-lg lg:w-3/4 md:3/4 sm:w-full\">\r\n                                <div className=\"bg-white py-4 px-4 sm:p-6 dark:bg-darkOther-200\">\r\n                                    <div>\r\n                                        <h1 className=\"text-lg font-medium text-other-300  dark:text-white select-none\">Stripe Settings</h1>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"shadow-lg sm:rounded-md sm:overflow-hidden mt-3 lg:w-3/4 md:3/4 sm:w-full\">\r\n                                <div className=\"bg-white py-4 px-4 sm:p-6 dark:bg-darkOther-200\">\r\n                                    <div>\r\n                                        <label for=\"failePayments\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-400 select-none\">Setup Stripe Intergation</label>\r\n                                        <div className=\"mt-1\">\r\n                                            <button onClick={openIntergrate}  className=\"bg-other-200 dark:bg-darkOther-100 rounded-sm w-24 h-10 text-white text-md font-medium px-6 hover:bg-other-300\">\r\n                                                <FaStripe className=\"h-10 w-12\"/>\r\n                                            </button>\r\n                                        </div>\r\n                                        <p className=\"mt-2 text-sm text-gray-500 select-none\" id=\"failePayments-description \">Link you stripe account...</p>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <form onSubmit={failedPaymentHandle}> \r\n                            <div className=\"shadow-lg sm:rounded-md sm:overflow-hidden mt-3 lg:w-3/4 md:3/4 sm:w-full mb-12\">\r\n                                <div className=\"bg-white py-4 px-4 sm:p-6 dark:bg-darkOther-200\">\r\n                                    <div>\r\n                                        <label for=\"failePayments\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-400 select-none\">Manage Failed Payments</label>\r\n                                        <div className=\"mt-1\">\r\n                                            <Select defaultValue={failedPaymentOptions[3]} id=\"type\" value={failedPayment} name=\"intervalType\" options={failedPaymentOptions} placeholder=\"Failed Payment\" \r\n                                            className=\"py-5 text-gray-800 font-medium focus:ring-other-200 focus:border-other-200 dark:focus:ring-darkOther-200 dark:focus:border-darkOther-200 dark:text-white relative block w-1/2 rounded-none rounded-t-md bg-transparent focus:z-10 sm:text-sm border-gray-300\"\r\n                                            onChange={e => setFailedPayments(e.value)} value={failedPaymentOptions.filter(function(failedPaymentOptions) {return failedPaymentOptions.value === failedPayment})}/>\r\n                                        </div>\r\n                                        <p className=\"mt-2 text-sm text-gray-500 select-none\" id=\"failePayments-description\">Select how you want to deal with failed payments from users</p>\r\n                                    </div>\r\n                                    <div className=\"text-right\" >\r\n                                        <button type=\"submit\" className=\"text-other-200 text-sm font-medium bg-gray-200 rounded-lg py-2 px-8 text-right dark:bg-darkOther-100 dark:text-other-100\">Save</button>\r\n                                    </div>\r\n\r\n                                </div>\r\n                            </div>\r\n                            </form>\r\n                        \r\n                        </section>\r\n\r\n                    </div>\r\n\r\n                </div>\r\n                </main>\r\n                </div> : \r\n                \r\n                <div className=\"m-auto\">\r\n                        \r\n                    <BounceLoader color={'#302f2f'} loading={true} size={25} />\r\n                        \r\n                    </div> \r\n                }\r\n            \r\n            </>\r\n        )\r\n\r\n}\r\n\r\nexport default Settings","E:\\dashboard-react\\src\\components\\home\\planTable.js",["144"],"E:\\dashboard-react\\src\\components\\home\\restockTable.js",["145"],"E:\\dashboard-react\\src\\components\\siteHomePage\\home.js",["146","147","148"],"E:\\dashboard-react\\src\\components\\userDashboard\\dashboard.js",["149","150","151","152","153","154","155"],"E:\\dashboard-react\\src\\components\\bindPage\\bindPage.js",["156","157"],"import '../../static/styles/main.css'; \r\nimport React, { useState, useEffect } from 'react';\r\nimport UserNav from '../userNav'\r\nimport { IoKeyOutline } from 'react-icons/io5'\r\nimport { BiLogInCircle } from 'react-icons/bi'\r\nimport { FaUserCircle } from 'react-icons/fa'\r\nimport  { useHistory  } from 'react-router-dom'\r\n\r\nconst BindPage = () => {\r\n    let history = useHistory()\r\n    const [name, setName] = useState(\"\")\r\n    const [discrim, setDiscrim] = useState(\"\")\r\n    const [key, setKey] = useState(\"\")\r\n    const [discordImage, setDiscordImage] = useState(\"\")\r\n    const [loaded, setLoaded] = useState(false)\r\n\r\n    async function fetchData(){\r\n        const res = await fetch('/discord/data');\r\n        res.json()\r\n        .then(res => {\r\n            setDiscordImage(res.discordImage)\r\n            setName(res.name)\r\n            setDiscrim(res.discrim)\r\n            setLoaded(true)\r\n        })\r\n        .catch(err =>  {\r\n            if(res.status == 403) history.push('/discord/oauth')\r\n        });\r\n        \r\n        \r\n    }\r\n\r\n    useEffect(() =>{\r\n        const abortController = new AbortController();\r\n        fetchData()\r\n\r\n\r\n        return () => {\r\n            abortController.abort();\r\n        };\r\n\r\n    }, [])\r\n\r\n    \r\n    const submitHandler = async (e) => {\r\n        e.preventDefault()\r\n\r\n        if(key.length > 0) {\r\n            var response = await fetch('/users/bind', {\r\n                method:'post',\r\n                body:JSON.stringify({\r\n                    key:key\r\n                }),\r\n                \"headers\": {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            })\r\n            if(response.ok) {\r\n                setKey(\"\")\r\n                history.push('/dashboard')\r\n\r\n            \r\n            }else{\r\n                return\r\n            }\r\n        }\r\n        else{\r\n            return;\r\n        }\r\n    }\r\n\r\n        return (\r\n            <>\r\n                {/* <UserNav /> */}\r\n                <div className=\"flex flex-col w-0 flex-1 overflow-y-auto\">\r\n                    <UserNav />\r\n                    <div className=\"m-auto\">\r\n\r\n                        <div class=\"bg-white overflow-hidden shadow rounded-lg divide-y divide-gray-200\">\r\n                            <div class=\"px-4 py-5 sm:px-6\">\r\n                                <h1 className=\"text-lg font-medium text-gray-700\">Bind License</h1>\r\n                            </div>\r\n                            <div class=\"px-4 py-5 sm:p-6\">\r\n\r\n                                {loaded ? <div className=\"mt-1 relative\">\r\n\r\n                                <div className=\"pl-3 flex items-center\">\r\n\r\n                                    {discordImage ? <img src={discordImage} className=\"rounded-full h-16 w-auto text-other-200 font-medium\" alt=\"\"/> : <FaUserCircle className=\"h-14 w-auto text-other-200 font-medium\"/>}\r\n\r\n                                    <h1 className=\"font-medium text-gray-900 text-2xl ml-3\">{name}</h1>#<p className=\"font-normal text-other-200 text-md\">{discrim}</p>\r\n\r\n                                </div>\r\n\r\n\r\n                                </div> : <div className=\"pl-3 flex items-center\">\r\n\r\n                                {discordImage ? <img src={discordImage} className=\"rounded-full h-16 w-auto text-other-200 font-medium\" alt=\"\"/> : <FaUserCircle className=\"h-14 w-auto text-other-200 font-medium\"/>}\r\n\r\n                                <h1 className=\"font-medium text-gray-900 text-2xl ml-3\">Loading...</h1>\r\n\r\n                                </div>\r\n\r\n                                }\r\n                                                                \r\n\r\n                                <div>\r\n                                    <form onSubmit={submitHandler}>\r\n                                    <div class=\"mt-1 flex rounded-md shadow-sm\">\r\n\r\n                                        <div class=\"relative flex items-stretch flex-grow focus-within:z-10\">\r\n                                            <div class=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\r\n                                                <IoKeyOutline className=\"h-5 w-5 text-gray-400\"/>\r\n                                            </div>\r\n\r\n                                        \r\n                                            <input value={key} onChange={e => setKey(e.target.value)} type=\"text\" name=\"key\" id=\"key\" autoComplete=\"off\" class=\"focus:ring-indigo-500 focus:border-indigo-500 block w-full rounded-none rounded-l-md pl-10 sm:text-sm border-gray-300\" placeholder=\"XXX-XXX-XXX-XXX-XXX\" />\r\n                                        </div>\r\n\r\n                                        <button type=\"submit\" class=\"-ml-px relative inline-flex items-center space-x-2 px-4 py-2 border border-gray-300 text-sm font-medium rounded-r-md text-gray-700 bg-gray-50 hover:bg-gray-100 focus:outline-none focus:ring-1 focus:ring-indigo-500 focus:border-indigo-500\">\r\n                \r\n                                        <BiLogInCircle className=\"h-5 w-5 text-gray-400\"/>\r\n\r\n                                        <span>Bind Key</span>\r\n\r\n                                        </button>\r\n\r\n                                    </div>\r\n                                    </form>\r\n                                </div>\r\n\r\n\r\n\r\n                                \r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                </div>\r\n\r\n\r\n            </>\r\n        );\r\n\r\n}\r\n\r\nexport default BindPage;\r\n","E:\\dashboard-react\\src\\components\\userNav.js",["158","159"],"E:\\dashboard-react\\src\\components\\home\\planEditModal.js",["160","161","162","163"],"import '../../static/styles/main.css'; \r\nimport React, { useEffect, useState } from 'react';\r\nimport Select from 'react-select';\r\nimport makeAnimated from 'react-select/animated';\r\nimport chroma from 'chroma-js';\r\nimport { Switch } from '@headlessui/react'\r\n\r\n\r\nimport { AiOutlineClose } from 'react-icons/ai';\r\nimport { IoPricetagOutline } from 'react-icons/io5';\r\n\r\n\r\n\r\nconst PlanEditModal = (currentPlanData) => {\r\n\r\n    const [availableRoles, setavailableRoles] = useState([])\r\n    const [planName, setplanName] = useState(\"\")\r\n    const [planRole, setplanRole] = useState()\r\n    const [unbinding, setunbinding] = useState(true)\r\n\r\n    async function fetchPlans(){\r\n        const res = await fetch('/discord/guild/roles');\r\n        res.json()\r\n        .then(res => {\r\n            var currentRoles = JSON.parse(JSON.stringify(currentPlanData.role))\r\n            setavailableRoles(res.roles)\r\n\r\n            setplanRole(currentRoles)\r\n        })\r\n        .catch(err =>  {console.log(err)});\r\n        \r\n    }\r\n\r\n    useEffect(() =>{\r\n        const abortController = new AbortController();\r\n        fetchPlans()\r\n\r\n\r\n\r\n        return () => {\r\n            abortController.abort();\r\n        };\r\n\r\n    }, [])\r\n\r\n    const colourStyles = {\r\n        control: styles => ({ ...styles, backgroundColor: localStorage.getItem('mode') }),\r\n        option: (styles, { data, isDisabled, isFocused, isSelected }) => {\r\n          const color = chroma(data.color);\r\n          return {\r\n            ...styles,\r\n            backgroundColor: isDisabled\r\n              ? null\r\n              : isSelected\r\n              ? data.color\r\n              : isFocused\r\n              ? color.alpha(0.1).css()\r\n              : null,\r\n            color: isDisabled\r\n              ? '#ccc'\r\n              : isSelected\r\n              ? chroma.contrast(color, 'white') > 2\r\n                ? 'white'\r\n                : 'black'\r\n              : data.color,\r\n            cursor: isDisabled ? 'not-allowed' : 'default',\r\n      \r\n            ':active': {\r\n              ...styles[':active'],\r\n              backgroundColor:\r\n                !isDisabled && (isSelected ? data.color : color.alpha(0.3).css()),\r\n            },\r\n          };\r\n        },\r\n        multiValue: (styles, { data }) => {\r\n          const color = chroma(data.color);\r\n          return {\r\n            ...styles,\r\n            backgroundColor: color.alpha(0.1).css(),\r\n          };\r\n        },\r\n        multiValueLabel: (styles, { data }) => ({\r\n          ...styles,\r\n          color: data.color,\r\n        }),\r\n        multiValueRemove: (styles, { data }) => ({\r\n          ...styles,\r\n          color: data.color,\r\n          ':hover': {\r\n            backgroundColor: data.color,\r\n            color: 'white',\r\n          },\r\n        }),\r\n      };\r\n    const colourStyle = {\r\n        control: styles => ({ ...styles, backgroundColor: localStorage.getItem('mode') }),\r\n\r\n    }\r\n\r\n\r\n    \r\n    const submitHandler = async (e) => {\r\n        e.preventDefault()\r\n\r\n        if(planName.length > 0) {\r\n            var response = await fetch('/plans/add', {\r\n                method:'post',\r\n                body:JSON.stringify({\r\n                    \r\n                }),\r\n                \"headers\": {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            })\r\n            if(response.ok) {\r\n\r\n                return\r\n            }else{\r\n                return\r\n            }\r\n        }\r\n        else{\r\n            return;\r\n        }\r\n    }\r\n\r\n        \r\n        return (\r\n                <div className=\"fixed z-10 inset-0 overflow-y-auto hidden\" id=\"plan-modal-edit\">\r\n            \r\n                    <form onSubmit={submitHandler}>\r\n                        <div className=\"flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0\">\r\n\r\n                            <div className=\"fixed inset-0 transition-opacity\" aria-hidden=\"true\">\r\n                                <div className=\"absolute inset-0 bg-gray-500 opacity-75\"></div>\r\n                            </div>\r\n                \r\n                            <span className=\"hidden sm:inline-block sm:align-middle sm:h-screen\" aria-hidden=\"true\">&#8203;</span>\r\n\r\n            \r\n                            <div className=\"inline-block align-bottom bg-white rounded-lg px-4 pt-5 pb-4 text-left shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-sm sm:w-full sm:p-6 dark:bg-darkOther-200\" role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"modal-headline\">\r\n                        \r\n                                <div>\r\n                                    <button type=\"button\" onClick={() => {\r\n                                        document.querySelector('#plan-modal-edit').classList.contains('hidden') ? document.querySelector('#plan-modal-edit').classList.remove('hidden') : document.querySelector('#plan-modal-edit').classList.add('hidden')\r\n                                    }}><AiOutlineClose className=\"text-red-500 h-6 w-6 \" id='hide' /></button>\r\n\r\n\r\n                                    <div className=\"mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-green-100\">\r\n            \r\n                                    \r\n                                    <IoPricetagOutline className=\"h-6 w-6 text-green-600 select-none\" id='hide'/>\r\n                                </div>\r\n        \r\n\r\n                                <div className=\"mt-3 text-center sm:mt-5\">  \r\n                                    <h3 className=\"text-lg leading-6 font-medium text-gray-900 dark:text-white select-none\" id=\"modal-headline\">\r\n                                    Edit Plan\r\n                                    </h3>\r\n        \r\n                                    <div className=\"mt-2\">\r\n                                        \r\n                                        <div>\r\n\r\n                                            <fieldset className=\"mt-2 bg-white dark:bg-darkOther-200\">\r\n                                                <div className=\"md:grid md:grid-cols-2\">\r\n                                                <div className=\"\">\r\n                                                        <legend className=\"block text-sm font-medium text-gray-700 text-left dark:text-gray-300 select-none\">Plan Name</legend>\r\n                                                        <div className=\"mt-1 rounded-md shadow-sm -space-y-px\">\r\n                                                            <div>\r\n                                                            <label className=\"block text-sm font-medium text-gray-700\"></label>\r\n                                                            <input  name=\"planName\" id=\"name\" autoComplete=\"off\" className=\"dark:text-white dark:bg-darkOther-200 focus:ring-other-200 focus:border-other-200 block w-full font-medium text-md rounded-md py-2 dark:focus:ring-darkOther-200 dark:focus:border-darkOther-200\" \r\n                                                            placeholder=\"Member\" value={currentPlanData.planName} onChange={e => setplanName(e.target.value)} />                                                         \r\n                                                            \r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                    \r\n                                                    <div className=\"\">\r\n                                                        <legend className=\"block text-sm font-medium text-gray-700 text-left dark:text-gray-300 select-none\">Type</legend>\r\n                                                        <div className=\"mt-1 rounded-md shadow-sm -space-y-px\">\r\n                                                            <div>\r\n                                                                <label className=\"sr-only\">type</label>\r\n                                                                \r\n                                                                <Select isDisabled defaultValue={{\"label\":currentPlanData.type, \"value\":currentPlanData.type}} styles={colourStyle} placeholder=\"Plan Type\" id=\"type\" name=\"planType\" className=\"focus:ring-other-200 focus:border-other-200 relative block w-full rounded-none rounded-t-md bg-transparent focus:z-10 font-medium text-md dark:focus:border-darkOther-200 dark:focus:ring-darkOther-200\"/>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                \r\n                                                </div>\r\n                \r\n                                            </fieldset>\r\n\r\n                                            {currentPlanData.type == \"recurring\" ?  <fieldset className=\"mt-2 bg-white dark:bg-darkOther-200\">\r\n                                                <div className=\"md:grid md:grid-cols-2\">\r\n                                                <div className=\"\">\r\n                                                        <legend className=\"block text-sm font-medium text-gray-700 text-left dark:text-gray-300 select-none\">Interval</legend>\r\n                                                        <div className=\"mt-1 rounded-md shadow-sm -space-y-px\">\r\n                                                            <div className=\"mt-1 flex rounded-md shadow-sm -space-y-px\">\r\n                                                                <span className=\"inline-flex items-center px-3 rounded-l-md border-r-2 border-gray-200 bg-gray-50 text-gray-800 sm:text-sm mr-2 dark:bg-darkOther-100 dark:text-white select-none\">\r\n                                                                    every\r\n                                                                </span>\r\n                                                                <input isDisabled name=\"interval\" id=\"interval\" type=\"text\" placeholder=\"Count\" autoComplete=\"off\" className=\"dark:text-white dark:bg-darkOther-200 block w-full font-medium text-md rounded-md py-2 \" value={currentPlanData.interval}/>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                    \r\n                                                    <div className=\"\">\r\n                                                        <legend className=\"block text-sm font-medium text-gray-700 text-left dark:text-gray-300 select-none\">Interval Type</legend>\r\n                                                        <div className=\"mt-1 rounded-md shadow-sm -space-y-px\">\r\n                                                            <div>\r\n                                                                <label className=\"sr-only select-none\">Interval Type</label>\r\n                                                                \r\n                                                                <Select isDisabled styles={colourStyle} id=\"type\" defaultValue={{\"label\":currentPlanData.intervalType, \"value\":currentPlanData.intervalType}}  name=\"intervalType\" placeholder=\"Interval\" \r\n                                                                className=\"focus:ring-other-200 focus:border-other-200 relative block w-full rounded-none rounded-t-md focus:z-10 font-medium text-md dark:focus:border-darkOther-200 dark:focus:ring-darkOther-200\"/>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                \r\n                                                </div>\r\n                \r\n                                            </fieldset> : <div></div> }\r\n\r\n                           \r\n                                        \r\n\r\n                                            <fieldset className=\"mt-4 bg-white dark:bg-darkOther-200\">\r\n                                                <legend className=\"block text-sm font-medium text-gray-700 text-left dark:text-gray-300 select-none\">Price</legend>\r\n                                                <div className=\"mt-1 bg-white rounded-md shadow-sm dark:bg-darkOther-200\">\r\n                                                    <div>\r\n                                                        <div className=\"mt-1 relative rounded-md shadow-sm\">\r\n                                                            <input isDisabled type=\"text\" name=\"price\" id=\"price\" className=\"dark:text-white dark:bg-darkOther-200 focus:ring-other-200 focus:border-other-200 block w-full font-medium text-md  rounded-md py-2 dark:focus:border-darkOther-200 dark:focus:ring-darkOther-200\" \r\n                                                            placeholder=\"0.00\" value={currentPlanData.price}/>\r\n\r\n                                                            <div className=\"absolute inset-y-0 right-0 flex items-center\">\r\n                                                                <label className=\"sr-only\">Currency</label>\r\n                                                                <Select isDisabled styles={colourStyle}  id=\"type\" name=\"priceCurrency\" placeholder=\"Currency\" className=\"px-3 w-48 dark:bg-darkOther-200\"\r\n                                                                defaultValue={{\"label\":currentPlanData.currency, \"value\":currentPlanData.currency}}/>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </div>\r\n                                            \r\n                                            </fieldset>\r\n        \r\n                                            <fieldset className=\"mt-2 bg-whit dark:bg-darkOther-200\" id=\"interval-fieldset\">\r\n                                                    <div className=\"\">\r\n                                                        <legend className=\"block text-sm font-medium text-gray-700 text-left dark:text-gray-300 select-none\">Roles</legend>\r\n                                                        <div className=\"mt-1 rounded-md shadow-sm -space-y-px\">\r\n                                                            <div>\r\n                                                                <label className=\"sr-only\">roles</label>\r\n                                                                <Select id=\"roles\" defaultValue={JSON.parse(currentPlanData.role)} isMulti placeholder=\"Roles\" name=\"roles\" closeMenuOnSelect={false} styles={colourStyles} name=\"planRole\" isSearchable components={makeAnimated()} options={availableRoles} className=\"focus:ring-other-200 focus:border-other-200 relative block w-full rounded-none rounded-t-md bg-transparent focus:z-10 font-medium text-md dark:focus:border-darkOther-200 dark:focus:ring-darkOther-200\"\r\n                                                                    onChange={e => setplanRole(e)} />\r\n                                                                                                                                    \r\n                                                            \r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                            \r\n                                            </fieldset>\r\n\r\n                                            <fieldset className=\"mt-2 bg-white dark:bg-darkOther-200\" id=\"interval-fieldset\">\r\n                                                    <div className=\"\">\r\n                                                        <legend className=\"block text-sm font-medium text-gray-700 text-left dark:text-gray-300 select-none\">{unbinding ? \"Unbinding Enabled\" : \"Unbinding Disabled\"}</legend>\r\n                                                        <div className=\"mt-1 rounded-md shadow-sm -space-y-px\">\r\n                                                            <div className=\"text-left\">\r\n                                                                <label className=\"sr-only\">allow unbinding</label>\r\n                                                                <Switch \r\n                                                                checked={unbinding}\r\n                                                                onChange={e => setunbinding(e)}\r\n                                                                as=\"button\" \r\n                                                                className={`${unbinding ? \"bg-green-400\" : \"bg-gray-200\"} relative inline-flex flex-shrink-0 h-6 w-11 border-2 border-transparent rounded-full cursor-pointer transition-colors ease-in-out duration-200 focus:outline-none`}>\r\n\r\n                                                                    {unbinding ? \r\n                                                                    <span aria-hidden=\"true\" className=\"pointer-events-none translate-x-0 inline-block h-5 w-5 rounded-full bg-white shadow transform ring-0 transition ease-in-out duration-200\"></span> : \r\n                                                                    <span aria-hidden=\"true\" className=\"pointer-events-none translate-x-5 inline-block h-5 w-5 rounded-full bg-white shadow transform ring-0 transition ease-in-out duration-200\"></span>\r\n                                                                    }\r\n\r\n                                                                </Switch>\r\n                                                                            \r\n                                                                                                                                    \r\n                                                            \r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                            \r\n                                            </fieldset>\r\n        \r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"mt-5 sm:mt-6\">\r\n                                <button  name=\"license-modal\" type=\"submit\" className=\"inline-flex justify-center w-full rounded-md border border-transparent shadow-sm px-4 py-2 bg-blue-500 text-base font-medium text-white hover:bg-other-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-other-200 sm:text-sm dark:focus:ring-darkOther-200 dark:hover:bg-darkOther-200 dark:bg-darkOther-100\">\r\n                                    Update\r\n                                </button>\r\n                            </div>\r\n\r\n                        </div>\r\n                    \r\n                    </div>\r\n                    </form>\r\n            </div>\r\n\r\n        )\r\n\r\n}\r\nexport default PlanEditModal","E:\\dashboard-react\\src\\components\\purchasePage\\purchase.js",["164","165","166","167","168","169"],"E:\\dashboard-react\\src\\components\\purchasePage\\checkout.js",["170","171","172","173","174","175","176"],"import React, {useState, useEffect} from 'react';\r\nimport BeatLoader from \"react-spinners/BeatLoader\";\r\n\r\nimport {HiOutlineMail} from 'react-icons/hi'\r\nimport {loadStripe} from '@stripe/stripe-js';\r\nimport {\r\n  CardElement,\r\n  Elements,\r\n  useStripe,\r\n  useElements,\r\n} from '@stripe/react-stripe-js';\r\n\r\n\r\n\r\nconst CheckoutForm = () => {\r\n    const stripe = useStripe();\r\n    const elements = useElements();\r\n    const [checkoutStatus, setCheckoutStatus] = useState(\"idle\")\r\n    const [email, setEmail] = useState(\"\")\r\n    const [key, setKey] = useState(\"\")\r\n    const [availableStock, setAvailableStock] = useState(false)\r\n    const [pricingDetails, setPricingDetails] = useState(\"\")\r\n\r\n    async function fetchData(){\r\n        const res = await fetch('/restocks/data/' + localStorage.getItem('pswd'));\r\n        res.json()\r\n        .then(res => {\r\n            setAvailableStock(res.availableStock)\r\n            setPricingDetails(res.pricingDetails)\r\n        })\r\n        .catch(err =>  {\r\n            setAvailableStock(false)\r\n        });\r\n        \r\n    }\r\n\r\n    useEffect(() =>{\r\n        const abortController = new AbortController();\r\n        fetchData()\r\n\r\n\r\n        return () => {\r\n            abortController.abort();\r\n        };\r\n\r\n    }, [])\r\n\r\n\r\n\r\n\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n        if (['success','pending'].includes(checkoutStatus)) {\r\n            console.log(\"\")\r\n        }\r\n        else {\r\n\r\n            const {error, paymentMethod} = await stripe.createPaymentMethod({\r\n                type: 'card',\r\n                card: elements.getElement(CardElement),\r\n            });\r\n            if(error) {\r\n                setCheckoutStatus(\"failed\")\r\n            }\r\n\r\n            setCheckoutStatus(\"pending\")\r\n            var response = await fetch('/stripe/checkout', {\r\n                method:'post',\r\n                body:JSON.stringify({\r\n                    paymentMethod:paymentMethod,\r\n                    password:localStorage.getItem('pswd'),\r\n                    email:email\r\n                }),\r\n                \"headers\": {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            })\r\n            if(response.ok) {\r\n                if(response.status == 200) {\r\n                    setCheckoutStatus(\"success\")\r\n                    //setKey(await response.json().key)\r\n                }\r\n                else setCheckoutStatus(\"failed\")\r\n\r\n            } else {\r\n\r\n                setCheckoutStatus(\"failed\")\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <div className=\"w-full text-center\">\r\n            {availableStock ? <form onSubmit={handleSubmit}>\r\n\r\n                <fieldset>\r\n                <CardElement options={{\r\n                    style: {\r\n                    base: {\r\n                        fontSize: '16px',\r\n                        color: '#aab7c4',\r\n                        '::placeholder': {\r\n                        color: '#aab7c4',\r\n                        },\r\n                    },\r\n                    invalid: {\r\n                        color: '#9e2146',\r\n                    },\r\n                    },\r\n                }}/>\r\n                </fieldset>\r\n\r\n                <fieldset >\r\n                {/* <HiOutlineMail/> */}\r\n                    <div class=\"mt-3 relative rounded-md border-0\">\r\n                        <div class=\"absolute inset-y-0 left-0 flex items-center pointer-events-none\">\r\n                        <HiOutlineMail class=\"h-6 w-6 text-gray-400\"/>\r\n                        </div>\r\n                        <input type=\"text\" className=\"focus:outline-none md:text-md lg:text-md font-normal text-gray-500 w-full pl-8 sm:text-sm rounded-md p-3\" placeholder=\"email\" onChange={e => setEmail(e.target.value)} />\r\n                    </div>\r\n                </fieldset>\r\n                <p className=\"text-xs text-gray-400 font-medium select-none\">{pricingDetails}</p>\r\n\r\n                {\r\n                    checkoutStatus == \"idle\" ? <button type=\"submit\" disabled={!stripe} className=\"duration-150 transform hover:scale-105 motion-reduce:transform-none font-medium text-md rounded-md text-white bg-other-900 p-2 px-5 text-center mt-12\">Purchase Now</button> : \r\n                    checkoutStatus == \"failed\" ? <button type=\"submit\" disabled={!stripe} className=\"font-medium text-md rounded-md text-white bg-red-500 p-2 px-5 text-center mt-12\">Checkout Failed</button> :\r\n                    checkoutStatus == \"success\" ? <button type=\"submit\" disabled={!stripe} className=\"font-medium text-md rounded-md text-white bg-green-500 p-2 px-5 text-center mt-12\">Purchased</button> : \r\n                    checkoutStatus == \"pending\" ? <button type=\"submit\" disabled={!stripe} className=\"font-medium text-md rounded-md text-white bg-yellow-500 p-2 px-5 text-center mt-12\"><BeatLoader color={'#ffffff'} loading={true} size={10} /> </button> :\r\n                    <button type=\"submit\" disabled={!stripe} className=\"font-medium text-md rounded-md text-white bg-blue-500 p-2 px-5 text-center mt-12\">Purchase Now</button>     \r\n                }\r\n\r\n                </form> : <button type=\"submit\" className=\"font-medium text-md rounded-md text-white bg-red-500 p-2 px-5 text-center mt-12\">Sold Out</button>\r\n\r\n            }\r\n        </div>\r\n            \r\n    );\r\n};\r\n\r\nconst stripePromise = loadStripe('pk_test_yNOrvYEsFI7fmUNnIhuwUrFF00hyizaNIs');\r\n\r\nconst Checkout = () => (\r\n  <Elements stripe={stripePromise}>\r\n    <CheckoutForm />\r\n  </Elements>\r\n);\r\n\r\nexport default Checkout",{"ruleId":"177","replacedBy":"178"},{"ruleId":"179","replacedBy":"180"},{"ruleId":"181","severity":1,"message":"182","line":2,"column":49,"nodeType":"183","messageId":"184","endLine":2,"endColumn":60},{"ruleId":"181","severity":1,"message":"185","line":2,"column":28,"nodeType":"183","messageId":"184","endLine":2,"endColumn":37},{"ruleId":"181","severity":1,"message":"186","line":21,"column":43,"nodeType":"183","messageId":"184","endLine":21,"endColumn":45},{"ruleId":"187","severity":1,"message":"188","line":46,"column":8,"nodeType":"189","endLine":46,"endColumn":10,"suggestions":"190"},{"ruleId":"181","severity":1,"message":"191","line":2,"column":19,"nodeType":"183","messageId":"184","endLine":2,"endColumn":23},{"ruleId":"187","severity":1,"message":"192","line":18,"column":5,"nodeType":"183","endLine":18,"endColumn":14,"suggestions":"193"},{"ruleId":"187","severity":1,"message":"194","line":18,"column":16,"nodeType":"195","endLine":27,"endColumn":6},{"ruleId":"196","severity":1,"message":"197","line":26,"column":28,"nodeType":"198","messageId":"199","endLine":26,"endColumn":30},{"ruleId":"196","severity":1,"message":"197","line":30,"column":14,"nodeType":"198","messageId":"199","endLine":30,"endColumn":16},{"ruleId":"200","severity":1,"message":"201","line":69,"column":108,"nodeType":"202","endLine":69,"endColumn":121},{"ruleId":"200","severity":1,"message":"201","line":141,"column":108,"nodeType":"202","endLine":141,"endColumn":121},{"ruleId":"196","severity":1,"message":"197","line":75,"column":56,"nodeType":"198","messageId":"199","endLine":75,"endColumn":58},{"ruleId":"203","severity":1,"message":"204","line":75,"column":238,"nodeType":"205","endLine":75,"endColumn":382},{"ruleId":"200","severity":1,"message":"201","line":220,"column":102,"nodeType":"202","endLine":220,"endColumn":191},{"ruleId":"196","severity":1,"message":"197","line":229,"column":55,"nodeType":"198","messageId":"199","endLine":229,"endColumn":57},{"ruleId":"196","severity":1,"message":"197","line":229,"column":82,"nodeType":"198","messageId":"199","endLine":229,"endColumn":84},{"ruleId":"200","severity":1,"message":"201","line":251,"column":106,"nodeType":"202","endLine":251,"endColumn":223},{"ruleId":"200","severity":1,"message":"201","line":298,"column":120,"nodeType":"202","endLine":298,"endColumn":226},{"ruleId":"181","severity":1,"message":"185","line":2,"column":27,"nodeType":"183","messageId":"184","endLine":2,"endColumn":36},{"ruleId":"181","severity":1,"message":"206","line":13,"column":20,"nodeType":"183","messageId":"184","endLine":13,"endColumn":29},{"ruleId":"181","severity":1,"message":"186","line":18,"column":39,"nodeType":"183","messageId":"184","endLine":18,"endColumn":41},{"ruleId":"187","severity":1,"message":"207","line":40,"column":8,"nodeType":"189","endLine":40,"endColumn":10,"suggestions":"208"},{"ruleId":"209","severity":1,"message":"210","line":74,"column":17,"nodeType":"211","messageId":"212","endLine":74,"endColumn":19},{"ruleId":"196","severity":1,"message":"197","line":124,"column":118,"nodeType":"198","messageId":"199","endLine":124,"endColumn":120},{"ruleId":"196","severity":1,"message":"197","line":125,"column":114,"nodeType":"198","messageId":"199","endLine":125,"endColumn":116},{"ruleId":"200","severity":1,"message":"201","line":170,"column":62,"nodeType":"202","endLine":170,"endColumn":72},{"ruleId":"196","severity":1,"message":"197","line":54,"column":48,"nodeType":"198","messageId":"199","endLine":54,"endColumn":50},{"ruleId":"196","severity":1,"message":"197","line":60,"column":51,"nodeType":"198","messageId":"199","endLine":60,"endColumn":53},{"ruleId":"196","severity":1,"message":"197","line":64,"column":49,"nodeType":"198","messageId":"199","endLine":64,"endColumn":51},{"ruleId":"196","severity":1,"message":"197","line":83,"column":38,"nodeType":"198","messageId":"199","endLine":83,"endColumn":40},{"ruleId":"200","severity":1,"message":"201","line":102,"column":66,"nodeType":"202","endLine":102,"endColumn":76},{"ruleId":"181","severity":1,"message":"213","line":29,"column":13,"nodeType":"183","messageId":"184","endLine":29,"endColumn":21},{"ruleId":"181","severity":1,"message":"213","line":32,"column":13,"nodeType":"183","messageId":"184","endLine":32,"endColumn":21},{"ruleId":"181","severity":1,"message":"213","line":35,"column":13,"nodeType":"183","messageId":"184","endLine":35,"endColumn":21},{"ruleId":"181","severity":1,"message":"213","line":38,"column":13,"nodeType":"183","messageId":"184","endLine":38,"endColumn":21},{"ruleId":"181","severity":1,"message":"213","line":41,"column":13,"nodeType":"183","messageId":"184","endLine":41,"endColumn":21},{"ruleId":"200","severity":1,"message":"201","line":255,"column":88,"nodeType":"202","endLine":255,"endColumn":209},{"ruleId":"187","severity":1,"message":"188","line":43,"column":8,"nodeType":"189","endLine":43,"endColumn":10,"suggestions":"214"},{"ruleId":"187","severity":1,"message":"215","line":42,"column":8,"nodeType":"189","endLine":42,"endColumn":10,"suggestions":"216"},{"ruleId":"187","severity":1,"message":"217","line":35,"column":8,"nodeType":"189","endLine":35,"endColumn":10,"suggestions":"218"},{"ruleId":"219","severity":1,"message":"220","line":46,"column":21,"nodeType":"205","endLine":46,"endColumn":33},{"ruleId":"221","severity":1,"message":"222","line":80,"column":58,"nodeType":"198","messageId":"223","endLine":80,"endColumn":59},{"ruleId":"181","severity":1,"message":"224","line":9,"column":8,"nodeType":"183","messageId":"184","endLine":9,"endColumn":18},{"ruleId":"181","severity":1,"message":"225","line":24,"column":12,"nodeType":"183","messageId":"184","endLine":24,"endColumn":22},{"ruleId":"181","severity":1,"message":"226","line":24,"column":24,"nodeType":"183","messageId":"184","endLine":24,"endColumn":37},{"ruleId":"196","severity":1,"message":"197","line":30,"column":24,"nodeType":"198","messageId":"199","endLine":30,"endColumn":26},{"ruleId":"196","severity":1,"message":"197","line":53,"column":27,"nodeType":"198","messageId":"199","endLine":53,"endColumn":29},{"ruleId":"187","severity":1,"message":"217","line":69,"column":8,"nodeType":"189","endLine":69,"endColumn":10,"suggestions":"227"},{"ruleId":"209","severity":1,"message":"210","line":77,"column":13,"nodeType":"211","messageId":"212","endLine":77,"endColumn":15},{"ruleId":"196","severity":1,"message":"197","line":27,"column":27,"nodeType":"198","messageId":"199","endLine":27,"endColumn":29},{"ruleId":"187","severity":1,"message":"217","line":42,"column":8,"nodeType":"189","endLine":42,"endColumn":10,"suggestions":"228"},{"ruleId":"187","severity":1,"message":"217","line":36,"column":8,"nodeType":"189","endLine":36,"endColumn":10,"suggestions":"229"},{"ruleId":"203","severity":1,"message":"204","line":48,"column":39,"nodeType":"205","endLine":48,"endColumn":102},{"ruleId":"181","severity":1,"message":"230","line":18,"column":12,"nodeType":"183","messageId":"184","endLine":18,"endColumn":20},{"ruleId":"187","severity":1,"message":"188","line":44,"column":8,"nodeType":"189","endLine":44,"endColumn":10,"suggestions":"231"},{"ruleId":"196","severity":1,"message":"197","line":194,"column":67,"nodeType":"198","messageId":"199","endLine":194,"endColumn":69},{"ruleId":"200","severity":1,"message":"201","line":252,"column":221,"nodeType":"202","endLine":252,"endColumn":236},{"ruleId":"181","severity":1,"message":"232","line":4,"column":10,"nodeType":"183","messageId":"184","endLine":4,"endColumn":22},{"ruleId":"181","severity":1,"message":"233","line":5,"column":10,"nodeType":"183","messageId":"184","endLine":5,"endColumn":23},{"ruleId":"181","severity":1,"message":"234","line":6,"column":10,"nodeType":"183","messageId":"184","endLine":6,"endColumn":22},{"ruleId":"196","severity":1,"message":"197","line":32,"column":27,"nodeType":"198","messageId":"199","endLine":32,"endColumn":29},{"ruleId":"196","severity":1,"message":"197","line":37,"column":27,"nodeType":"198","messageId":"199","endLine":37,"endColumn":29},{"ruleId":"187","severity":1,"message":"217","line":60,"column":8,"nodeType":"189","endLine":60,"endColumn":10,"suggestions":"235"},{"ruleId":"181","severity":1,"message":"236","line":20,"column":12,"nodeType":"183","messageId":"184","endLine":20,"endColumn":15},{"ruleId":"181","severity":1,"message":"237","line":20,"column":17,"nodeType":"183","messageId":"184","endLine":20,"endColumn":23},{"ruleId":"196","severity":1,"message":"197","line":80,"column":36,"nodeType":"198","messageId":"199","endLine":80,"endColumn":38},{"ruleId":"196","severity":1,"message":"197","line":127,"column":36,"nodeType":"198","messageId":"199","endLine":127,"endColumn":38},{"ruleId":"196","severity":1,"message":"197","line":128,"column":36,"nodeType":"198","messageId":"199","endLine":128,"endColumn":38},{"ruleId":"196","severity":1,"message":"197","line":129,"column":36,"nodeType":"198","messageId":"199","endLine":129,"endColumn":38},{"ruleId":"196","severity":1,"message":"197","line":130,"column":36,"nodeType":"198","messageId":"199","endLine":130,"endColumn":38},"no-native-reassign",["238"],"no-negated-in-lhs",["239"],"no-unused-vars","'useLocation' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'td' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchPlans'. Either include it or remove the dependency array.","ArrayExpression",["240"],"'Link' is defined but never used.","React Hook useEffect contains a call to 'setAppName'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [history] as a second argument to the useEffect Hook.",["241"],"Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'setLoaded' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchUsers'. Either include it or remove the dependency array.",["242"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'response' is assigned a value but never used.",["243"],"React Hook useEffect has a missing dependency: 'fetchRestocks'. Either include it or remove the dependency array.",["244"],"React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.",["245"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","'Background' is defined but never used.","'background' is assigned a value but never used.","'setBackground' is assigned a value but never used.",["246"],["247"],["248"],"'planRole' is assigned a value but never used.",["249"],"'IoKeyOutline' is defined but never used.","'BiLogInCircle' is defined but never used.","'FaUserCircle' is defined but never used.",["250"],"'key' is assigned a value but never used.","'setKey' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"251","fix":"252"},{"desc":"253","fix":"254"},{"desc":"255","fix":"256"},{"desc":"251","fix":"257"},{"desc":"258","fix":"259"},{"desc":"260","fix":"261"},{"desc":"260","fix":"262"},{"desc":"260","fix":"263"},{"desc":"260","fix":"264"},{"desc":"251","fix":"265"},{"desc":"260","fix":"266"},"Update the dependencies array to be: [fetchPlans]",{"range":"267","text":"268"},"Add dependencies array: [history]",{"range":"269","text":"270"},"Update the dependencies array to be: [fetchUsers]",{"range":"271","text":"272"},{"range":"273","text":"268"},"Update the dependencies array to be: [fetchRestocks]",{"range":"274","text":"275"},"Update the dependencies array to be: [fetchData]",{"range":"276","text":"277"},{"range":"278","text":"277"},{"range":"279","text":"277"},{"range":"280","text":"277"},{"range":"281","text":"268"},{"range":"282","text":"277"},[1293,1295],"[fetchPlans]",[1101,1101],", [history]",[898,900],"[fetchUsers]",[1065,1067],[1108,1110],"[fetchRestocks]",[973,975],"[fetchData]",[2970,2972],[1223,1225],[756,758],[1201,1203],[1634,1636]]