[{"E:\\dashboard-react\\src\\index.js":"1","E:\\dashboard-react\\src\\reportWebVitals.js":"2","E:\\dashboard-react\\src\\App.js":"3","E:\\dashboard-react\\src\\components\\users\\users.js":"4","E:\\dashboard-react\\src\\components\\home\\home.js":"5","E:\\dashboard-react\\src\\components\\adminNav.js":"6","E:\\dashboard-react\\src\\components\\adminSearch.js":"7","E:\\dashboard-react\\src\\components\\home\\planModal.js":"8","E:\\dashboard-react\\src\\components\\home\\restockModal.js":"9","E:\\dashboard-react\\src\\components\\licenses\\licenses.js":"10","E:\\dashboard-react\\src\\components\\licenses\\licenseModal.js":"11","E:\\dashboard-react\\src\\components\\licenses\\table.js":"12","E:\\dashboard-react\\src\\components\\users\\table.js":"13","E:\\dashboard-react\\src\\components\\settings\\settings.js":"14","E:\\dashboard-react\\src\\components\\home\\planTable.js":"15","E:\\dashboard-react\\src\\components\\home\\restockTable.js":"16","E:\\dashboard-react\\src\\components\\siteHomePage\\home.js":"17","E:\\dashboard-react\\src\\components\\userDashboard\\dashboard.js":"18","E:\\dashboard-react\\src\\components\\bindPage\\bindPage.js":"19","E:\\dashboard-react\\src\\components\\userNav.js":"20","E:\\dashboard-react\\src\\components\\home\\planEditModal.js":"21","E:\\dashboard-react\\src\\components\\purchasePage\\purchase.js":"22","E:\\dashboard-react\\src\\components\\purchasePage\\checkout.js":"23"},{"size":265,"mtime":1611228962182,"results":"24","hashOfConfig":"25"},{"size":362,"mtime":1611220658625,"results":"26","hashOfConfig":"25"},{"size":1447,"mtime":1612543842334,"results":"27","hashOfConfig":"25"},{"size":4506,"mtime":1612137887206,"results":"28","hashOfConfig":"25"},{"size":8737,"mtime":1612654406979,"results":"29","hashOfConfig":"25"},{"size":13346,"mtime":1612656857898,"results":"30","hashOfConfig":"25"},{"size":6163,"mtime":1611964426451,"results":"31","hashOfConfig":"25"},{"size":24503,"mtime":1612624929148,"results":"32","hashOfConfig":"25"},{"size":9691,"mtime":1612620285171,"results":"33","hashOfConfig":"25"},{"size":5793,"mtime":1612547354388,"results":"34","hashOfConfig":"25"},{"size":8996,"mtime":1612178535536,"results":"35","hashOfConfig":"25"},{"size":10480,"mtime":1612656440419,"results":"36","hashOfConfig":"25"},{"size":7439,"mtime":1612656873547,"results":"37","hashOfConfig":"25"},{"size":19090,"mtime":1612656069346,"results":"38","hashOfConfig":"25"},{"size":7626,"mtime":1612654426411,"results":"39","hashOfConfig":"25"},{"size":8151,"mtime":1612654432209,"results":"40","hashOfConfig":"25"},{"size":4723,"mtime":1612616666198,"results":"41","hashOfConfig":"25"},{"size":12398,"mtime":1612656155107,"results":"42","hashOfConfig":"25"},{"size":6299,"mtime":1612656170382,"results":"43","hashOfConfig":"25"},{"size":1315,"mtime":1612547820414,"results":"44","hashOfConfig":"25"},{"size":19386,"mtime":1612472173682,"results":"45","hashOfConfig":"25"},{"size":4765,"mtime":1612656177287,"results":"46","hashOfConfig":"25"},{"size":5540,"mtime":1612526629491,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"bywc2m",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"50"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"50"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"50"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"50"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"50"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"50"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"50"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"80","messages":"81","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"50"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"50"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"50"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"95","messages":"96","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"97","messages":"98","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"50"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"50"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"105","messages":"106","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"50"},"E:\\dashboard-react\\src\\index.js",[],["108","109"],"E:\\dashboard-react\\src\\reportWebVitals.js",[],"E:\\dashboard-react\\src\\App.js",["110"],"import './static/styles/main.css';\nimport {BrowserRouter as Router, Switch, Route, useLocation } from 'react-router-dom'\nimport React from 'react';\n\nimport Home from './components/home/home'\nimport Licenses from './components/licenses/licenses'\nimport Users from './components/users/users'\nimport Settings from './components/settings/settings'\nimport SiteHome from './components/siteHomePage/home'\nimport Dashboard from './components/userDashboard/dashboard'\nimport Bind from './components/bindPage/bindPage'\nimport PurchasePage from './components/purchasePage/purchase'\n\n\nconst App = () => { \n\n\n  return (\n    <div className=\"h-screen flex w-screen overflow-hidden bg-other-100 dark:bg-darkOther-100\" id=\"baseBackground\">\n\n      <Router>\n\n          {/* <div className=\"container mx-auto\"> */}\n            <Switch>\n              <Route exact path='/' component={SiteHome} />\n              <Route exact path='/dashboard' component={Dashboard} />\n              <Route exact path='/bind' component={Bind} />\n              <Route exact path='/purchase' component={PurchasePage} />\n\n              <Route exact path='/home' component={Home} />\n              <Route exact path='/licenses' component={Licenses}/>\n              <Route exact path='/users' component={Users}/>\n              <Route exact path='/settings' component={Settings}/>\n            </Switch>\n          {/* </div> */}\n        \n\n      </Router>\n\n    </div>\n  );\n\n}\n\nexport default App;\n","E:\\dashboard-react\\src\\components\\users\\users.js",["111","112"],"import '../../static/styles/main.css'; \r\nimport React, { Component, useEffect } from 'react';\r\nimport UserTable from './table';\r\nimport AdminNavigation from '../adminNav';\r\nimport AdminSearchbar from '../adminSearch';\r\n\r\nimport { AiOutlineSearch } from 'react-icons/ai';\r\n\r\n\r\nclass Users extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {}\r\n\r\n    }\r\n\r\n    \r\n\r\n    render() {\r\n        function filter() {\r\n            var input, filter, table, tr, td, i, txtValue;\r\n            input = document.getElementById(\"searchInput\");\r\n            filter = input.value.toUpperCase();\r\n            table = document.getElementById(\"table\");\r\n            tr = table.getElementsByTagName(\"tr\");\r\n            \r\n            // Loop through all table rows, and hide those who don't match the search query\r\n            for (i = 0; i < tr.length; i++) {\r\n                try{\r\n                    var td1 = tr[i].getElementsByTagName(\"td\")[2];\r\n\r\n                    txtValue = td1.textContent || td1.innerText;\r\n                    if (txtValue.toUpperCase().indexOf(filter) > -1) {\r\n                        tr[i].style.display = \"\";\r\n                    } else {\r\n                        tr[i].style.display = \"none\";\r\n                    }\r\n\r\n                }catch(e){\r\n                    console.log(e)\r\n                }\r\n            }\r\n        }\r\n        return (\r\n            <>\r\n                <AdminNavigation />\r\n                <div className=\"flex flex-col w-0 flex-1 overflow-hidden\">\r\n                <AdminSearchbar />\r\n                <main className=\"flex-1 relative overflow-y-auto focus:outline-none\" id=\"main\" tabIndex='0'>\r\n\r\n                    {/* style=\"min-height: 650px;max-height: 650px;\" */}\r\n                    <div className=\"bg-white overflow-hidden shadow rounded-lg divide-y mr-12 mt-5 dark:bg-darkOther-200\">\r\n\r\n                        <div className=\"px-4 py-5 sm:px-6\">\r\n\r\n                            <dl className=\"sm:grid sm:grid-cols-2\">\r\n\r\n                                <div className=\"flex flex-col p-2  bg-white mr-5 dark:bg-darkOther-200\">\r\n\r\n                                    <h1  className=\"dark:text-white\">Users</h1>\r\n\r\n                                    <div className=\"relative w-full text-gray-400 focus-within:text-gray-600\">\r\n\r\n                                        <div className=\"absolute inset-y-0 left-0 flex items-center pointer-events-none\">\r\n                                            <AiOutlineSearch className=\"h-5 w-5 text-gray-900 dark:text-other-100\"/>\r\n                                        </div>   \r\n                                                                               \r\n                                        <input id=\"searchInput\" onKeyUp={filter} autoComplete=\"off\" className=\"dark:text-white dark:bg-darkOther-200 bg-white block w-full h-full pl-8 pr-3 py-2 text-gray-900 placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-0 focus:border-transparent sm:text-sm\" placeholder=\"Search by Key\" type=\"search\" name=\"search\" />\r\n                                    \r\n                                    </div>\r\n        \r\n                                </div>\r\n\r\n\r\n                            </dl>\r\n\r\n                        </div>\r\n\r\n                        <div className=\"px-4 py-5 sm:p-6\">\r\n    \r\n\r\n                            <div className=\"flex flex-col \">\r\n\r\n                                <div className=\"-my-2 overflow-y-auto sm:-mx-6 lg: mr-12 dark:bg-darkOther-200\" style={{'min-height': '400px', 'max-height': '800px'}}>\r\n                                    <div className=\"py-2 align-middle inline-block min-w-full sm:px-6 lg:px-8\" >\r\n                                        \r\n                                        <div className=\"shadow overflow-hidden border-gray-200\">\r\n\r\n                                            {/* Table */}\r\n                                            <UserTable />\r\n\r\n                                        </div>\r\n\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                        </div>\r\n                    </div>\r\n\r\n                    <footer>\r\n                        <p className=\"text-sm font-small text-gray-600\">Invincible Services | 2021 | Thank you for using our services</p>\r\n                    </footer>\r\n   \r\n                </main>\r\n                </div>\r\n            \r\n            </>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Users","E:\\dashboard-react\\src\\components\\home\\home.js",["113","114","115"],"import '../../static/styles/main.css'; \r\nimport React, { useState, useEffect } from 'react';\r\nimport PlanModal from './planModal';\r\nimport RestockModal from './restockModal';\r\nimport PlanTable from './planTable';\r\nimport RestockTable from './restockTable';\r\n\r\nimport AdminNavigation from '../adminNav';\r\nimport AdminSearchbar from '../adminSearch';\r\n\r\nimport { FaPlus } from 'react-icons/fa';\r\nimport BounceLoader from \"react-spinners/BounceLoader\";\r\n\r\nconst Home = () => {\r\n    const [totalLicense, setTotalLicense] = useState(0)\r\n    const [monthlyRev, setMonthlyRev] = useState(\"$0\")\r\n    const [newCustomers, setNewCustomers] = useState(0)\r\n    const [loaded, setLoaded] = useState(false)\r\n\r\n    async function fetchPlans(){\r\n        const res = await fetch('/accounts/stats');\r\n        res.json()\r\n        .then(res => {\r\n            setTotalLicense(res.totalCustomers)\r\n            setMonthlyRev(res.revenue)\r\n            setNewCustomers(res.customersMonth)\r\n            setLoaded(true)\r\n            \r\n        })\r\n        .catch(err =>  {\r\n            fetchPlans()\r\n        });\r\n        \r\n    }\r\n\r\n    useEffect(() =>{\r\n        const abortController = new AbortController();\r\n        fetchPlans()\r\n\r\n\r\n\r\n        return () => {\r\n            abortController.abort();\r\n        };\r\n\r\n    }, [])\r\n\r\n        return (\r\n            <>\r\n                <AdminNavigation />\r\n                <div className=\"flex flex-col w-0 flex-1 overflow-hidden\">\r\n                    <AdminSearchbar />\r\n                    <main className=\"flex-1 relative overflow-y-auto focus:outline-none\">\r\n                    <div className=\"py-6\">\r\n                        \r\n\r\n\r\n                        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 md:px-8\"></div>\r\n                                    \r\n\r\n                        <div className=\"mx-auto px-4 sm:px-6 md:px-8 w-full \">\r\n                            <div className=\"relative w-full\">\r\n                                <div className=\"overflow-hidden shadow divide-y mb-5 rounded-lg\">\r\n                                    <dl className=\"shadow-lg md:grid md:grid-cols-3\">\r\n                                        <div className=\"flex flex-col border-b border-gray-200 p-6 text-center sm:border-0 dark:bg-darkOther-200 bg-white\">\r\n                                          <dt className=\"order-2 mt-2 text-lg leading-6 font-medium text-gray-900 dark:text-white select-none\">\r\n                                            Total Licenses\r\n                                          </dt>\r\n                                          <dd className=\"order-1 text-5xl font-extrabold text-yellow-500 select-none\">\r\n                                            {totalLicense}\r\n                                          </dd>\r\n                                        </div>\r\n                                        <div className=\"flex flex-col border-t border-b border-gray-100 p-6 text-center sm:border-0 dark:bg-darkOther-200 bg-white\">\r\n                                          <dt className=\"order-2 mt-2 text-lg leading-6 font-medium text-gray-900 dark:text-white select-none\">\r\n                                            Monthly Revenue\r\n                                          </dt>\r\n                                          <dd className=\"order-1 text-5xl font-extrabold text-green-500 select-none\">\r\n                                            {monthlyRev}\r\n                                          </dd>\r\n                                        </div>\r\n                                        <div className=\"flex flex-col border-t border-gray-100 p-6 text-center sm:border-0 white dark:bg-darkOther-200 bg-white\">\r\n                                          <dt className=\"order-2 mt-2 text-lg leading-6 font-medium text-gray-900 dark:text-white select-none\">\r\n                                            New Customers \r\n                                          </dt>\r\n                                          <dd className=\"order-1 text-5xl font-extrabold text-blue-500 select-none\">\r\n                                            {newCustomers}\r\n                                          </dd>\r\n                                        </div>\r\n                                    </dl>\r\n                                </div>\r\n                            </div>\r\n                        \r\n\r\n                            <dl className=\"lg:grid md:grid-cols-2 sm:grid-cols-1 gap-4 sm:rounded-lg\">\r\n    \r\n                                <div className=\"flex flex-col p-6 text-center bg-white mt-5 dark:bg-darkOther-200 rounded-lg\" style={{'min-height': '400px', 'max-height': '800px'}}>\r\n                                    <div className=\"sm:grid sm:grid-cols-2\">\r\n                                        <div className=\"text-left\">\r\n                                        <h1 className=\"text-md font-medium text-other-200 dark:text-white select-none\">Plans</h1>\r\n                                        </div>\r\n                                        <div className=\"text-right\">\r\n                                            <button name=\"plan-modal\" id=\"plan-button-hide\" type=\"button\" className=\"inline-flex items-center px-3 py-2 border border-transparent shadow-sm text-sm leading-4 font-medium rounded-md dark:text-white bg-other-100 dark:bg-other-200 text-other-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-other-200 dark:focus:ring-darkOther-200\" onClick={() => {\r\n                                                document.querySelector('#plan-modal').classList.contains('hidden') ? document.querySelector('#plan-modal').classList.remove('hidden') : document.querySelector('#plan-modal').classList.add('hidden')\r\n                                            }}>\r\n                                                <FaPlus className=\"-ml-0.5 mr-2 h-4 w-4 dark:text-white text-other-500\" id='hide' />\r\n                                                New Plan\r\n                                            </button>\r\n                                        </div>\r\n                                    </div>\r\n                                \r\n    \r\n                                    <PlanTable />\r\n                                    \r\n                                </div>\r\n\r\n                                {/* PLAN CREATE MODAL */}\r\n                                <PlanModal />\r\n\r\n    \r\n\r\n\r\n                                <div className=\"flex flex-col p-6 text-center bg-white mt-5 dark:bg-darkOther-200 rounded-lg\" style={{'min-height': '400px', 'max-height': '800px'}}>\r\n                                    <div className=\"grid-cols-2 sm:grid sm:grid-cols-2\">\r\n                                        <div className=\"text-left\">\r\n                                            <h1 className=\"text-md font-medium text-other-200 dark:text-white select-none\">Restocks</h1>\r\n                                        </div>\r\n                                        <div className=\"text-right\">\r\n                                            <button name=\"restock-modal\" id=\"restock-button-hide\" type=\"button\" className=\"inline-flex items-center px-3 py-2 border border-transparent shadow-sm text-sm leading-4 font-medium rounded-md dark:text-white bg-other-100 dark:bg-other-200 text-other-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-other-200 dark:focus:ring-darkOther-200\" onClick={() => {\r\n                                                document.querySelector('#restock-modal').classList.contains('hidden') ? document.querySelector('#restock-modal').classList.remove('hidden') : document.querySelector('#restock-modal').classList.add('hidden')\r\n                                            }}>\r\n                                            <FaPlus className=\"-ml-0.5 mr-2 h-4 w-4 dark:text-white text-other-500\" id='hide' />\r\n                                            New Restock\r\n                                            </button>\r\n                                        </div>\r\n                                    </div>\r\n\r\n\r\n                                    <RestockTable />\r\n\r\n                                </div>\r\n\r\n                                {/* Create Restock Modal */}\r\n                                <RestockModal />\r\n\r\n                                \r\n\r\n      \r\n    \r\n                            </dl>\r\n                    </div>\r\n    \r\n\r\n                    </div>\r\n\r\n                    \r\n\r\n                    <footer>\r\n                        <p className=\"text-sm font-small text-gray-600\">Invincible Services | 2021 | Thank you for using our services</p>\r\n                    </footer>\r\n\r\n                </main>\r\n\r\n                </div>\r\n\r\n                \r\n\r\n            </>\r\n        );\r\n\r\n}\r\n\r\nexport default Home;\r\n","E:\\dashboard-react\\src\\components\\adminNav.js",["116","117","118","119","120","121","122"],"E:\\dashboard-react\\src\\components\\adminSearch.js",["123","124"],"import '../static/styles/main.css'; \r\nimport React, {useState, useEffect} from 'react';\r\n\r\n\r\nimport { AiOutlineSearch, AiOutlineMenu } from 'react-icons/ai';\r\nimport { IoNotificationsOutline } from 'react-icons/io5';\r\nimport {FaUserCircle} from 'react-icons/fa'\r\n\r\n\r\nconst AdminSearch = () =>  {\r\n\r\n    const [userImage, setUserImage] = useState(\"\")\r\n\r\n    async function fetchData(){\r\n        const res = await fetch('/discord/data');\r\n        res.json()\r\n        .then(res => {setUserImage(res.discordImage)})\r\n        .catch(err =>  { console.log(err) });\r\n        \r\n    }\r\n\r\n\r\n    useEffect(() =>{\r\n        const abortController = new AbortController();\r\n        fetchData()\r\n\r\n        return () => {\r\n            abortController.abort();\r\n        };\r\n\r\n    }, [])\r\n\r\n    // render() {\r\n        return (\r\n\r\n            <div className=\"relative z-10 flex h-16 shadow-sm\">\r\n                        <button className=\"px-4 text-gray-500 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-indigo-500 md:hidden\" onClick={() => {\r\n                                    document.querySelector('#mob-nav').classList.contains('hidden') ? document.querySelector('#mob-nav').classList.remove('hidden') : document.querySelector('#mob-nav').classList.add('hidden')\r\n                                    document.querySelector('#mob-screen').classList.contains('hidden') ? document.querySelector('#mob-screen').classList.remove('hidden') : document.querySelector('#mob-screen').classList.add('hidden')\r\n                            }}>\r\n                            <AiOutlineMenu className=\"h-6 w-6\"/>\r\n                        </button>\r\n                        \r\n                        <div className=\"flex-1 px-4 flex justify-between bg-other-100 dark:bg-darkOther-100 mr-2\">\r\n                            <div className=\"flex-1 flex\">\r\n                                <form className=\"w-full flex md:ml-0\" action=\"#\" method=\"GET\">\r\n                                    <label className=\"sr-only\">Search</label>\r\n                                    <div className=\"relative w-full text-gray-400 focus-within:text-gray-600\">\r\n                                    <div className=\"absolute inset-y-0 left-0 flex items-center pointer-events-none\">\r\n                                        <AiOutlineSearch className=\"h-5 w-5 text-gray-900 dark:text-other-100\"/>\r\n                                    </div>\r\n                                    <input id=\"search_field\" disabled=\"disabled\" autoComplete=\"off\" className=\"bg-other-100 dark:bg-darkOther-100 block w-full h-full pl-8 pr-3 py-2 border-transparent text-gray-900 placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-0 focus:border-transparent sm:text-sm\" placeholder=\"Search\" type=\"search\" name=\"search\" />\r\n                                    </div>\r\n                                </form>\r\n                            </div>\r\n            \r\n                            <div className=\"ml-4 flex items-center md:ml-6 \">\r\n                                <button className=\"p-1 rounded-full bg-darkOther-200 text-other-100 dark:bg-other-200 dark:text-other-100 focus:outline-none\" onClick={() => {\r\n                                    document.querySelector('#notif-dropdown').classList.contains('hidden') ? document.querySelector('#notif-dropdown').classList.remove('hidden') : document.querySelector('#notif-dropdown').classList.add('hidden')\r\n                                }}>\r\n                                    <span className=\"sr-only\">View notifications</span>\r\n                                    <IoNotificationsOutline className=\"h-7 w-7\" id='hide'/>\r\n                                </button>\r\n\r\n                                <div className=\"dark:bg-darkOther-200 hidden absolute right-0 mt-24 mr-24 w-48 rounded-md shadow-lg py-1 bg-white focus:outline-none\" role=\"menu\" id=\"notif-dropdown\" aria-orientation=\"vertical\">\r\n                                        <span className=\"block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 hover:bg-gray-100 hover:text-gray-900 dark:hover:bg-darkOther-300 dark:text-white\" role=\"menuitem\" id='hide'>No notifications</span>\r\n                                </div>\r\n                        \r\n                                <div className=\"ml-3 relative\">\r\n                                    <div>  \r\n                                        <button className=\"max-w-xs bg-white flex items-center text-sm rounded-full focus:outline-none\" id=\"profile-button-hide\" name=\"profile-dropdown\" aria-haspopup=\"true\"  onClick={() => {\r\n                                            document.querySelector('#profile-dropdown').classList.contains('hidden') ? document.querySelector('#profile-dropdown').classList.remove('hidden') : document.querySelector('#profile-dropdown').classList.add('hidden')\r\n                                        }}>\r\n                                            <span className=\"sr-only\">Open user menu</span>\r\n                                            {userImage == \"\" ? <FaUserCircle className=\"h-10 w-10 rounded-full bg-darkOther-200 text-other-100 dark:bg-other-200 dark:text-other-100 \" id=\"profile-button-hide\" name=\"profile-dropdown\" /> : <img className=\"h-8 w-8 rounded-full text-other-100 dark:text-darkOther-300\" src={userImage} id=\"profile-button-hide\" name=\"profile-dropdown\" />}\r\n                                        </button>\r\n                                    </div>\r\n            \r\n                                    <div className=\"dark:bg-darkOther-200 hidden origin-top-right absolute right-0 mt-2 w-48 rounded-md shadow-lg py-1 bg-white\" role=\"menu\" id=\"profile-dropdown\" aria-orientation=\"vertical\" aria-labelledby=\"user-menu\">\r\n                                        <span href=\"#\" className=\"block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 hover:text-gray-900 dark:hover:bg-darkOther-300 dark:text-white\" role=\"menuitem\" id='hide'>Sign out</span>\r\n                                    </div>\r\n                                </div>\r\n            \r\n                            </div>\r\n                        </div>\r\n            </div>\r\n        )\r\n}\r\n\r\nexport default AdminSearch;","E:\\dashboard-react\\src\\components\\home\\planModal.js",["125","126","127","128","129","130","131"],"import '../../static/styles/main.css'; \r\nimport React, { useEffect, useState } from 'react';\r\nimport Select from 'react-select';\r\nimport makeAnimated from 'react-select/animated';\r\nimport chroma from 'chroma-js';\r\nimport currencyOptions from '../../static/data/currencies.json'\r\nimport { Switch } from '@headlessui/react'\r\nimport DatePicker from 'react-date-picker';\r\n\r\n\r\n\r\nimport { AiOutlineClose } from 'react-icons/ai';\r\nimport { IoPricetagOutline } from 'react-icons/io5';\r\n\r\nvar planOptions = [\r\n    {label:'Recurring & Onetime Payment', value:'recurring+onetime-payment'},\r\n    {label:'Recurring', value:'recurring'},\r\n    {label:'Lifetime', value:'lifetime'},\r\n    {label:'Rental', value:'rental'}\r\n]\r\nvar intervalTypeOptions = [\r\n    {label:'Day', value:'day'},\r\n    {label:'Week', value:'week'},\r\n    {label:'Month', value:'month'},\r\n    {label:'Year', value:'year'}\r\n]\r\n\r\nconst PlanModal = () => {\r\n\r\n    const [availableRoles, setavailableRoles] = useState([])\r\n    const [planName, setplanName] = useState(\"\")\r\n    const [planType, setplanType] = useState(\"\")\r\n    const [planRole, setplanRole] = useState([])\r\n    const [price, setprice] = useState(\"\")\r\n    const [priceCurrency, setpriceCurrency] = useState(\"\")\r\n    const [interval, setinterval] = useState(\"\")\r\n    const [intervalType, setintervalType] = useState(\"\")\r\n    const [unbinding, setunbinding] = useState(true)\r\n    const [oneTimePrice, setOneTimePrice] = useState(\"\")\r\n    const [expDate, setExpDate] = useState(new Date());\r\n    // const [selectColor, setSelectColor] = useState(true)\r\n\r\n    async function fetchPlans(){\r\n        const res = await fetch('/discord/guild/roles');\r\n        res.json()\r\n        .then(res => {\r\n            setavailableRoles(res.roles)\r\n        })\r\n        .catch(err =>  {console.log(err)});\r\n        \r\n    }\r\n\r\n    useEffect(() =>{\r\n        const abortController = new AbortController();\r\n        fetchPlans()\r\n\r\n\r\n\r\n        return () => {\r\n            abortController.abort();\r\n        };\r\n\r\n    }, [])\r\n\r\n    const colourStyles = {\r\n        control: styles => ({ ...styles, backgroundColor: localStorage.getItem('mode')  }),\r\n        option: (styles, { data, isDisabled, isFocused, isSelected }) => {\r\n          const color = chroma(data.color);\r\n          return {\r\n            ...styles,\r\n            backgroundColor: isDisabled\r\n              ? null\r\n              : isSelected\r\n              ? data.color\r\n              : isFocused\r\n              ? color.alpha(0.1).css()\r\n              : null,\r\n            color: isDisabled\r\n              ? '#ccc'\r\n              : isSelected\r\n              ? chroma.contrast(color, 'white') > 2\r\n                ? 'white'\r\n                : 'black'\r\n              : data.color,\r\n            cursor: isDisabled ? 'not-allowed' : 'default',\r\n      \r\n            ':active': {\r\n              ...styles[':active'],\r\n              backgroundColor:\r\n                !isDisabled && (isSelected ? data.color : color.alpha(0.3).css()),\r\n            },\r\n          };\r\n        },\r\n        multiValue: (styles, { data }) => {\r\n          const color = chroma(data.color);\r\n          return {\r\n            ...styles,\r\n            backgroundColor: color.alpha(0.1).css(),\r\n          };\r\n        },\r\n        multiValueLabel: (styles, { data }) => ({\r\n          ...styles,\r\n          color: data.color,\r\n        }),\r\n        multiValueRemove: (styles, { data }) => ({\r\n          ...styles,\r\n          color: data.color,\r\n          ':hover': {\r\n            backgroundColor: data.color,\r\n            color: 'white',\r\n          },\r\n        }),\r\n    }\r\n    const colourStyle = {\r\n        control: styles => ({ ...styles, backgroundColor: localStorage.getItem('mode') }),\r\n\r\n    }\r\n\r\n\r\n    \r\n    const submitHandler = async (e) => {\r\n        e.preventDefault()\r\n\r\n        if(planName.length > 0 && planType.length > 0) {\r\n        \r\n            var response = await fetch('/plans/add', {\r\n                method:'post',\r\n                body:JSON.stringify({\r\n                    planName:planName,\r\n                    price:price,\r\n                    currency:priceCurrency,\r\n                    type:planType,\r\n                    role:JSON.stringify(planRole),\r\n                    interval:interval,\r\n                    intervalType:intervalType,\r\n                    planId:'',\r\n                    id:'',\r\n                    unbinding:unbinding,\r\n                    oneTimeAmount:oneTimePrice,\r\n                    expiry:new Date('Mon Feb 08 2021 00:00:00 GMT+0000 (Greenwich Mean Time)').getTime() / 1000\r\n                }),\r\n                \"headers\": {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            })\r\n            if(response.ok) {\r\n                setavailableRoles()\r\n                setinterval(\"\")\r\n                setintervalType(\"\")\r\n                setplanName(\"\")\r\n                setplanRole([])\r\n                setplanType(\"\")\r\n                setprice(\"\")\r\n                setpriceCurrency(\"\")\r\n                setunbinding(true)\r\n\r\n                return\r\n            }else{\r\n                return\r\n            }\r\n        }\r\n        else{\r\n            return;\r\n        }\r\n    }\r\n\r\n        \r\n        return (\r\n                <div className=\"fixed z-10 inset-0 overflow-y-auto hidden\" id=\"plan-modal\">\r\n            \r\n                    <form onSubmit={submitHandler}>\r\n                        <div className=\"flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0\">\r\n\r\n                            <div className=\"fixed inset-0 transition-opacity\" aria-hidden=\"true\">\r\n                                <div className=\"absolute inset-0 bg-gray-500 opacity-75\"></div>\r\n                            </div>\r\n                \r\n                            <span className=\"hidden sm:inline-block sm:align-middle sm:h-screen\" aria-hidden=\"true\">&#8203;</span>\r\n\r\n            \r\n                            <div className=\"inline-block align-bottom bg-white rounded-lg px-4 pt-5 pb-4 text-left shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-sm sm:w-full sm:p-6 dark:bg-darkOther-200\" role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"modal-headline\">\r\n                        \r\n                                <div>\r\n                                    <button type=\"button\" onClick={() => {\r\n                                        document.querySelector('#plan-modal').classList.contains('hidden') ? document.querySelector('#plan-modal').classList.remove('hidden') : document.querySelector('#plan-modal').classList.add('hidden')\r\n                                    }}><AiOutlineClose className=\"text-red-500 h-6 w-6 \" id='hide' /></button>\r\n\r\n\r\n                                    <div className=\"mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-green-100\">\r\n            \r\n                                    \r\n                                    <IoPricetagOutline className=\"h-6 w-6 text-green-600 select-none\" id='hide'/>\r\n                                </div>\r\n        \r\n\r\n                                <div className=\"mt-3 text-center sm:mt-5\">  \r\n                                    <h3 className=\"text-lg leading-6 font-medium text-gray-900 dark:text-white select-none\" id=\"modal-headline\">\r\n                                    Create a Plan...\r\n                                    </h3>\r\n        \r\n                                    <div className=\"mt-2\">\r\n                                        \r\n                                        <div>\r\n\r\n                                            <fieldset className=\"mt-2 bg-white dark:bg-darkOther-200\">\r\n                                                <div className=\"md:grid md:grid-cols-2\">\r\n                                                <div className=\"\">\r\n                                                        <legend className=\"block text-sm font-medium text-gray-700 text-left dark:text-gray-300 select-none\">Plan Name</legend>\r\n                                                        <div className=\"mt-1 rounded-md shadow-sm -space-y-px\">\r\n                                                            <div>\r\n                                                            <label className=\"block text-sm font-medium text-gray-700\"></label>\r\n                                                            <input  name=\"planName\" id=\"name\" autoComplete=\"off\" className=\"dark:bg-darkOther-200 focus:ring-other-200 focus:border-other-200 block w-full font-medium text-md rounded-md py-2 dark:focus:ring-darkOther-200 dark:focus:border-darkOther-200\" \r\n                                                            placeholder=\"Member\" value={planName} onChange={e => setplanName(e.target.value)} />                                                         \r\n                                                            \r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                    \r\n                                                    <div className=\"\">\r\n                                                        <legend className=\"block text-sm font-medium text-gray-700 text-left dark:text-gray-300 select-none\">Type</legend>\r\n                                                        <div className=\"mt-1 rounded-md shadow-sm -space-y-px\">\r\n                                                            <div>\r\n                                                                <label className=\"sr-only\">type</label>\r\n                                                                \r\n                                                                <Select defaultValue={planOptions[0]} styles={colourStyle} placeholder=\"Plan Type\" id=\"type\" value={planType} name=\"planType\" options={planOptions} className=\"focus:ring-other-200 focus:border-other-200 relative block w-full rounded-none rounded-t-md bg-transparent focus:z-10 font-medium text-md dark:focus:border-darkOther-200 dark:focus:ring-darkOther-200\"\r\n                                                                onChange={e => setplanType(e.value)} value={planOptions.filter(function(planOptions) {return planOptions.value === planType})}/>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                \r\n                                                </div>\r\n                \r\n                                            </fieldset>\r\n\r\n                                            {planType == \"recurring\" || planType == \"recurring+onetime-payment\" ?  <fieldset className=\"mt-2 bg-white dark:bg-darkOther-200\">\r\n                                                <div className=\"md:grid md:grid-cols-2\">\r\n                                                <div className=\"\">\r\n                                                        <legend className=\"block text-sm font-medium text-gray-700 text-left dark:text-gray-300 select-none\">Interval</legend>\r\n                                                        <div className=\"mt-1 rounded-md shadow-sm -space-y-px\">\r\n                                                            <div className=\"mt-1 flex rounded-md shadow-sm -space-y-px\">\r\n                                                                <span className=\"inline-flex items-center px-3 rounded-l-md border-r-2 border-gray-200 bg-gray-50 text-gray-800 sm:text-sm mr-2 dark:bg-darkOther-100 dark:text-white select-none\">\r\n                                                                    every\r\n                                                                </span>\r\n                                                                <input name=\"interval\" id=\"interval\" type=\"text\" placeholder=\"Count\" autoComplete=\"off\" className=\"dark:bg-darkOther-200 block w-full font-medium text-md rounded-md py-2 \" value={interval} onChange={e => setinterval(e.target.value)}/>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                    \r\n                                                    <div className=\"\">\r\n                                                        <legend className=\"block text-sm font-medium text-gray-700 text-left dark:text-gray-300 select-none\">Interval Type</legend>\r\n                                                        <div className=\"mt-1 rounded-md shadow-sm -space-y-px\">\r\n                                                            <div>\r\n                                                                <label className=\"sr-only select-none\">Interval Type</label>\r\n                                                                \r\n                                                                <Select defaultValue={intervalTypeOptions[3]} styles={colourStyle} id=\"type\" value={intervalType} name=\"intervalType\" options={intervalTypeOptions} placeholder=\"Interval\" \r\n                                                                className=\"focus:ring-other-200 focus:border-other-200 relative block w-full rounded-none rounded-t-md focus:z-10 font-medium text-md dark:focus:border-darkOther-200 dark:focus:ring-darkOther-200\"\r\n                                                                onChange={e => setintervalType(e.value)} value={intervalTypeOptions.filter(function(intervalTypeOptions) {return intervalTypeOptions.value === intervalType})}/>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                \r\n                                                </div>\r\n                \r\n                                            </fieldset> :  <></> }\r\n\r\n                                            \r\n                                        \r\n\r\n                                            <fieldset className=\"mt-4 bg-white dark:bg-darkOther-200\">\r\n                                                <legend className=\"block text-sm font-medium text-gray-700 text-left dark:text-gray-300 select-none\">Price</legend>\r\n                                                <div className=\"mt-1 bg-white rounded-md shadow-sm dark:bg-darkOther-200\">\r\n                                                    <div>\r\n                                                        <div className=\"mt-1 relative rounded-md shadow-sm\">\r\n                                                            <input type=\"text\" name=\"price\" id=\"price\" className=\"dark:bg-darkOther-200 focus:ring-other-200 focus:border-other-200 block w-full font-medium text-md  rounded-md py-2 dark:focus:border-darkOther-200 dark:focus:ring-darkOther-200\" \r\n                                                            placeholder=\"0.00\" value={price} autoComplete=\"off\" onChange={e => setprice(e.target.value)}/>\r\n\r\n                                                            <div className=\"absolute inset-y-0 right-0 flex items-center\">\r\n                                                                <label className=\"sr-only\">Currency</label>\r\n                                                                <Select defaultValue={currencyOptions[0]} styles={colourStyle}  id=\"type\" value={priceCurrency} name=\"priceCurrency\" placeholder=\"Currency\" options={currencyOptions} className=\"px-3 w-48 dark:bg-darkOther-200\"\r\n                                                                onChange={e => setpriceCurrency(e.value)} isSearchable value={currencyOptions.filter(function(currencyOptions) {return currencyOptions.value === priceCurrency})}/>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </div>\r\n                                            \r\n                                            </fieldset>\r\n\r\n                                            {planType == \"rental\" ? <fieldset className=\"mt-4 bg-white dark:bg-darkOther-200\">\r\n                                                <legend className=\"block text-sm font-medium text-gray-700 text-left dark:text-gray-300 select-none\">Expiry</legend>\r\n                                                <div className=\"mt-1 bg-white  dark:bg-darkOther-200\">\r\n                                                    <div>\r\n                                                        <div className=\"mt-1 relative rounded-md shadow-sm text-left \">\r\n                                                        <DatePicker\r\n                                                            onChange={setExpDate}\r\n                                                            value={expDate}\r\n                                                            calendarAriaLabel={\"Select Date\"}\r\n                                                        />\r\n\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </div>\r\n                                            \r\n                                            </fieldset> : <></>}\r\n\r\n                                            {planType == \"recurring+onetime-payment\" ? <fieldset className=\"mt-2 bg-whit dark:bg-darkOther-200\" id=\"interval-fieldset\">\r\n                                                    <div className=\"\">\r\n                                                        <legend className=\"block text-sm font-medium text-gray-700 text-left dark:text-gray-300 select-none\">Onetime Payment Price</legend>\r\n                                                        <div className=\"mt-1 rounded-md shadow-sm -space-y-px\">\r\n                                                            <div>\r\n                                                                <label className=\"sr-only\">price</label>\r\n                                                                <input type=\"text\" className=\"dark:bg-darkOther-200 focus:ring-other-200 focus:border-other-200 block w-full font-medium text-md  rounded-md py-2 dark:focus:border-darkOther-200 dark:focus:ring-darkOther-200\" \r\n                                                                placeholder=\"0.00\" value={oneTimePrice} autoComplete=\"off\" onChange={e => setOneTimePrice(e.target.value)}/>\r\n                                                                                                                                    \r\n                                                            \r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                            \r\n                                            </fieldset> : <></>}\r\n\r\n        \r\n                                            <fieldset className=\"mt-2 bg-whit dark:bg-darkOther-200\" id=\"interval-fieldset\">\r\n                                                    <div className=\"\">\r\n                                                        <legend className=\"block text-sm font-medium text-gray-700 text-left dark:text-gray-300 select-none\">Roles</legend>\r\n                                                        <div className=\"mt-1 rounded-md shadow-sm -space-y-px\">\r\n                                                            <div>\r\n                                                                <label className=\"sr-only\">roles</label>\r\n                                    \r\n                                                                <Select id=\"roles\" value={planRole}  placeholder=\"Roles\" closeMenuOnSelect={false} styles={colourStyles} name=\"planRole\" isSearchable components={makeAnimated()} isMulti options={availableRoles} className=\"focus:ring-other-200 focus:border-other-200 relative block w-full rounded-none rounded-t-md bg-transparent focus:z-10 font-medium text-md dark:focus:border-darkOther-200 dark:focus:ring-darkOther-200\"\r\n                                                                    onChange={e => setplanRole(e)} />\r\n                                                                                                                                                                              \r\n                                                            \r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                            \r\n                                            </fieldset>\r\n\r\n                                            <fieldset className=\"mt-2 bg-white dark:bg-darkOther-200\" id=\"interval-fieldset\">\r\n                                                    <div className=\"\">\r\n                                                        <legend className=\"block text-sm font-medium text-gray-700 text-left dark:text-gray-300 select-none\">{unbinding ? \"Unbinding Enabled\" : \"Unbinding Disabled\"}</legend>\r\n                                                        <div className=\"mt-1 rounded-md shadow-sm -space-y-px\">\r\n                                                            <div className=\"text-left\">\r\n                                                                <label className=\"sr-only\">allow unbinding</label>\r\n                                                                <Switch \r\n                                                                checked={unbinding}\r\n                                                                onChange={e => setunbinding(e)}\r\n                                                                as=\"button\" \r\n                                                                className={`${unbinding ? \"bg-green-400\" : \"bg-gray-200\"} relative inline-flex flex-shrink-0 h-6 w-11 border-2 border-transparent rounded-full cursor-pointer transition-colors ease-in-out duration-200 focus:outline-none`}>\r\n\r\n                                                                    {unbinding ? \r\n                                                                    <span aria-hidden=\"true\" className=\"pointer-events-none translate-x-0 inline-block h-5 w-5 rounded-full bg-white shadow transform ring-0 transition ease-in-out duration-200\"></span> : \r\n                                                                    <span aria-hidden=\"true\" className=\"pointer-events-none translate-x-5 inline-block h-5 w-5 rounded-full bg-white shadow transform ring-0 transition ease-in-out duration-200\"></span>\r\n                                                                    }\r\n\r\n                                                                </Switch>\r\n                                                                                                                                    \r\n                                                            \r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                            \r\n                                            </fieldset>\r\n        \r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"mt-5 sm:mt-6\">\r\n                                <button  name=\"license-modal\" type=\"submit\" className=\"inline-flex justify-center w-full rounded-md border border-transparent shadow-sm px-4 py-2 bg-blue-500 text-base font-medium text-white hover:bg-other-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-other-200 sm:text-sm dark:focus:ring-darkOther-200 dark:hover:bg-darkOther-200 dark:bg-darkOther-100\">\r\n                                    Create\r\n                                </button>\r\n                            </div>\r\n\r\n                        </div>\r\n                    \r\n                    </div>\r\n                    </form>\r\n            </div>\r\n\r\n        )\r\n\r\n}\r\nexport default PlanModal","E:\\dashboard-react\\src\\components\\home\\restockModal.js",["132"],"import '../../static/styles/main.css'; \r\nimport React, { useState, useEffect } from 'react';\r\nimport Select from 'react-select';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport { AiOutlineClose, AiOutlineShoppingCart } from 'react-icons/ai';\r\n\r\n\r\nconst RestockModal = () => {\r\n    const [plans, setPlans] = useState([])\r\n    const [password, setPassword] = useState(\"\")\r\n    const [stock, setStock] = useState(\"\")\r\n    const [restockPlan, setRestockPlan] = useState(\"\")\r\n    const [planName, setPlanName] = useState(\"\")\r\n\r\n    async function fetchPlans(){\r\n        const res = await fetch('/plans/data');\r\n        res.json()\r\n        .then(res => {setPlans(res)})\r\n        .catch(err =>  fetchPlans());\r\n        \r\n    }\r\n\r\n    useEffect(() =>{\r\n        var abortController = new AbortController();\r\n        fetchPlans()\r\n\r\n        setInterval(() => {\r\n            abortController = new AbortController();\r\n            fetchPlans()\r\n        }, 5000);\r\n\r\n\r\n        return () => {\r\n            abortController.abort();\r\n        };\r\n\r\n    }, [])\r\n\r\n    const colourStyle = {\r\n        control: styles => ({ ...styles, backgroundColor: localStorage.getItem('mode') }),\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    const submitHandler = async (e) => {\r\n        e.preventDefault()\r\n        \r\n        try{\r\n            if(password.length > 0 && stock.length > 0) {\r\n                await fetch('/restocks/add', {\r\n                    method:'POST',\r\n                    body:JSON.stringify({\r\n                        password:password,\r\n                        stock:parseInt(stock),\r\n                        stockRemaining:parseInt(stock),\r\n                        planId:restockPlan,\r\n                        restockMethod:'regular',\r\n                        id:uuidv4(),\r\n                        planName:planName\r\n                    }),\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n                    }\r\n                })\r\n                .then(response => {\r\n                    console.log(document.querySelector('#button-create').classList)\r\n                    document.querySelector('#button-create').classList.remove('bg-other-200')\r\n                    document.querySelector('#button-create').classList.remove('hover:bg-other-300')\r\n                    document.querySelector('#button-create').classList.remove('dark:bg-darkOther-200')\r\n        \r\n                    document.querySelector('#button-create').classList.add('bg-green-500')\r\n                    document.querySelector('#button-create').classList.add('hover:bg-green-600')\r\n\r\n                    setPlans([])\r\n                    setPassword(\"\")\r\n                    setStock(\"\")\r\n                    setRestockPlan(\"\")\r\n                }).catch(err => console.log(err))\r\n            }else{\r\n                return\r\n            }\r\n        }catch(err){\r\n            console.log(err)\r\n            return;\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n        return (\r\n            <div className=\"fixed z-10 inset-0 overflow-y-auto hidden\" id=\"restock-modal\">\r\n\r\n                <div className=\"flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0\">\r\n                    <form onSubmit={submitHandler}>\r\n                    <div className=\"fixed inset-0 transition-opacity\" aria-hidden=\"true\">\r\n                    <div className=\"absolute inset-0 bg-gray-500 opacity-75\"></div>\r\n\r\n                </div>\r\n\r\n                <span className=\"hidden sm:inline-block sm:align-middle sm:h-screen\" aria-hidden=\"true\">&#8203;</span>\r\n\r\n\r\n                <div className=\"inline-block align-bottom bg-white rounded-lg px-4 pt-5 pb-4 text-left shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-sm sm:w-full sm:p-6 dark:bg-darkOther-200\" role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"modal-headline\">\r\n\r\n                    <div>\r\n\r\n                    <button type=\"button\" onClick={() => {\r\n                        document.querySelector('#button-create').classList.remove('bg-other-200')\r\n                        document.querySelector('#button-create').classList.remove('dark:bg-darkOther-200')\r\n                        document.querySelector('#button-create').classList.remove('hover:bg-other-300')\r\n            \r\n                        document.querySelector('#button-create').classList.remove('bg-green-500')\r\n                        document.querySelector('#button-create').classList.remove('hover:bg-green-600')\r\n\r\n                        document.querySelector('#restock-modal').classList.contains('hidden') ? document.querySelector('#restock-modal').classList.remove('hidden') : document.querySelector('#restock-modal').classList.add('hidden')\r\n                    }}><AiOutlineClose className=\"text-red-500 h-6 w-6\" /></button>\r\n                        \r\n\r\n                        <div className=\"mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-green-100\">\r\n\r\n\r\n                            <AiOutlineShoppingCart className=\"h-6 w-6 text-green-600 select-none\"/>\r\n\r\n                    </div>\r\n\r\n                    <div className=\"mt-3 text-center sm:mt-5\">\r\n                        <h3 className=\"text-lg leading-6 font-medium text-gray-900 dark:text-white select-none\" id=\"modal-headline\">\r\n                          Create a Restock\r\n                        </h3>\r\n\r\n                        <div className=\"mt-2\">\r\n\r\n                            <div>\r\n                                <fieldset >\r\n                                    <legend className=\"block text-sm font-medium text-gray-700 text-left dark:text-gray-300 select-none\">Password</legend>\r\n                                    <div className=\"mt-1 bg-white rounded-md shadow-sm dark:bg-darkOther-200\">\r\n                                        <div>\r\n                                            <label className=\"block text-sm font-medium text-gray-700\"></label>\r\n                                            <input  name=\"password\" id=\"password\" autoComplete=\"off\" className=\"dark:bg-darkOther-200 focus:ring-other-200 focus:border-other-200 dark:focus:ring-darkOther-200 dark:focus:border-darkOther-200 block w-full font-medium text-md rounded-md py-2\" placeholder=\"passsword\" onChange={e => setPassword(e.target.value)} />\r\n                                        </div>\r\n                                    </div>\r\n                                </fieldset>\r\n\r\n                                <fieldset className=\"mt-2 bg-white dark:bg-darkOther-200\">\r\n                                    <legend className=\"block text-sm font-medium text-gray-700 text-left dark:text-gray-300 select-none\">Stock</legend>\r\n                                    <div className=\"mt-1 rounded-md shadow-sm \">\r\n                                        <div>\r\n                                            <label className=\"block text-sm font-medium text-gray-700\"></label>\r\n                                            <input  name=\"stock\"  autoComplete=\"off\" className=\"dark:bg-darkOther-200 focus:ring-other-200 focus:border-other-200 dark:focus:ring-darkOther-200 dark:focus:border-darkOther-200 block w-full font-medium text-md rounded-md py-2\" placeholder=\"10\" onChange={e => setStock(e.target.value)} />\r\n                                        </div>\r\n                                    </div>\r\n                                </fieldset>\r\n  \r\n  \r\n\r\n                                <fieldset className=\"mt-2 bg-white dark:bg-darkOther-200\">\r\n                                    <div className=\"mt-1 bg-white rounded-md shadow-sm dark:bg-darkOther-200\">\r\n                                        <div>\r\n                                            <legend className=\"block text-sm font-medium text-gray-700 text-left dark:text-gray-300 select-none\">Plan</legend>\r\n                                            <div className=\"mt-1 rounded-md shadow-sm -space-y-px\">\r\n                                                <div>\r\n                                                    <label className=\"sr-only select-none\">Plan</label>\r\n                                                    <Select name=\"restockPlan\" value={restockPlan.value} options={plans} styles={colourStyle} className=\"focus:ring-other-200 focus:border-other-200 dark:focus:ring-darkOther-200 dark:focus:border-darkOther-200 relative block w-full rounded-none rounded-t-md bg-transparent focus:z-10 font-medium text-md\" onChange={(e)=> { \r\n                                                        setRestockPlan(e.value)\r\n                                                        setPlanName(e.label)\r\n                                                    }}/>\r\n                                                    \r\n\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </fieldset>\r\n\r\n                            </div>\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"mt-5 sm:mt-6\">\r\n                  <button type=\"submit\" id=\"button-create\" className=\"inline-flex justify-center w-full rounded-md border border-transparent shadow-sm px-4 py-2 bg-blue-500 text-base font-medium text-white hover:bg-other-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-other-200 sm:text-sm dark:focus:ring-darkOther-200 dark:hover:bg-darkOther-200 dark:bg-darkOther-100\">\r\n                    Create\r\n                  </button>\r\n                </div>\r\n\r\n            </div>\r\n            </form>\r\n            </div>\r\n            </div>\r\n\r\n        )\r\n\r\n\r\n}\r\nexport default RestockModal","E:\\dashboard-react\\src\\components\\licenses\\licenses.js",["133","134","135"],"import '../../static/styles/main.css'; \r\nimport React, { useState, useEffect } from 'react';\r\nimport LicenseModal from './licenseModal';\r\nimport LicenseTable from './table';\r\nimport AdminNavigation from '../adminNav';\r\nimport AdminSearchbar from '../adminSearch';\r\n\r\nimport { AiOutlineSearch } from 'react-icons/ai';\r\nimport { FaPlus } from 'react-icons/fa';\r\nimport BounceLoader from \"react-spinners/BounceLoader\";\r\n\r\nconst Licenses = () => {\r\n    const [loaded, setLoaded] = useState(true)\r\n\r\n    \r\n\r\n    const filter = () => {\r\n        var input, filter, table, tr, td, i, txtValue;\r\n        input = document.getElementById(\"searchInput\");\r\n        filter = input.value.toUpperCase();\r\n        table = document.getElementById(\"table\");\r\n        tr = table.getElementsByTagName(\"tr\");\r\n        \r\n        // Loop through all table rows, and hide those who don't match the search query\r\n        for (i = 0; i < tr.length; i++) {\r\n            try{\r\n                var td1 = tr[i].getElementsByTagName(\"td\")[1];\r\n\r\n                txtValue = td1.textContent || td1.innerText;\r\n                if (txtValue.toUpperCase().indexOf(filter) > -1) {\r\n                    tr[i].style.display = \"\";\r\n                } else {\r\n                    tr[i].style.display = \"none\";\r\n                }\r\n\r\n            }catch(e){\r\n                console.log(e)\r\n            }\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n\r\n            <AdminNavigation />\r\n            <div className=\"flex flex-col w-0 flex-1 overflow-hidden\">\r\n            <AdminSearchbar />\r\n        \r\n            {\r\n                loaded ?\r\n                <main className=\"flex-1 relative overflow-y-auto focus:outline-none\" id=\"main\" tabIndex='0'>\r\n\r\n                <div className=\"bg-white overflow-hidden shadow rounded-lg divide-y mr-12 mt-5 dark:bg-darkOther-200\">\r\n\r\n                    <div className=\"px-4 py-5 sm:px-6\">\r\n\r\n                        <dl className=\"sm:grid sm:grid-cols-2\">\r\n\r\n                            <div className=\"flex flex-col p-2  bg-white mr-5 dark:bg-darkOther-200\">\r\n\r\n                                <h1 className=\"dark:text-white\">Licenses</h1>\r\n\r\n                                <div className=\"relative w-full text-gray-400 focus-within:text-gray-600 dark:bg-darkOther-200\">\r\n\r\n                                    <div className=\"absolute inset-y-0 left-0 flex items-center pointer-events-none\">\r\n                                        <AiOutlineSearch className=\"h-5 w-5 text-gray-900 dark:text-other-100\"/>\r\n                                    </div>   \r\n                                                                            \r\n                                    <input id=\"searchInput\" onKeyUp={filter} autoComplete=\"off\" className=\"dark:text-white dark:bg-darkOther-200 bg-white block w-full h-full pl-8 pr-3 py-2 text-gray-900 placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-0 focus:border-transparent sm:text-sm\" placeholder=\"Search by DiscordName/DiscordID\" type=\"search\" name=\"search\" />\r\n                                \r\n                                </div>\r\n    \r\n                            </div>\r\n\r\n\r\n                            <div className=\"flex-col border-gray-200 p-2 mr-4 text-right\">\r\n\r\n                                <button name=\"license-modal\" id=\"license-button-hide\" type=\"button\" className=\"inline-flex items-center px-3 py-2 border border-transparent shadow-sm text-sm leading-4 font-medium rounded-md text-white dark:text-white bg-other-100 dark:bg-other-200 text-other-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-other-200 dark:focus:ring-darkOther-200\" onClick={() => {\r\n                                            document.querySelector('#license-modal').classList.contains('hidden') ? document.querySelector('#license-modal').classList.remove('hidden') : document.querySelector('#license-modal').classList.add('hidden')\r\n                                        }}>\r\n                                    <FaPlus className=\"-ml-0.5 mr-2 h-4 w-4 dark:text-white text-other-500\"/>\r\n                                    New License\r\n                                </button>\r\n\r\n                            </div>\r\n\r\n                        </dl>\r\n\r\n                    </div>\r\n\r\n                    {/* <div className=\"px-4 py-5 sm:p-6\"> */}\r\n\r\n                        {/* License Modal */}\r\n                        <LicenseModal />\r\n\r\n\r\n                        <div className=\"flex flex-col \">\r\n\r\n                            <div className=\"-my-2 overflow-y-auto sm:-mx-6 lg: mr-12 dark:bg-darkOther-200\" style={{'min-height': '400px', 'max-height': '800px'}}>\r\n                                <div className=\"py-2 align-middle inline-block min-w-full sm:px-6 lg:px-8\" >\r\n                                    \r\n                                    <div className=\"shadow overflow-hidden\">\r\n\r\n                                        {/* Table */}\r\n                                        <LicenseTable />\r\n                                        \r\n\r\n                                    </div>\r\n\r\n                                </div>\r\n                                \r\n                            </div>\r\n                        </div>\r\n\r\n                    {/* </div> */}\r\n                </div>\r\n\r\n                <footer>\r\n                    <p className=\"text-sm font-small text-gray-600\">Invincible Services | 2021 | Thank you for using our services</p>\r\n                </footer>\r\n\r\n            </main>\r\n\r\n            :\r\n            <div className=\"m-auto\">\r\n                        \r\n                <BounceLoader color={'#302f2f'} loading={true} size={25} />\r\n                    \r\n            </div>\r\n            }\r\n\r\n            </div>\r\n        \r\n        </>\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default Licenses","E:\\dashboard-react\\src\\components\\licenses\\licenseModal.js",[],"E:\\dashboard-react\\src\\components\\licenses\\table.js",["136","137","138","139","140"],"E:\\dashboard-react\\src\\components\\users\\table.js",["141","142","143","144","145"],"E:\\dashboard-react\\src\\components\\settings\\settings.js",["146","147","148","149","150","151","152","153"],"E:\\dashboard-react\\src\\components\\home\\planTable.js",["154"],"import '../../static/styles/main.css'; \r\nimport React, { useState, useEffect } from 'react';\r\nimport currencyToSymbolMap from 'currency-symbol-map/map'\r\nimport PlanEditModal from './planEditModal'\r\n\r\nimport { AiOutlineDelete, AiOutlineEdit } from 'react-icons/ai';\r\nimport { BsThreeDots } from 'react-icons/bs';\r\nimport SquareLoader from \"react-spinners/SquareLoader\";\r\n\r\nconst PlanTable = () => {\r\n\r\n    const [plans, setPlans] = useState([])\r\n    const [loaded, setLoaded] = useState(false)\r\n\r\n    async function fetchPlans(){\r\n        const res = await fetch('/plans');\r\n        res.json()\r\n        .then(res => {\r\n            setPlans(res)\r\n            setLoaded(true)\r\n        })\r\n        .catch(err =>  fetchPlans());\r\n        \r\n    }\r\n\r\n\r\n    useEffect(() =>{\r\n        var abortController = new AbortController();\r\n        fetchPlans()\r\n\r\n\r\n        setInterval(() => {\r\n            abortController = new AbortController();\r\n            fetchPlans()\r\n\r\n        }, 5000);\r\n\r\n\r\n        return () => {\r\n            abortController.abort();\r\n        };\r\n\r\n    }, [])\r\n\r\n\r\n\r\n    const deletePlan =  async (id) => {\r\n        await fetch('/plans/delete/' + id)\r\n\r\n    }\r\n\r\n\r\n    const renderTableRows = () => {\r\n        return plans.map(plan => {\r\n            return (\r\n                <tr key={plan.id}>\r\n\r\n                    <td className=\"px-6 py-3 max-w-0 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-white dark:bg-darkOther-200\">\r\n                        <div className=\"flex items-center lg:pl-2\">\r\n                            {/* <div className=\"flex-shrink-0 w-2.5 h-2.5 rounded-full bg-pink-600\" aria-hidden=\"true\"></div> */}\r\n                            {plan.planName}\r\n                        </div>\r\n                    </td>\r\n\r\n                    <td className=\"px-6 py-3 text-sm text-gray-800 dark:text-white font-medium dark:bg-darkOther-200\">\r\n                        <div className=\"flex items-center space-x-2\">\r\n                            <span className=\"flex-shrink-0 text-xs leading-5 font-medium\"> {currencyToSymbolMap[plan.currency]}{plan.price} / {plan.intervalType}</span>\r\n                        </div>\r\n                    </td>\r\n\r\n\r\n\r\n                    <td className=\"pr-6 dark:bg-darkOther-200 dark:text-white\">\r\n                        <div className=\"relative flex justify-end items-center\">\r\n                        <button id={`${plan.id}-plans-dropdown-button-hide`} name=\"plans-options-dropdown\" aria-haspopup=\"true\" type=\"button\" aria-expanded=\"true\" className=\"dark:text-white w-8 h-8 inline-flex items-center justify-center text-gray-800 rounded-full hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500\"  onClick={() => {\r\n                            document.querySelector('#plans-options-dropdown-' + plan.id).classList.contains('hidden') ? document.querySelector('#plans-options-dropdown-' + plan.id).classList.remove('hidden') : document.querySelector('#plans-options-dropdown-' + plan.id).classList.add('hidden')\r\n                        }}>\r\n                            <BsThreeDots className=\"h-4 w-4\" id={`${plan.id}-icon-hide`} />\r\n                        </button>\r\n\r\n                        <div id={`plans-options-dropdown-${plan.id}`} type=\"button\" className=\"dark:bg-darkOther-200 hidden mx-3 mr-10 origin-top-right absolute right-7 top-0 w-48 mt-1 rounded-md shadow-lg z-10 bg-white ring-1 ring-black ring-opacity-5\" role=\"menu\" aria-orientation=\"vertical\" aria-labelledby=\"project-options-menu-0\">\r\n                            <div className=\"py-1\" role=\"none\">\r\n                            <button  id={`plans-edit-${plan.id}`} className=\"group flex items-center px-4 w-full py-2 text-sm text-gray-700 hover:bg-gray-100 hover:text-gray-900 dark:hover:bg-darkOther-300 dark:text-white\" role=\"menuitem\" onClick={() => {\r\n                            document.querySelector('#plan-modal-edit').classList.contains('hidden') ? document.querySelector('#plan-modal-edit').classList.remove('hidden') : document.querySelector('#plan-modal-edit').classList.add('hidden')\r\n                            }}>\r\n                            <AiOutlineEdit className=\"mr-3 h-5 w-5 text-gray-400 group-hover:text-gray-500\" />\r\n                                Edit\r\n                            </button>\r\n                            <button id={`plans-delete-${plan.id}`} type=\"button\" className=\"group flex w-full items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 hover:text-gray-900 dark:hover:bg-darkOther-300 dark:text-white\" role=\"menuitem\" onClick={() => deletePlan(plan.id)}>\r\n                                <AiOutlineDelete className=\"mr-3 h-5 w-5 text-gray-400 group-hover:text-gray-500\" onClick={() => deletePlan(plan.id)}/>\r\n                                Delete\r\n                            </button>\r\n                            </div>\r\n                        </div>\r\n                        </div>\r\n                    </td>\r\n\r\n                    <PlanEditModal {...plan} />\r\n\r\n                </tr>\r\n            )\r\n            \r\n        })\r\n    }\r\n    \r\n\r\n\r\n\r\n    return (\r\n\r\n            <table className=\"bg-white w-full overflow-y-auto mt-2 rounded-md\" id=\"table\">\r\n\r\n                <thead className=\"bg-gray-200 rounded-md dark:bg-darkOther-100\">\r\n\r\n                    <tr className=\"border-gray-200\">\r\n\r\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider select-none\">\r\n                        <span className=\"lg:pl-2 \"> Plan</span>\r\n                        </th>\r\n\r\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider select-none\">\r\n                            Interval\r\n                        </th>\r\n\r\n\r\n\r\n                        <th className=\"md:table-cell px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider select-none\">\r\n                            Options\r\n                        </th>\r\n\r\n                    </tr>\r\n\r\n                </thead>\r\n                \r\n                <tbody className=\"bg-white divide-y divide-gray-200 dark:divide-gray-500 w-full\">\r\n                    {loaded ? renderTableRows() : \r\n                        <tr>\r\n\r\n                            <td className=\"px-6 py-3 max-w-0 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-white dark:bg-darkOther-200\">\r\n                                <div className=\"flex items-center lg:pl-2\">\r\n                                    <SquareLoader color={'#302f2f'} loading={true} size={25} />\r\n                                </div>\r\n                            </td>\r\n\r\n                            <td className=\"px-6 py-3 text-sm text-gray-800 dark:text-white font-medium dark:bg-darkOther-200\">\r\n                                <div className=\"flex items-center space-x-2\">\r\n                                    <span className=\"flex-shrink-0 text-xs leading-5 font-medium\"> <SquareLoader color={'#302f2f'} loading={true} size={25} /> </span>\r\n                                </div>\r\n                            </td>\r\n\r\n\r\n\r\n                            <td className=\"pr-6 dark:bg-darkOther-200 dark:text-white\">\r\n                                <div className=\"relative flex justify-end items-center\">\r\n                                <SquareLoader color={'#302f2f'} loading={true} size={25} />\r\n\r\n                                </div>\r\n                            </td>\r\n\r\n\r\n                        </tr>\r\n                    }\r\n                </tbody>\r\n                \r\n            </table>\r\n\r\n    )\r\n\r\n\r\n}\r\nexport default PlanTable","E:\\dashboard-react\\src\\components\\home\\restockTable.js",["155"],"import '../../static/styles/main.css'; \r\nimport React, { useState, useEffect } from 'react';\r\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\r\nimport ProgressBar from \"@ramonak/react-progress-bar\";\r\n\r\n\r\nimport { AiOutlineDelete, AiOutlineCopy } from 'react-icons/ai';\r\nimport { BsThreeDots } from 'react-icons/bs';\r\nimport SquareLoader from \"react-spinners/SquareLoader\";\r\n\r\n\r\nconst RestockTable = () => {\r\n    const [restocks, setRestocks] = useState([])\r\n    const [loaded, setLoaded] = useState(false)\r\n\r\n    async function fetchRestocks(){\r\n        const res = await fetch('/restocks');\r\n        res.json()\r\n        .then(res => {\r\n            setRestocks(res)\r\n            setLoaded(true)\r\n        })\r\n        .catch(err =>  fetchRestocks());\r\n        \r\n    }\r\n\r\n    useEffect(() =>{\r\n        var abortController = new AbortController();\r\n        fetchRestocks()\r\n        \r\n\r\n        setInterval(() => {\r\n            abortController = new AbortController();\r\n            fetchRestocks()\r\n        }, 5000);\r\n\r\n\r\n        return () => {\r\n            abortController.abort();\r\n        };\r\n\r\n    }, [])\r\n\r\n    const deleteRestock = async (id) => {\r\n        var response = await fetch('/restocks/delete/' + id, {\r\n            method:'get',\r\n            headers: {\r\n                authorization:1\r\n            }\r\n        })\r\n        if(response.ok) {\r\n            return\r\n        }else{\r\n            return\r\n        }\r\n    }\r\n\r\n\r\n    const renderTableRows = () => {\r\n        return restocks.map(restock => {\r\n            return (\r\n                <tr key={restock.id}>\r\n\r\n                    <td className=\"px-6 py-3 max-w-0 whitespace-nowrap text-sm font-medium text-gray-900 dark:bg-darkOther-200 dark:text-white\">\r\n                        <div className=\"flex items-center lg:pl-2\">\r\n                            {/* <div className=\"flex-shrink-0 w-2.5 h-2.5 rounded-full bg-pink-600\" aria-hidden=\"true\"></div> */}\r\n                            {restock.planName}\r\n                        </div>\r\n                    </td>\r\n\r\n                    <td className=\"px-6 py-3 text-sm text-gray-800 font-medium dark:bg-darkOther-200 dark:text-white\">\r\n                        <div className=\"flex items-center space-x-2\">\r\n\r\n                        <span className=\"flex-shrink-0 text-xs leading-5 font-medium w-full\"><ProgressBar bgcolor='#3B82F6' completed={(100 * restock.stockRemaining) / restock.stock} /></span>\r\n                        </div>\r\n                    </td>\r\n\r\n                    <td className=\"pr-6 dark:bg-darkOther-200 dark:text-white\">\r\n                        <div className=\"relative flex justify-end items-center\">\r\n                            <button id=\"restock-options-button-hide\" name=\"restock-options-dropdown\" aria-haspopup=\"true\" type=\"button\" aria-expanded=\"true\" className=\"w-8 h-8 inline-flex items-center justify-center text-gray-800 rounded-full hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500 dark:text-white\" onClick={() => {\r\n                                document.querySelector('#restock-options-dropdown-' + restock.id).classList.contains('hidden') ? document.querySelector('#restock-options-dropdown-' + restock.id).classList.remove('hidden') : document.querySelector('#restock-options-dropdown-'  + restock.id).classList.add('hidden')\r\n                            }}>\r\n                            <BsThreeDots className=\"h-4 w-4\" id='hide'/>\r\n                            </button>\r\n\r\n                            <div id={\"restock-options-dropdown-\" + restock.id} className=\"dark:bg-darkOther-200 hidden mx-3 mr-10 origin-top-right absolute right-7 top-0 w-48 mt-1 rounded-md shadow-lg z-10 bg-white ring-1 ring-black ring-opacity-5\" role=\"menu\" aria-orientation=\"vertical\" aria-labelledby=\"project-options-menu-0\">\r\n                                <div className=\"py-1\" role=\"none\">\r\n                                    <CopyToClipboard href=\"#\" className=\"group flex w-full items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 hover:text-gray-900 dark:hover:bg-darkOther-300 dark:text-white\" role=\"menuitem\" text={`${window.location.origin}/?password=${restock.password}`} onCopy={() => {\r\n                                    document.querySelector('#copy-hide-' + restock.id).classList.add('text-green-500')\r\n                                    setTimeout(() => {\r\n                                        document.querySelector('#copy-hide-' + restock.id).classList.remove(['text-green-500'])\r\n                                    }, 1500);\r\n                                    }}>\r\n                                    <button className=\"w-full\" type='button' id={\"restock-options-dropdown-copy-\" + restock.id}>\r\n                                        <AiOutlineCopy className=\"mr-3 h-5 w-5 text-gray-400 group-hover:text-gray-500\" id={'copy-hide-'+ restock.id}/>\r\n                                        Copy Restock\r\n                                    </button>\r\n                                    </CopyToClipboard>\r\n\r\n                                    <button type='button' className=\"group flex w-full items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 hover:text-gray-900 dark:hover:bg-darkOther-300 dark:text-white\" role=\"menuitem\" onClick={() => deleteRestock(restock.id)} >\r\n                                        <AiOutlineDelete className=\"mr-3 h-5 w-5 text-gray-400 group-hover:text-gray-500\" onClick={() => deleteRestock(restock.id)}/>\r\n                                        Delete\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n\r\n                        </div>\r\n                    \r\n                    </td>\r\n\r\n                </tr>\r\n            )\r\n            \r\n        })\r\n    }\r\n\r\n\r\n\r\n    return (\r\n\r\n            <table className=\"bg-white w-full overflow-y-auto mt-2 rounded-md\" id='table'>\r\n\r\n                <thead className=\"bg-gray-200 rounded-md dark:bg-darkOther-100\">\r\n                    <tr className=\"border-gray-200\">\r\n\r\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider select-none\">\r\n                            <span className=\"lg:pl-2\">Plan</span>\r\n                        </th>\r\n\r\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-widerr select-none\">\r\n                            Stock\r\n                        </th>\r\n\r\n                        <th className=\"md:table-cell px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider select-none\">\r\n                            Options\r\n                        </th>\r\n\r\n                    </tr>\r\n                </thead>\r\n                \r\n                <tbody className=\"bg-white divide-y divide-gray-200 dark:divide-gray-500 w-full\">\r\n                {loaded ? renderTableRows() : \r\n\r\n                <tr>\r\n\r\n                <td className=\"px-6 py-3 max-w-0 whitespace-nowrap text-sm font-medium text-gray-900 dark:bg-darkOther-200 dark:text-white\">\r\n                    <div className=\"flex items-center lg:pl-2\">\r\n                    <SquareLoader color={'#302f2f'} loading={true} size={25} />\r\n                    </div>\r\n                </td>\r\n\r\n                <td className=\"px-6 py-3 text-sm text-gray-800 font-medium dark:bg-darkOther-200 dark:text-white\">\r\n                    <div className=\"flex items-center space-x-2\">\r\n\r\n                    <span className=\"flex-shrink-0 text-xs leading-5 font-medium w-full\"><SquareLoader color={'#302f2f'} loading={true} size={25} /></span>\r\n                    </div>\r\n                </td>\r\n\r\n                <td className=\"pr-6 dark:bg-darkOther-200 dark:text-white\">\r\n                    <div className=\"relative flex justify-end items-center\">\r\n                    <SquareLoader color={'#302f2f'} loading={true} size={25} />\r\n\r\n                    </div>\r\n\r\n                </td>\r\n\r\n                </tr>\r\n                \r\n                }\r\n                </tbody>\r\n                \r\n            </table>\r\n\r\n    )\r\n\r\n\r\n}\r\nexport default RestockTable","E:\\dashboard-react\\src\\components\\siteHomePage\\home.js",["156","157","158"],"import '../../static/styles/main.css'; \r\nimport React, { useState, useEffect } from 'react';\r\n\r\n\r\nconst Settings = () => {\r\n    const [name, setName] = useState(\"\")\r\n    const [logo, setLogo] = useState(\"\")\r\n    const [description, setDescription] = useState(\"\")\r\n    const [loaded, setLoaded] = useState(false)\r\n    \r\n    async function fetchData(){\r\n        const res = await fetch('/accounts/dashboard');\r\n        res.json()\r\n        .then(res => {\r\n            setName(res[0].name)\r\n            setLogo(res[0].branding.logoUrl)\r\n            setDescription(res[0].description)\r\n            setLoaded(true)\r\n        })\r\n        .catch(err =>  {\r\n            fetchData()\r\n        });\r\n        \r\n    }\r\n\r\n    useEffect(() =>{\r\n        const abortController = new AbortController();\r\n        localStorage.setItem('pswd',window.location.search.split('?password=')[1])\r\n        fetchData()\r\n\r\n        return () => {\r\n            abortController.abort();\r\n        };\r\n\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <>\r\n\r\n            <div className=\"w-full bg-gray-50\">\r\n            <div className=\"w-full bg-white shadow\">\r\n                <div className=\"max-w-7xl mx-auto px-4 sm:px-6\">\r\n                <div className=\"flex justify-between items-center py-6 md:justify-start md:space-x-10\">\r\n                    <div className=\"flex justify-start lg:w-0 lg:flex-1\">\r\n                    <a href=\"#\">\r\n                        <span className=\"sr-only\">Workflow</span>\r\n                        <img className=\"h-8 w-auto sm:h-10\" src=\"https://tailwindui.com/img/logos/workflow-mark-other-200.svg\" alt=\"\" />\r\n                    </a>\r\n                    </div>\r\n                    <div className=\"-mr-2 -my-2 md:hidden\">\r\n                    <button type=\"button\" className=\"bg-white rounded-md p-2 inline-flex items-center justify-center text-gray-400 hover:text-gray-500 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-indigo-500\">\r\n                        <span className=\"sr-only\">Open menu</span>\r\n    \r\n                        <svg className=\"h-6 w-6\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" aria-hidden=\"true\">\r\n                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M4 6h16M4 12h16M4 18h16\" />\r\n                        </svg>\r\n                    </button>\r\n                    </div>\r\n\r\n                </div>\r\n                </div>\r\n\r\n\r\n            \r\n            </div>\r\n\r\n            <main className=\"lg:relative\">\r\n                <div className=\"mx-auto max-w-7xl w-full pt-16 pb-20 text-center lg:py-48 lg:text-left\">\r\n                <div className=\"px-4 lg:w-1/2 sm:px-8 xl:pr-16\">\r\n                    <h1 className=\"text-4xl tracking-tight font-extrabold text-gray-900 sm:text-5xl md:text-6xl lg:text-5xl xl:text-6xl\">\r\n                    <span className=\"block xl:inline select-none\">welcome to</span>\r\n                    <span className=\"block text-other-900 dark:text-darkOther-200 xl:inline select-none\"> {loaded ? name : \"Placeholder\"}</span>\r\n                    </h1>\r\n                    <p className=\"mt-3 max-w-md mx-auto text-lg text-gray-500 sm:text-xl md:mt-5 md:max-w-3xl select-none\">\r\n                    {loaded ? description : \"...\"}\r\n                    </p>\r\n                    <div className=\"mt-10 sm:flex sm:justify-center lg:justify-start\">\r\n                    <div className=\"rounded-md shadow\">\r\n                        <a href={'http://127.0.0.1:4000' + '/discord/oauth'} className=\"select-none dark:bg-darkOther-200 dark:hover:bg-darkOther-300 w-full flex items-center justify-center px-8 py-3 border border-transparent text-base font-medium rounded-md text-white bg-other-900 md:py-4 md:text-lg md:px-10\">\r\n                        Dashboard\r\n                        </a>\r\n                    </div>\r\n                    <div className=\"mt-3 rounded-md shadow sm:mt-0 sm:ml-3\">\r\n                        <a href=\"/purchase\" className=\"select-none w-full flex items-center justify-center px-8 py-3 border border-transparent text-base font-medium rounded-md text-other-200 dark:text-darkOther-200 bg-white hover:bg-gray-50 md:py-4 md:text-lg md:px-10\">\r\n                        Purchase\r\n                        </a>\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n                </div>\r\n                <div className=\"relative w-full h-64 sm:h-72 md:h-96 lg:absolute lg:inset-y-0 lg:right-0 lg:w-1/2 lg:h-full\">\r\n                <img className=\"absolute inset-0 px-24 m-auto\" src={logo} alt=\"\" />\r\n                </div>\r\n            </main>\r\n            </div>\r\n\r\n        \r\n        </>\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default Settings","E:\\dashboard-react\\src\\components\\userDashboard\\dashboard.js",["159","160","161","162","163","164","165","166"],"E:\\dashboard-react\\src\\components\\bindPage\\bindPage.js",["167","168","169"],"E:\\dashboard-react\\src\\components\\userNav.js",["170","171"],"import '../static/styles/main.css'; \r\nimport React, {useState, useEffect} from 'react';\r\nimport BounceLoader from \"react-spinners/BounceLoader\";\r\n\r\n\r\n\r\nconst UserNav = () =>  {\r\n    const [loaded, setLoaded] = useState(false)\r\n    const [img, setImg] = useState(\"\")\r\n\r\n    async function fetchData(){\r\n        const res = await fetch('/api/v1/accounts/data');\r\n        res.json()\r\n        .then(res => {\r\n            setImg(res.serverImage)\r\n            setLoaded(true)\r\n        })\r\n        .catch(err =>  {\r\n            fetchData()\r\n        });\r\n        \r\n    }\r\n\r\n\r\n    useEffect(() =>{\r\n        var abortController = new AbortController();\r\n        fetchData()\r\n\r\n\r\n\r\n\r\n        return () => {\r\n            abortController.abort();\r\n        };\r\n\r\n    }, [])\r\n\r\n\r\n    // render() {\r\n        return (\r\n\r\n            <>\r\n            <nav>\r\n                <div className=\"\">\r\n                    <div className=\"h-16 text-left\">\r\n\r\n                        <div className=\"text-left\">\r\n                            {loaded ? <img className=\"block h-24 w-auto rounded-full p-2\" src={img}/> : <BounceLoader color={'#302f2f'} loading={true} size={25} /> }\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n\r\n            </nav>\r\n            </>\r\n        )\r\n}\r\n\r\nexport default UserNav;","E:\\dashboard-react\\src\\components\\home\\planEditModal.js",["172","173","174","175"],"import '../../static/styles/main.css'; \r\nimport React, { useEffect, useState } from 'react';\r\nimport Select from 'react-select';\r\nimport makeAnimated from 'react-select/animated';\r\nimport chroma from 'chroma-js';\r\nimport { Switch } from '@headlessui/react'\r\n\r\n\r\nimport { AiOutlineClose } from 'react-icons/ai';\r\nimport { IoPricetagOutline } from 'react-icons/io5';\r\n\r\n\r\n\r\nconst PlanEditModal = (currentPlanData) => {\r\n\r\n    const [availableRoles, setavailableRoles] = useState([])\r\n    const [planName, setplanName] = useState(\"\")\r\n    const [planRole, setplanRole] = useState()\r\n    const [unbinding, setunbinding] = useState(true)\r\n\r\n    async function fetchPlans(){\r\n        const res = await fetch('/discord/guild/roles');\r\n        res.json()\r\n        .then(res => {\r\n            var currentRoles = JSON.parse(JSON.stringify(currentPlanData.role))\r\n            setavailableRoles(res.roles)\r\n\r\n            setplanRole(currentRoles)\r\n        })\r\n        .catch(err =>  {console.log(err)});\r\n        \r\n    }\r\n\r\n    useEffect(() =>{\r\n        const abortController = new AbortController();\r\n        fetchPlans()\r\n\r\n\r\n\r\n        return () => {\r\n            abortController.abort();\r\n        };\r\n\r\n    }, [])\r\n\r\n    const colourStyles = {\r\n        control: styles => ({ ...styles, backgroundColor: localStorage.getItem('mode') }),\r\n        option: (styles, { data, isDisabled, isFocused, isSelected }) => {\r\n          const color = chroma(data.color);\r\n          return {\r\n            ...styles,\r\n            backgroundColor: isDisabled\r\n              ? null\r\n              : isSelected\r\n              ? data.color\r\n              : isFocused\r\n              ? color.alpha(0.1).css()\r\n              : null,\r\n            color: isDisabled\r\n              ? '#ccc'\r\n              : isSelected\r\n              ? chroma.contrast(color, 'white') > 2\r\n                ? 'white'\r\n                : 'black'\r\n              : data.color,\r\n            cursor: isDisabled ? 'not-allowed' : 'default',\r\n      \r\n            ':active': {\r\n              ...styles[':active'],\r\n              backgroundColor:\r\n                !isDisabled && (isSelected ? data.color : color.alpha(0.3).css()),\r\n            },\r\n          };\r\n        },\r\n        multiValue: (styles, { data }) => {\r\n          const color = chroma(data.color);\r\n          return {\r\n            ...styles,\r\n            backgroundColor: color.alpha(0.1).css(),\r\n          };\r\n        },\r\n        multiValueLabel: (styles, { data }) => ({\r\n          ...styles,\r\n          color: data.color,\r\n        }),\r\n        multiValueRemove: (styles, { data }) => ({\r\n          ...styles,\r\n          color: data.color,\r\n          ':hover': {\r\n            backgroundColor: data.color,\r\n            color: 'white',\r\n          },\r\n        }),\r\n      };\r\n    const colourStyle = {\r\n        control: styles => ({ ...styles, backgroundColor: localStorage.getItem('mode') }),\r\n\r\n    }\r\n\r\n\r\n    \r\n    const submitHandler = async (e) => {\r\n        e.preventDefault()\r\n\r\n        if(planName.length > 0) {\r\n            var response = await fetch('/plans/add', {\r\n                method:'post',\r\n                body:JSON.stringify({\r\n                    \r\n                }),\r\n                \"headers\": {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            })\r\n            if(response.ok) {\r\n\r\n                return\r\n            }else{\r\n                return\r\n            }\r\n        }\r\n        else{\r\n            return;\r\n        }\r\n    }\r\n\r\n        \r\n        return (\r\n                <div className=\"fixed z-10 inset-0 overflow-y-auto hidden\" id=\"plan-modal-edit\">\r\n            \r\n                    <form onSubmit={submitHandler}>\r\n                        <div className=\"flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0\">\r\n\r\n                            <div className=\"fixed inset-0 transition-opacity\" aria-hidden=\"true\">\r\n                                <div className=\"absolute inset-0 bg-gray-500 opacity-75\"></div>\r\n                            </div>\r\n                \r\n                            <span className=\"hidden sm:inline-block sm:align-middle sm:h-screen\" aria-hidden=\"true\">&#8203;</span>\r\n\r\n            \r\n                            <div className=\"inline-block align-bottom bg-white rounded-lg px-4 pt-5 pb-4 text-left shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-sm sm:w-full sm:p-6 dark:bg-darkOther-200\" role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"modal-headline\">\r\n                        \r\n                                <div>\r\n                                    <button type=\"button\" onClick={() => {\r\n                                        document.querySelector('#plan-modal-edit').classList.contains('hidden') ? document.querySelector('#plan-modal-edit').classList.remove('hidden') : document.querySelector('#plan-modal-edit').classList.add('hidden')\r\n                                    }}><AiOutlineClose className=\"text-red-500 h-6 w-6 \" id='hide' /></button>\r\n\r\n\r\n                                    <div className=\"mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-green-100\">\r\n            \r\n                                    \r\n                                    <IoPricetagOutline className=\"h-6 w-6 text-green-600 select-none\" id='hide'/>\r\n                                </div>\r\n        \r\n\r\n                                <div className=\"mt-3 text-center sm:mt-5\">  \r\n                                    <h3 className=\"text-lg leading-6 font-medium text-gray-900 dark:text-white select-none\" id=\"modal-headline\">\r\n                                    Edit Plan\r\n                                    </h3>\r\n        \r\n                                    <div className=\"mt-2\">\r\n                                        \r\n                                        <div>\r\n\r\n                                            <fieldset className=\"mt-2 bg-white dark:bg-darkOther-200\">\r\n                                                <div className=\"md:grid md:grid-cols-2\">\r\n                                                <div className=\"\">\r\n                                                        <legend className=\"block text-sm font-medium text-gray-700 text-left dark:text-gray-300 select-none\">Plan Name</legend>\r\n                                                        <div className=\"mt-1 rounded-md shadow-sm -space-y-px\">\r\n                                                            <div>\r\n                                                            <label className=\"block text-sm font-medium text-gray-700\"></label>\r\n                                                            <input  name=\"planName\" id=\"name\" autoComplete=\"off\" className=\"dark:text-white dark:bg-darkOther-200 focus:ring-other-200 focus:border-other-200 block w-full font-medium text-md rounded-md py-2 dark:focus:ring-darkOther-200 dark:focus:border-darkOther-200\" \r\n                                                            placeholder=\"Member\" value={currentPlanData.planName} onChange={e => setplanName(e.target.value)} />                                                         \r\n                                                            \r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                    \r\n                                                    <div className=\"\">\r\n                                                        <legend className=\"block text-sm font-medium text-gray-700 text-left dark:text-gray-300 select-none\">Type</legend>\r\n                                                        <div className=\"mt-1 rounded-md shadow-sm -space-y-px\">\r\n                                                            <div>\r\n                                                                <label className=\"sr-only\">type</label>\r\n                                                                \r\n                                                                <Select isDisabled defaultValue={{\"label\":currentPlanData.type, \"value\":currentPlanData.type}} styles={colourStyle} placeholder=\"Plan Type\" id=\"type\" name=\"planType\" className=\"focus:ring-other-200 focus:border-other-200 relative block w-full rounded-none rounded-t-md bg-transparent focus:z-10 font-medium text-md dark:focus:border-darkOther-200 dark:focus:ring-darkOther-200\"/>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                \r\n                                                </div>\r\n                \r\n                                            </fieldset>\r\n\r\n                                            {currentPlanData.type == \"recurring\" ?  <fieldset className=\"mt-2 bg-white dark:bg-darkOther-200\">\r\n                                                <div className=\"md:grid md:grid-cols-2\">\r\n                                                <div className=\"\">\r\n                                                        <legend className=\"block text-sm font-medium text-gray-700 text-left dark:text-gray-300 select-none\">Interval</legend>\r\n                                                        <div className=\"mt-1 rounded-md shadow-sm -space-y-px\">\r\n                                                            <div className=\"mt-1 flex rounded-md shadow-sm -space-y-px\">\r\n                                                                <span className=\"inline-flex items-center px-3 rounded-l-md border-r-2 border-gray-200 bg-gray-50 text-gray-800 sm:text-sm mr-2 dark:bg-darkOther-100 dark:text-white select-none\">\r\n                                                                    every\r\n                                                                </span>\r\n                                                                <input isDisabled name=\"interval\" id=\"interval\" type=\"text\" placeholder=\"Count\" autoComplete=\"off\" className=\"dark:text-white dark:bg-darkOther-200 block w-full font-medium text-md rounded-md py-2 \" value={currentPlanData.interval}/>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                    \r\n                                                    <div className=\"\">\r\n                                                        <legend className=\"block text-sm font-medium text-gray-700 text-left dark:text-gray-300 select-none\">Interval Type</legend>\r\n                                                        <div className=\"mt-1 rounded-md shadow-sm -space-y-px\">\r\n                                                            <div>\r\n                                                                <label className=\"sr-only select-none\">Interval Type</label>\r\n                                                                \r\n                                                                <Select isDisabled styles={colourStyle} id=\"type\" defaultValue={{\"label\":currentPlanData.intervalType, \"value\":currentPlanData.intervalType}}  name=\"intervalType\" placeholder=\"Interval\" \r\n                                                                className=\"focus:ring-other-200 focus:border-other-200 relative block w-full rounded-none rounded-t-md focus:z-10 font-medium text-md dark:focus:border-darkOther-200 dark:focus:ring-darkOther-200\"/>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                \r\n                                                </div>\r\n                \r\n                                            </fieldset> : <div></div> }\r\n\r\n                           \r\n                                        \r\n\r\n                                            <fieldset className=\"mt-4 bg-white dark:bg-darkOther-200\">\r\n                                                <legend className=\"block text-sm font-medium text-gray-700 text-left dark:text-gray-300 select-none\">Price</legend>\r\n                                                <div className=\"mt-1 bg-white rounded-md shadow-sm dark:bg-darkOther-200\">\r\n                                                    <div>\r\n                                                        <div className=\"mt-1 relative rounded-md shadow-sm\">\r\n                                                            <input isDisabled type=\"text\" name=\"price\" id=\"price\" className=\"dark:text-white dark:bg-darkOther-200 focus:ring-other-200 focus:border-other-200 block w-full font-medium text-md  rounded-md py-2 dark:focus:border-darkOther-200 dark:focus:ring-darkOther-200\" \r\n                                                            placeholder=\"0.00\" value={currentPlanData.price}/>\r\n\r\n                                                            <div className=\"absolute inset-y-0 right-0 flex items-center\">\r\n                                                                <label className=\"sr-only\">Currency</label>\r\n                                                                <Select isDisabled styles={colourStyle}  id=\"type\" name=\"priceCurrency\" placeholder=\"Currency\" className=\"px-3 w-48 dark:bg-darkOther-200\"\r\n                                                                defaultValue={{\"label\":currentPlanData.currency, \"value\":currentPlanData.currency}}/>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </div>\r\n                                            \r\n                                            </fieldset>\r\n        \r\n                                            <fieldset className=\"mt-2 bg-whit dark:bg-darkOther-200\" id=\"interval-fieldset\">\r\n                                                    <div className=\"\">\r\n                                                        <legend className=\"block text-sm font-medium text-gray-700 text-left dark:text-gray-300 select-none\">Roles</legend>\r\n                                                        <div className=\"mt-1 rounded-md shadow-sm -space-y-px\">\r\n                                                            <div>\r\n                                                                <label className=\"sr-only\">roles</label>\r\n                                                                <Select id=\"roles\" defaultValue={JSON.parse(currentPlanData.role)} isMulti placeholder=\"Roles\" name=\"roles\" closeMenuOnSelect={false} styles={colourStyles} name=\"planRole\" isSearchable components={makeAnimated()} options={availableRoles} className=\"focus:ring-other-200 focus:border-other-200 relative block w-full rounded-none rounded-t-md bg-transparent focus:z-10 font-medium text-md dark:focus:border-darkOther-200 dark:focus:ring-darkOther-200\"\r\n                                                                    onChange={e => setplanRole(e)} />\r\n                                                                                                                                    \r\n                                                            \r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                            \r\n                                            </fieldset>\r\n\r\n                                            <fieldset className=\"mt-2 bg-white dark:bg-darkOther-200\" id=\"interval-fieldset\">\r\n                                                    <div className=\"\">\r\n                                                        <legend className=\"block text-sm font-medium text-gray-700 text-left dark:text-gray-300 select-none\">{unbinding ? \"Unbinding Enabled\" : \"Unbinding Disabled\"}</legend>\r\n                                                        <div className=\"mt-1 rounded-md shadow-sm -space-y-px\">\r\n                                                            <div className=\"text-left\">\r\n                                                                <label className=\"sr-only\">allow unbinding</label>\r\n                                                                <Switch \r\n                                                                checked={unbinding}\r\n                                                                onChange={e => setunbinding(e)}\r\n                                                                as=\"button\" \r\n                                                                className={`${unbinding ? \"bg-green-400\" : \"bg-gray-200\"} relative inline-flex flex-shrink-0 h-6 w-11 border-2 border-transparent rounded-full cursor-pointer transition-colors ease-in-out duration-200 focus:outline-none`}>\r\n\r\n                                                                    {unbinding ? \r\n                                                                    <span aria-hidden=\"true\" className=\"pointer-events-none translate-x-0 inline-block h-5 w-5 rounded-full bg-white shadow transform ring-0 transition ease-in-out duration-200\"></span> : \r\n                                                                    <span aria-hidden=\"true\" className=\"pointer-events-none translate-x-5 inline-block h-5 w-5 rounded-full bg-white shadow transform ring-0 transition ease-in-out duration-200\"></span>\r\n                                                                    }\r\n\r\n                                                                </Switch>\r\n                                                                            \r\n                                                                                                                                    \r\n                                                            \r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                            \r\n                                            </fieldset>\r\n        \r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"mt-5 sm:mt-6\">\r\n                                <button  name=\"license-modal\" type=\"submit\" className=\"inline-flex justify-center w-full rounded-md border border-transparent shadow-sm px-4 py-2 bg-blue-500 text-base font-medium text-white hover:bg-other-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-other-200 sm:text-sm dark:focus:ring-darkOther-200 dark:hover:bg-darkOther-200 dark:bg-darkOther-100\">\r\n                                    Update\r\n                                </button>\r\n                            </div>\r\n\r\n                        </div>\r\n                    \r\n                    </div>\r\n                    </form>\r\n            </div>\r\n\r\n        )\r\n\r\n}\r\nexport default PlanEditModal","E:\\dashboard-react\\src\\components\\purchasePage\\purchase.js",["176","177","178","179","180","181","182"],"E:\\dashboard-react\\src\\components\\purchasePage\\checkout.js",["183","184","185","186","187","188","189"],"import React, {useState, useEffect} from 'react';\r\nimport BeatLoader from \"react-spinners/BeatLoader\";\r\n\r\nimport {HiOutlineMail} from 'react-icons/hi'\r\nimport {loadStripe} from '@stripe/stripe-js';\r\nimport {\r\n  CardElement,\r\n  Elements,\r\n  useStripe,\r\n  useElements,\r\n} from '@stripe/react-stripe-js';\r\n\r\n\r\n\r\nconst CheckoutForm = () => {\r\n    const stripe = useStripe();\r\n    const elements = useElements();\r\n    const [checkoutStatus, setCheckoutStatus] = useState(\"idle\")\r\n    const [email, setEmail] = useState(\"\")\r\n    const [key, setKey] = useState(\"\")\r\n    const [availableStock, setAvailableStock] = useState(false)\r\n    const [pricingDetails, setPricingDetails] = useState(\"\")\r\n\r\n    async function fetchData(){\r\n        const res = await fetch('/restocks/data/' + localStorage.getItem('pswd'));\r\n        res.json()\r\n        .then(res => {\r\n            setAvailableStock(res.availableStock)\r\n            setPricingDetails(res.pricingDetails)\r\n        })\r\n        .catch(err =>  {\r\n            setAvailableStock(false)\r\n        });\r\n        \r\n    }\r\n\r\n    useEffect(() =>{\r\n        const abortController = new AbortController();\r\n        fetchData()\r\n\r\n\r\n        return () => {\r\n            abortController.abort();\r\n        };\r\n\r\n    }, [])\r\n\r\n\r\n\r\n\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n        if (['success','pending'].includes(checkoutStatus)) {\r\n            console.log(\"\")\r\n        }\r\n        else {\r\n\r\n            const {error, paymentMethod} = await stripe.createPaymentMethod({\r\n                type: 'card',\r\n                card: elements.getElement(CardElement),\r\n            });\r\n            if(error) {\r\n                setCheckoutStatus(\"failed\")\r\n            }\r\n\r\n            setCheckoutStatus(\"pending\")\r\n            var response = await fetch('/stripe/checkout', {\r\n                method:'post',\r\n                body:JSON.stringify({\r\n                    paymentMethod:paymentMethod,\r\n                    password:localStorage.getItem('pswd'),\r\n                    email:email\r\n                }),\r\n                \"headers\": {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            })\r\n            if(response.ok) {\r\n                if(response.status == 200) {\r\n                    setCheckoutStatus(\"success\")\r\n                    //setKey(await response.json().key)\r\n                }\r\n                else setCheckoutStatus(\"failed\")\r\n\r\n            } else {\r\n\r\n                setCheckoutStatus(\"failed\")\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <div className=\"w-full text-center\">\r\n            {availableStock ? <form onSubmit={handleSubmit}>\r\n\r\n                <fieldset>\r\n                <CardElement options={{\r\n                    style: {\r\n                    base: {\r\n                        fontSize: '16px',\r\n                        color: '#aab7c4',\r\n                        '::placeholder': {\r\n                        color: '#aab7c4',\r\n                        },\r\n                    },\r\n                    invalid: {\r\n                        color: '#9e2146',\r\n                    },\r\n                    },\r\n                }}/>\r\n                </fieldset>\r\n\r\n                <fieldset >\r\n                {/* <HiOutlineMail/> */}\r\n                    <div class=\"mt-3 relative rounded-md border-0\">\r\n                        <div class=\"absolute inset-y-0 left-0 flex items-center pointer-events-none\">\r\n                        <HiOutlineMail class=\"h-6 w-6 text-gray-400\"/>\r\n                        </div>\r\n                        <input type=\"text\" className=\"focus:outline-none md:text-md lg:text-md font-normal text-gray-500 w-full pl-8 sm:text-sm rounded-md p-3\" placeholder=\"email\" onChange={e => setEmail(e.target.value)} />\r\n                    </div>\r\n                </fieldset>\r\n                <p className=\"text-xs text-gray-400 font-medium select-none\">{pricingDetails}</p>\r\n\r\n                {\r\n                    checkoutStatus == \"idle\" ? <button type=\"submit\" disabled={!stripe} className=\"duration-150 transform hover:scale-105 motion-reduce:transform-none font-medium text-md rounded-md text-white bg-other-900 p-2 px-5 text-center mt-12\">Purchase Now</button> : \r\n                    checkoutStatus == \"failed\" ? <button type=\"submit\" disabled={!stripe} className=\"font-medium text-md rounded-md text-white bg-red-500 p-2 px-5 text-center mt-12\">Checkout Failed</button> :\r\n                    checkoutStatus == \"success\" ? <button type=\"submit\" disabled={!stripe} className=\"font-medium text-md rounded-md text-white bg-green-500 p-2 px-5 text-center mt-12\">Purchased</button> : \r\n                    checkoutStatus == \"pending\" ? <button type=\"submit\" disabled={!stripe} className=\"font-medium text-md rounded-md text-white bg-yellow-500 p-2 px-5 text-center mt-12\"><BeatLoader color={'#ffffff'} loading={true} size={10} /> </button> :\r\n                    <button type=\"submit\" disabled={!stripe} className=\"font-medium text-md rounded-md text-white bg-blue-500 p-2 px-5 text-center mt-12\">Purchase Now</button>     \r\n                }\r\n\r\n                </form> : <button type=\"submit\" className=\"font-medium text-md rounded-md text-white bg-red-500 p-2 px-5 text-center mt-12\">Sold Out</button>\r\n\r\n            }\r\n        </div>\r\n            \r\n    );\r\n};\r\n\r\nconst stripePromise = loadStripe('pk_test_yNOrvYEsFI7fmUNnIhuwUrFF00hyizaNIs');\r\n\r\nconst Checkout = () => (\r\n  <Elements stripe={stripePromise}>\r\n    <CheckoutForm />\r\n  </Elements>\r\n);\r\n\r\nexport default Checkout",{"ruleId":"190","replacedBy":"191"},{"ruleId":"192","replacedBy":"193"},{"ruleId":"194","severity":1,"message":"195","line":2,"column":49,"nodeType":"196","messageId":"197","endLine":2,"endColumn":60},{"ruleId":"194","severity":1,"message":"198","line":2,"column":28,"nodeType":"196","messageId":"197","endLine":2,"endColumn":37},{"ruleId":"194","severity":1,"message":"199","line":21,"column":43,"nodeType":"196","messageId":"197","endLine":21,"endColumn":45},{"ruleId":"194","severity":1,"message":"200","line":12,"column":8,"nodeType":"196","messageId":"197","endLine":12,"endColumn":20},{"ruleId":"194","severity":1,"message":"201","line":18,"column":12,"nodeType":"196","messageId":"197","endLine":18,"endColumn":18},{"ruleId":"202","severity":1,"message":"203","line":46,"column":8,"nodeType":"204","endLine":46,"endColumn":10,"suggestions":"205"},{"ruleId":"194","severity":1,"message":"206","line":2,"column":19,"nodeType":"196","messageId":"197","endLine":2,"endColumn":23},{"ruleId":"202","severity":1,"message":"207","line":18,"column":5,"nodeType":"196","endLine":18,"endColumn":14,"suggestions":"208"},{"ruleId":"202","severity":1,"message":"209","line":18,"column":16,"nodeType":"210","endLine":27,"endColumn":6},{"ruleId":"211","severity":1,"message":"212","line":26,"column":28,"nodeType":"213","messageId":"214","endLine":26,"endColumn":30},{"ruleId":"211","severity":1,"message":"212","line":30,"column":14,"nodeType":"213","messageId":"214","endLine":30,"endColumn":16},{"ruleId":"215","severity":1,"message":"216","line":69,"column":108,"nodeType":"217","endLine":69,"endColumn":121},{"ruleId":"215","severity":1,"message":"216","line":141,"column":108,"nodeType":"217","endLine":141,"endColumn":121},{"ruleId":"211","severity":1,"message":"212","line":75,"column":56,"nodeType":"213","messageId":"214","endLine":75,"endColumn":58},{"ruleId":"218","severity":1,"message":"219","line":75,"column":238,"nodeType":"220","endLine":75,"endColumn":382},{"ruleId":"215","severity":1,"message":"216","line":226,"column":102,"nodeType":"217","endLine":226,"endColumn":191},{"ruleId":"211","severity":1,"message":"212","line":235,"column":55,"nodeType":"213","messageId":"214","endLine":235,"endColumn":57},{"ruleId":"211","severity":1,"message":"212","line":235,"column":82,"nodeType":"213","messageId":"214","endLine":235,"endColumn":84},{"ruleId":"215","severity":1,"message":"216","line":257,"column":106,"nodeType":"217","endLine":257,"endColumn":223},{"ruleId":"215","severity":1,"message":"216","line":280,"column":120,"nodeType":"217","endLine":280,"endColumn":226},{"ruleId":"211","severity":1,"message":"212","line":288,"column":55,"nodeType":"213","messageId":"214","endLine":288,"endColumn":57},{"ruleId":"211","severity":1,"message":"212","line":305,"column":55,"nodeType":"213","messageId":"214","endLine":305,"endColumn":57},{"ruleId":"202","severity":1,"message":"203","line":38,"column":8,"nodeType":"204","endLine":38,"endColumn":10,"suggestions":"221"},{"ruleId":"194","severity":1,"message":"198","line":2,"column":27,"nodeType":"196","messageId":"197","endLine":2,"endColumn":36},{"ruleId":"194","severity":1,"message":"222","line":13,"column":20,"nodeType":"196","messageId":"197","endLine":13,"endColumn":29},{"ruleId":"194","severity":1,"message":"199","line":18,"column":39,"nodeType":"196","messageId":"197","endLine":18,"endColumn":41},{"ruleId":"202","severity":1,"message":"223","line":40,"column":8,"nodeType":"204","endLine":40,"endColumn":10,"suggestions":"224"},{"ruleId":"225","severity":1,"message":"226","line":74,"column":17,"nodeType":"227","messageId":"228","endLine":74,"endColumn":19},{"ruleId":"211","severity":1,"message":"212","line":125,"column":118,"nodeType":"213","messageId":"214","endLine":125,"endColumn":120},{"ruleId":"211","severity":1,"message":"212","line":126,"column":114,"nodeType":"213","messageId":"214","endLine":126,"endColumn":116},{"ruleId":"215","severity":1,"message":"216","line":171,"column":62,"nodeType":"217","endLine":171,"endColumn":72},{"ruleId":"211","severity":1,"message":"212","line":53,"column":48,"nodeType":"213","messageId":"214","endLine":53,"endColumn":50},{"ruleId":"211","severity":1,"message":"212","line":59,"column":51,"nodeType":"213","messageId":"214","endLine":59,"endColumn":53},{"ruleId":"211","severity":1,"message":"212","line":63,"column":49,"nodeType":"213","messageId":"214","endLine":63,"endColumn":51},{"ruleId":"211","severity":1,"message":"212","line":82,"column":38,"nodeType":"213","messageId":"214","endLine":82,"endColumn":40},{"ruleId":"215","severity":1,"message":"216","line":101,"column":66,"nodeType":"217","endLine":101,"endColumn":76},{"ruleId":"194","severity":1,"message":"229","line":24,"column":11,"nodeType":"196","messageId":"197","endLine":24,"endColumn":25},{"ruleId":"194","severity":1,"message":"230","line":29,"column":13,"nodeType":"196","messageId":"197","endLine":29,"endColumn":21},{"ruleId":"194","severity":1,"message":"230","line":32,"column":13,"nodeType":"196","messageId":"197","endLine":32,"endColumn":21},{"ruleId":"194","severity":1,"message":"230","line":35,"column":13,"nodeType":"196","messageId":"197","endLine":35,"endColumn":21},{"ruleId":"194","severity":1,"message":"230","line":38,"column":13,"nodeType":"196","messageId":"197","endLine":38,"endColumn":21},{"ruleId":"211","severity":1,"message":"231","line":42,"column":18,"nodeType":"213","messageId":"214","endLine":42,"endColumn":20},{"ruleId":"194","severity":1,"message":"230","line":43,"column":13,"nodeType":"196","messageId":"197","endLine":43,"endColumn":21},{"ruleId":"215","severity":1,"message":"216","line":257,"column":88,"nodeType":"217","endLine":257,"endColumn":209},{"ruleId":"202","severity":1,"message":"203","line":43,"column":8,"nodeType":"204","endLine":43,"endColumn":10,"suggestions":"232"},{"ruleId":"202","severity":1,"message":"233","line":42,"column":8,"nodeType":"204","endLine":42,"endColumn":10,"suggestions":"234"},{"ruleId":"202","severity":1,"message":"235","line":35,"column":8,"nodeType":"204","endLine":35,"endColumn":10,"suggestions":"236"},{"ruleId":"237","severity":1,"message":"238","line":46,"column":21,"nodeType":"220","endLine":46,"endColumn":33},{"ruleId":"239","severity":1,"message":"240","line":80,"column":58,"nodeType":"213","messageId":"241","endLine":80,"endColumn":59},{"ruleId":"194","severity":1,"message":"242","line":9,"column":8,"nodeType":"196","messageId":"197","endLine":9,"endColumn":18},{"ruleId":"194","severity":1,"message":"243","line":24,"column":12,"nodeType":"196","messageId":"197","endLine":24,"endColumn":22},{"ruleId":"194","severity":1,"message":"244","line":24,"column":24,"nodeType":"196","messageId":"197","endLine":24,"endColumn":37},{"ruleId":"211","severity":1,"message":"212","line":30,"column":24,"nodeType":"213","messageId":"214","endLine":30,"endColumn":26},{"ruleId":"211","severity":1,"message":"212","line":45,"column":24,"nodeType":"213","messageId":"214","endLine":45,"endColumn":26},{"ruleId":"211","severity":1,"message":"212","line":58,"column":27,"nodeType":"213","messageId":"214","endLine":58,"endColumn":29},{"ruleId":"202","severity":1,"message":"235","line":74,"column":8,"nodeType":"204","endLine":74,"endColumn":10,"suggestions":"245"},{"ruleId":"225","severity":1,"message":"226","line":82,"column":13,"nodeType":"227","messageId":"228","endLine":82,"endColumn":15},{"ruleId":"211","severity":1,"message":"212","line":24,"column":24,"nodeType":"213","messageId":"214","endLine":24,"endColumn":26},{"ruleId":"211","severity":1,"message":"212","line":34,"column":27,"nodeType":"213","messageId":"214","endLine":34,"endColumn":29},{"ruleId":"202","severity":1,"message":"235","line":49,"column":8,"nodeType":"204","endLine":49,"endColumn":10,"suggestions":"246"},{"ruleId":"202","severity":1,"message":"235","line":36,"column":8,"nodeType":"204","endLine":36,"endColumn":10,"suggestions":"247"},{"ruleId":"218","severity":1,"message":"219","line":48,"column":39,"nodeType":"220","endLine":48,"endColumn":102},{"ruleId":"194","severity":1,"message":"248","line":18,"column":12,"nodeType":"196","messageId":"197","endLine":18,"endColumn":20},{"ruleId":"202","severity":1,"message":"203","line":44,"column":8,"nodeType":"204","endLine":44,"endColumn":10,"suggestions":"249"},{"ruleId":"211","severity":1,"message":"212","line":194,"column":67,"nodeType":"213","messageId":"214","endLine":194,"endColumn":69},{"ruleId":"215","severity":1,"message":"216","line":252,"column":221,"nodeType":"217","endLine":252,"endColumn":236},{"ruleId":"194","severity":1,"message":"250","line":4,"column":10,"nodeType":"196","messageId":"197","endLine":4,"endColumn":22},{"ruleId":"194","severity":1,"message":"251","line":5,"column":10,"nodeType":"196","messageId":"197","endLine":5,"endColumn":23},{"ruleId":"194","severity":1,"message":"252","line":6,"column":10,"nodeType":"196","messageId":"197","endLine":6,"endColumn":22},{"ruleId":"211","severity":1,"message":"212","line":29,"column":24,"nodeType":"213","messageId":"214","endLine":29,"endColumn":26},{"ruleId":"211","severity":1,"message":"212","line":42,"column":27,"nodeType":"213","messageId":"214","endLine":42,"endColumn":29},{"ruleId":"211","severity":1,"message":"212","line":47,"column":27,"nodeType":"213","messageId":"214","endLine":47,"endColumn":29},{"ruleId":"202","severity":1,"message":"235","line":70,"column":8,"nodeType":"204","endLine":70,"endColumn":10,"suggestions":"253"},{"ruleId":"194","severity":1,"message":"254","line":20,"column":12,"nodeType":"196","messageId":"197","endLine":20,"endColumn":15},{"ruleId":"194","severity":1,"message":"255","line":20,"column":17,"nodeType":"196","messageId":"197","endLine":20,"endColumn":23},{"ruleId":"211","severity":1,"message":"212","line":80,"column":36,"nodeType":"213","messageId":"214","endLine":80,"endColumn":38},{"ruleId":"211","severity":1,"message":"212","line":127,"column":36,"nodeType":"213","messageId":"214","endLine":127,"endColumn":38},{"ruleId":"211","severity":1,"message":"212","line":128,"column":36,"nodeType":"213","messageId":"214","endLine":128,"endColumn":38},{"ruleId":"211","severity":1,"message":"212","line":129,"column":36,"nodeType":"213","messageId":"214","endLine":129,"endColumn":38},{"ruleId":"211","severity":1,"message":"212","line":130,"column":36,"nodeType":"213","messageId":"214","endLine":130,"endColumn":38},"no-native-reassign",["256"],"no-negated-in-lhs",["257"],"no-unused-vars","'useLocation' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'td' is defined but never used.","'BounceLoader' is defined but never used.","'loaded' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchPlans'. Either include it or remove the dependency array.","ArrayExpression",["258"],"'Link' is defined but never used.","React Hook useEffect contains a call to 'setAppName'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [history] as a second argument to the useEffect Hook.",["259"],"Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["260"],"'setLoaded' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchUsers'. Either include it or remove the dependency array.",["261"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'openIntergrate' is assigned a value but never used.","'response' is assigned a value but never used.","Expected '!==' and instead saw '!='.",["262"],"React Hook useEffect has a missing dependency: 'fetchRestocks'. Either include it or remove the dependency array.",["263"],"React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.",["264"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","'Background' is defined but never used.","'background' is assigned a value but never used.","'setBackground' is assigned a value but never used.",["265"],["266"],["267"],"'planRole' is assigned a value but never used.",["268"],"'IoKeyOutline' is defined but never used.","'BiLogInCircle' is defined but never used.","'FaUserCircle' is defined but never used.",["269"],"'key' is assigned a value but never used.","'setKey' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"270","fix":"271"},{"desc":"272","fix":"273"},{"desc":"270","fix":"274"},{"desc":"275","fix":"276"},{"desc":"270","fix":"277"},{"desc":"278","fix":"279"},{"desc":"280","fix":"281"},{"desc":"280","fix":"282"},{"desc":"280","fix":"283"},{"desc":"280","fix":"284"},{"desc":"270","fix":"285"},{"desc":"280","fix":"286"},"Update the dependencies array to be: [fetchPlans]",{"range":"287","text":"288"},"Add dependencies array: [history]",{"range":"289","text":"290"},{"range":"291","text":"288"},"Update the dependencies array to be: [fetchUsers]",{"range":"292","text":"293"},{"range":"294","text":"288"},"Update the dependencies array to be: [fetchRestocks]",{"range":"295","text":"296"},"Update the dependencies array to be: [fetchData]",{"range":"297","text":"298"},{"range":"299","text":"298"},{"range":"300","text":"298"},{"range":"301","text":"298"},{"range":"302","text":"288"},{"range":"303","text":"298"},[1293,1295],"[fetchPlans]",[1101,1101],", [history]",[1038,1040],[898,900],"[fetchUsers]",[1065,1067],[1108,1110],"[fetchRestocks]",[973,975],"[fetchData]",[3092,3094],[2008,2010],[756,758],[1201,1203],[2873,2875]]