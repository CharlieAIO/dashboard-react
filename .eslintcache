[{"E:\\dashboard-react\\src\\index.js":"1","E:\\dashboard-react\\src\\reportWebVitals.js":"2","E:\\dashboard-react\\src\\App.js":"3","E:\\dashboard-react\\src\\components\\users\\users.js":"4","E:\\dashboard-react\\src\\components\\home\\home.js":"5","E:\\dashboard-react\\src\\components\\adminNav.js":"6","E:\\dashboard-react\\src\\components\\adminSearch.js":"7","E:\\dashboard-react\\src\\components\\home\\planModal.js":"8","E:\\dashboard-react\\src\\components\\home\\restockModal.js":"9","E:\\dashboard-react\\src\\components\\licenses\\licenses.js":"10","E:\\dashboard-react\\src\\components\\licenses\\licenseModal.js":"11","E:\\dashboard-react\\src\\components\\licenses\\table.js":"12","E:\\dashboard-react\\src\\components\\users\\table.js":"13","E:\\dashboard-react\\src\\components\\settings\\settings.js":"14","E:\\dashboard-react\\src\\components\\home\\planTable.js":"15","E:\\dashboard-react\\src\\components\\home\\restockTable.js":"16","E:\\dashboard-react\\src\\components\\siteHomePage\\home.js":"17","E:\\dashboard-react\\src\\components\\userDashboard\\dashboard.js":"18","E:\\dashboard-react\\src\\components\\bindPage\\bindPage.js":"19","E:\\dashboard-react\\src\\components\\userNav.js":"20","E:\\dashboard-react\\src\\components\\home\\planEditModal.js":"21","E:\\dashboard-react\\src\\components\\purchasePage\\purchase.js":"22","E:\\dashboard-react\\src\\components\\purchasePage\\checkout.js":"23","E:\\dashboard-react\\src\\components\\userDashboard\\renewModal.js":"24","E:\\dashboard-react\\src\\components\\userDashboard\\renew.js":"25"},{"size":265,"mtime":1611228962182,"results":"26","hashOfConfig":"27"},{"size":362,"mtime":1611220658625,"results":"28","hashOfConfig":"27"},{"size":1447,"mtime":1612543842334,"results":"29","hashOfConfig":"27"},{"size":4508,"mtime":1613570716856,"results":"30","hashOfConfig":"27"},{"size":8684,"mtime":1613853977504,"results":"31","hashOfConfig":"27"},{"size":13409,"mtime":1613501926184,"results":"32","hashOfConfig":"27"},{"size":6187,"mtime":1613501899431,"results":"33","hashOfConfig":"27"},{"size":24985,"mtime":1613850053160,"results":"34","hashOfConfig":"27"},{"size":9691,"mtime":1612620285171,"results":"35","hashOfConfig":"27"},{"size":5772,"mtime":1613570501002,"results":"36","hashOfConfig":"27"},{"size":8996,"mtime":1612178535536,"results":"37","hashOfConfig":"27"},{"size":10512,"mtime":1613571220688,"results":"38","hashOfConfig":"27"},{"size":7444,"mtime":1613571235174,"results":"39","hashOfConfig":"27"},{"size":19108,"mtime":1613566963793,"results":"40","hashOfConfig":"27"},{"size":7748,"mtime":1613847506388,"results":"41","hashOfConfig":"27"},{"size":8159,"mtime":1612973237116,"results":"42","hashOfConfig":"27"},{"size":4723,"mtime":1613518833504,"results":"43","hashOfConfig":"27"},{"size":12895,"mtime":1613838090536,"results":"44","hashOfConfig":"27"},{"size":6326,"mtime":1613126236236,"results":"45","hashOfConfig":"27"},{"size":1313,"mtime":1613517623113,"results":"46","hashOfConfig":"27"},{"size":21533,"mtime":1613853148831,"results":"47","hashOfConfig":"27"},{"size":4645,"mtime":1613127447418,"results":"48","hashOfConfig":"27"},{"size":6926,"mtime":1613640335891,"results":"49","hashOfConfig":"27"},{"size":2562,"mtime":1613133917948,"results":"50","hashOfConfig":"27"},{"size":4402,"mtime":1613136549885,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"bywc2m",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"54"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"54"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"54"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"54"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"54"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"54"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"54"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"54"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"54"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"54"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"54"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"54"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"54"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"54"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"54"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"54"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"54"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"54"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"54"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"54"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"54"},"E:\\dashboard-react\\src\\index.js",[],["124","125"],"E:\\dashboard-react\\src\\reportWebVitals.js",[],"E:\\dashboard-react\\src\\App.js",["126"],"import './static/styles/main.css';\nimport {BrowserRouter as Router, Switch, Route, useLocation } from 'react-router-dom'\nimport React from 'react';\n\nimport Home from './components/home/home'\nimport Licenses from './components/licenses/licenses'\nimport Users from './components/users/users'\nimport Settings from './components/settings/settings'\nimport SiteHome from './components/siteHomePage/home'\nimport Dashboard from './components/userDashboard/dashboard'\nimport Bind from './components/bindPage/bindPage'\nimport PurchasePage from './components/purchasePage/purchase'\n\n\nconst App = () => { \n\n\n  return (\n    <div className=\"h-screen flex w-screen overflow-hidden bg-other-100 dark:bg-darkOther-100\" id=\"baseBackground\">\n\n      <Router>\n\n          {/* <div className=\"container mx-auto\"> */}\n            <Switch>\n              <Route exact path='/' component={SiteHome} />\n              <Route exact path='/dashboard' component={Dashboard} />\n              <Route exact path='/bind' component={Bind} />\n              <Route exact path='/purchase' component={PurchasePage} />\n\n              <Route exact path='/home' component={Home} />\n              <Route exact path='/licenses' component={Licenses}/>\n              <Route exact path='/users' component={Users}/>\n              <Route exact path='/settings' component={Settings}/>\n            </Switch>\n          {/* </div> */}\n        \n\n      </Router>\n\n    </div>\n  );\n\n}\n\nexport default App;\n","E:\\dashboard-react\\src\\components\\users\\users.js",["127","128"],"import '../../static/styles/main.css'; \r\nimport React, { Component, useEffect } from 'react';\r\nimport UserTable from './table';\r\nimport AdminNavigation from '../adminNav';\r\nimport AdminSearchbar from '../adminSearch';\r\n\r\nimport { AiOutlineSearch } from 'react-icons/ai';\r\n\r\n\r\nclass Users extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {}\r\n\r\n    }\r\n\r\n    \r\n\r\n    render() {\r\n        function filter() {\r\n            var input, filter, table, tr, td, i, txtValue;\r\n            input = document.getElementById(\"searchInput\");\r\n            filter = input.value.toUpperCase();\r\n            table = document.getElementById(\"table\");\r\n            tr = table.getElementsByTagName(\"tr\");\r\n            \r\n            // Loop through all table rows, and hide those who don't match the search query\r\n            for (i = 0; i < tr.length; i++) {\r\n                try{\r\n                    var td1 = tr[i].getElementsByTagName(\"td\")[1];\r\n\r\n                    txtValue = td1.textContent || td1.innerText;\r\n                    if (txtValue.toUpperCase().indexOf(filter) > -1) {\r\n                        tr[i].style.display = \"\";\r\n                    } else {\r\n                        tr[i].style.display = \"none\";\r\n                    }\r\n\r\n                }catch(e){\r\n                    console.log(e)\r\n                }\r\n            }\r\n        }\r\n        return (\r\n            <>\r\n                <AdminNavigation />\r\n                <div className=\"flex flex-col w-0 flex-1 overflow-hidden\">\r\n                <AdminSearchbar />\r\n                <main className=\"flex-1 relative overflow-y-auto focus:outline-none\" id=\"main\" tabIndex='0'>\r\n\r\n                    {/* style=\"min-height: 650px;max-height: 650px;\" */}\r\n                    <div className=\"bg-white overflow-hidden shadow rounded-lg divide-y mr-12 mt-5 dark:bg-darkOther-200\">\r\n\r\n                        <div className=\"px-4 py-5 sm:px-6\">\r\n\r\n                            <dl className=\"sm:grid sm:grid-cols-2\">\r\n\r\n                                <div className=\"flex flex-col p-2  bg-white mr-5 dark:bg-darkOther-200\">\r\n\r\n                                    <h1  className=\"dark:text-white\">Users</h1>\r\n\r\n                                    <div className=\"relative w-full text-gray-400 focus-within:text-gray-600\">\r\n\r\n                                        <div className=\"absolute inset-y-0 left-0 flex items-center pointer-events-none\">\r\n                                            <AiOutlineSearch className=\"h-5 w-5 text-gray-900 dark:text-other-100\"/>\r\n                                        </div>   \r\n                                                                               \r\n                                        <input id=\"searchInput\" onKeyUp={filter} autoComplete=\"off\" className=\"dark:text-white dark:bg-darkOther-200 bg-white block w-full h-full pl-8 pr-3 py-2 text-gray-900 placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-0 focus:border-transparent sm:text-sm\" placeholder=\"Search by email\" type=\"search\" name=\"search\" />\r\n                                    \r\n                                    </div>\r\n        \r\n                                </div>\r\n\r\n\r\n                            </dl>\r\n\r\n                        </div>\r\n\r\n                        <div className=\"px-4 py-5 sm:p-6\">\r\n    \r\n\r\n                            <div className=\"flex flex-col \">\r\n\r\n                                <div className=\"-my-2 overflow-y-auto sm:-mx-6 lg: mr-12 dark:bg-darkOther-200\" style={{'min-height': '400px', 'max-height': '800px'}}>\r\n                                    <div className=\"py-2 align-middle inline-block min-w-full sm:px-6 lg:px-8\" >\r\n                                        \r\n                                        <div className=\"shadow overflow-hidden border-gray-200\">\r\n\r\n                                            {/* Table */}\r\n                                            <UserTable />\r\n\r\n                                        </div>\r\n\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                        </div>\r\n                    </div>\r\n\r\n                    <footer>\r\n                        <p className=\"text-sm font-small text-gray-600\">Invincible Services | 2021 | Thank you for using our services</p>\r\n                    </footer>\r\n   \r\n                </main>\r\n                </div>\r\n            \r\n            </>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Users","E:\\dashboard-react\\src\\components\\home\\home.js",["129","130"],"E:\\dashboard-react\\src\\components\\adminNav.js",["131","132","133","134","135","136","137","138"],"import '../static/styles/main.css'; \r\nimport { NavLink, Link } from 'react-router-dom'\r\nimport { React, useEffect, useState } from 'react';\r\nimport { Switch } from '@headlessui/react'\r\nimport { AiOutlineHome, AiOutlineCloseCircle } from 'react-icons/ai';\r\nimport { BiExport, BiSun, BiMoon } from 'react-icons/bi';\r\nimport { FiUsers, FiSettings } from 'react-icons/fi';\r\nimport { IoKeyOutline } from 'react-icons/io5';\r\nimport  { useHistory  } from 'react-router-dom'\r\n\r\nconst AdminNavigation = () =>  {\r\n    let history = useHistory()\r\n    const [appName, setAppName] = useState(\"\")\r\n    const [appImage, setAppImage] = useState(\"\")\r\n    const [darkMode, setDarkMode] = useState(false)\r\n    const [loaded, setLoaded] = useState(false)\r\n\r\n    useEffect( async () => {\r\n        var response = await fetch('/accounts/user/data')\r\n        if(response.ok) {\r\n            var responseBody = await response.json()\r\n            if(responseBody.admin == false) history.push('/')\r\n            setAppName(responseBody.name)\r\n            setAppImage(responseBody.serverImage)\r\n            setLoaded(true)\r\n        }\r\n        if(response.status == 403) history.push('/')\r\n    })\r\n\r\n    const changeDarkMode = (e) => {\r\n        if(e == true) {\r\n            // dark mode on\r\n            console.log(document.documentElement)\r\n            document.documentElement.classList.add('dark');\r\n            localStorage.setItem(\"mode\",\"#0e1c2f\")\r\n        }else{\r\n            // dark mode off\r\n            document.documentElement.classList.remove('dark');\r\n            localStorage.setItem(\"mode\",\"white\")\r\n        }\r\n    }\r\n\r\n\r\n    // render() {\r\n        return (\r\n            \r\n            <div className=\"h-screen flex\">\r\n                \r\n\r\n                <div className=\"md:hidden\">\r\n                    \r\n                    <div className=\"fixed inset-0 flex z-40\" id=\"mob-screen\">\r\n    \r\n                    <div className=\"fixed inset-0\" aria-hidden=\"true\">\r\n                        <div className=\"absolute inset-0 bg-gray-600 opacity-75\"></div>\r\n                    </div>\r\n    \r\n                    <div className=\"relative flex-1 flex flex-col max-w-xs w-full pt-5 pb-4 bg-other-100 dark:bg-darkOther-100 transition-transform ease-in-out duration-200\" id=\"mob-nav\">\r\n                        <div className=\"absolute top-0 right-0 -mr-12 pt-2\">\r\n                        <button className=\"ml-1 flex items-center justify-center h-10 w-10 rounded-full focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white\" onClick={() => {\r\n                            document.querySelector('#mob-nav').classList.contains('hidden') ? document.querySelector('#mob-nav').classList.remove('hidden') : document.querySelector('#mob-nav').classList.add('hidden')\r\n                            document.querySelector('#mob-screen').classList.contains('hidden') ? document.querySelector('#mob-screen').classList.remove('hidden') : document.querySelector('#mob-screen').classList.add('hidden')\r\n                        }}>\r\n                            <span className=\"sr-only\">Close sidebar</span>\r\n                            <AiOutlineCloseCircle className=\"h-6 w-6 text-white\" id='hide'/>\r\n                        </button>\r\n                        </div>\r\n                        \r\n                        <div className=\"flex-shrink-0 flex items-center px-4\">\r\n                        <img alt={appName} className=\"h-16 w-auto rounded-full select-none\" src={appImage} alt={appName} /> <span className=\"text-2xl font-medium text-other-200 ml-2 text-20 dark:text-other-100 select-none\">{appName}</span>\r\n                        </div>\r\n    \r\n                        <div className=\"mt-5 flex-1 h-0 overflow-y-auto \" >\r\n                        <nav className=\"px-2 space-y-1 \">\r\n                            <NavLink to='/home' activeClassName=\"text-green-500 dark:text-green-500\" className=\"dark:text-white\">\r\n                                <span className=\"hover:text-green-400 dark:hover:text-green-400 group flex items-center px-2 py-2 text-sm font-medium rounded-md\">\r\n                                <AiOutlineHome className=\"hover:text-green-400 dark:hover:text-green-400 mr-3 h-6 w-6\" id='hide'/>\r\n                                Home\r\n                                </span>\r\n                            </NavLink>\r\n                \r\n                            <NavLink to='/licenses' activeClassName=\"dark:text-yellow-500 text-yellow-500\" className=\"dark:text-white\">\r\n                                <span className=\"hover:text-yellow-400 dark:hover:text-yellow-400 group flex items-center px-2 py-2 text-sm font-medium rounded-md\">\r\n                                <IoKeyOutline className=\"hover:text-yellow-400 dark:hover:text-yellow-400 mr-3 h-6 w-6\"/>\r\n                                Licenses\r\n                                </span>\r\n                            </NavLink>\r\n                \r\n                            <NavLink to='/users' activeClassName=\"dark:text-blue-500 text-blue-500\" className=\"dark:text-white\">\r\n                                <span className=\"hover:text-blue-400 dark:hover:text-blue-400 group flex items-center px-2 py-2 text-sm font-medium rounded-md\">\r\n                                <FiUsers className=\"hover:text-blue-400 dark:hover:text-blue-400 mr-3 h-6 w-6\" />\r\n                                Users\r\n                                </span>\r\n                            </NavLink>\r\n                \r\n                            <NavLink to='/settings' activeClassName=\"dark:text-purple-500 text-purple-500\" className=\"dark:text-white\">\r\n                                <span className=\"hover:text-purple-400 dark:hover:text-purple-400 group flex items-center px-2 py-2 text-sm font-medium rounded-md\">\r\n                                <FiSettings className=\"hover:text-purple-400 dark:hover:text-purple-400 mr-3 h-6 w-6\" />\r\n                                Settings\r\n                                </span>\r\n                            </NavLink>\r\n                \r\n                            <span className=\"text-orange-500 dark:text-white hover:text-orange-400 dark:hover:text-orange-400 group flex items-center px-2 py-2 text-sm font-medium rounded-md\">\r\n                            <BiExport className=\"hover:text-orange-500 dark:hover:text-orange-400 mr-3 h-6 w-6\" />\r\n                            Export\r\n                            </span>\r\n\r\n                            <div className=\"grid border-t w-1/2\">\r\n                                <div className=\"\">\r\n                                    <Switch \r\n                                    checked={darkMode}\r\n                                    onChange={e => {\r\n                                        setDarkMode(e)\r\n                                        changeDarkMode(e)\r\n                                    }}\r\n                                    as=\"button\" \r\n                                    className={`${darkMode ? \"bg-darkOther-100\" : \"bg-other-100\"} shadow-md border-gray-300 border-1 mt-2 inline-flex flex-shrink-0 h-5 w-10 border-2 border-transparent rounded-full cursor-pointer transition-colors ease-in-out duration-200 focus:outline-none`}>\r\n\r\n                                        {darkMode ?\r\n                                         \r\n                                        <BiMoon aria-hidden=\"true\" className=\"pointer-events-none translate-x-0 inline-block h-4 w-auto rounded-full text-other-100 shadow transform ring-0 transition ease-in-out duration-200 \" />: \r\n                                        <BiSun aria-hidden=\"true\" className=\"pointer-events-none translate-x-5 inline-block h-4 w-auto rounded-full text-yellow-500 shadow transform ring-0 transition ease-in-out duration-200\" />\r\n                                        }\r\n\r\n                                    </Switch>\r\n                                </div>\r\n                    \r\n                          \r\n                            </div>\r\n                        </nav>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"flex-shrink-0 w-14\" aria-hidden=\"true\">\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n    \r\n                <div className=\"hidden md:flex md:flex-shrink-0\">\r\n                <div className=\"flex flex-col w-64\">\r\n                <div className=\"flex flex-col flex-grow pt-5 pb-4 bg-other-100 dark:bg-darkOther-100 overflow-y-auto\">\r\n                    {loaded ? <div className=\"flex items-center flex-shrink-0 px-4\">\r\n                        <img alt={appName} className=\"h-16 w-auto rounded-full select-none\" src={appImage} alt={appName} /> <span className=\"text-2xl font-medium text-other-200 ml-2 text-20 dark:text-other-100 select-none\">{appName}</span>\r\n                    </div> : <div></div>}\r\n                    <div className=\"mt-5 flex-grow flex flex-col\">\r\n                    <nav className=\"flex-1 px-2 bg-other-100 dark:bg-darkOther-100 space-y-1\">\r\n                        \r\n                            <NavLink to='/home' activeClassName=\"text-green-500 dark:text-green-500\" className=\"dark:text-white\">\r\n                                <span className=\"hover:text-green-400 dark:hover:text-green-400 group flex items-center px-2 py-2 text-sm font-medium rounded-md\">\r\n                                <AiOutlineHome className=\"hover:text-green-400 dark:hover:text-green-400 mr-3 h-6 w-6\" id='hide'/>\r\n                                Home\r\n                                </span>\r\n                            </NavLink>\r\n                \r\n                            <NavLink to='/licenses' activeClassName=\"dark:text-yellow-500 text-yellow-500\" className=\"dark:text-white\">\r\n                                <span className=\"hover:text-yellow-400 dark:hover:text-yellow-400 group flex items-center px-2 py-2 text-sm font-medium rounded-md\">\r\n                                <IoKeyOutline className=\"hover:text-yellow-400 dark:hover:text-yellow-400 mr-3 h-6 w-6\"/>\r\n                                Licenses\r\n                                </span>\r\n                            </NavLink>\r\n                \r\n                            <NavLink to='/users' activeClassName=\"dark:text-blue-500 text-blue-500\" className=\"dark:text-white\">\r\n                                <span className=\"hover:text-blue-400 dark:hover:text-blue-400 group flex items-center px-2 py-2 text-sm font-medium rounded-md\">\r\n                                <FiUsers className=\"hover:text-blue-400 dark:hover:text-blue-400 mr-3 h-6 w-6\" />\r\n                                Users\r\n                                </span>\r\n                            </NavLink>\r\n                \r\n                            <NavLink to='/settings' activeClassName=\"dark:text-purple-500 text-purple-500\" className=\"dark:text-white\">\r\n                                <span className=\"hover:text-purple-400 dark:hover:text-purple-400 group flex items-center px-2 py-2 text-sm font-medium rounded-md\">\r\n                                <FiSettings className=\"hover:text-purple-400 dark:hover:text-purple-400 mr-3 h-6 w-6\" />\r\n                                Settings\r\n                                </span>\r\n                            </NavLink>\r\n                \r\n                            <span className=\"text-orange-500 dark:text-white hover:text-orange-400 dark:hover:text-orange-400 group flex items-center px-2 py-2 text-sm font-medium rounded-md\">\r\n                            <BiExport className=\"hover:text-orange-500 dark:hover:text-orange-400 mr-3 h-6 w-6\" />\r\n                            Export\r\n                            </span>\r\n\r\n                            <div className=\"grid border-t w-1/2\">\r\n                                <div className=\"\">\r\n                                    <Switch \r\n                                    checked={darkMode}\r\n                                    onChange={e => {\r\n                                        setDarkMode(e)\r\n                                        changeDarkMode(e)\r\n                                    }}\r\n                                    as=\"button\" \r\n                                    className={`${darkMode ? \"bg-darkOther-100\" : \"bg-other-100\"} shadow-md border-gray-300 border-1 mt-2 inline-flex flex-shrink-0 h-5 w-10 border-2 border-transparent rounded-full cursor-pointer transition-colors ease-in-out duration-200 focus:outline-none`}>\r\n\r\n                                        {darkMode ?\r\n                                         \r\n                                        <BiMoon aria-hidden=\"true\" className=\"pointer-events-none translate-x-0 inline-block h-4 w-auto rounded-full text-other-100 shadow transform ring-0 transition ease-in-out duration-200 \" />: \r\n                                        <BiSun aria-hidden=\"true\" className=\"pointer-events-none translate-x-5 inline-block h-4 w-auto rounded-full text-yellow-500 shadow transform ring-0 transition ease-in-out duration-200\" />\r\n                                        }\r\n\r\n                                    </Switch>\r\n                                </div>\r\n                    \r\n                          \r\n                            </div>\r\n\r\n                    \r\n                    </nav>\r\n                    </div>\r\n                </div>\r\n                </div>\r\n                </div>\r\n\r\n\r\n\r\n            </div>\r\n        );\r\n    // }\r\n}\r\n\r\nexport default AdminNavigation;\r\n","E:\\dashboard-react\\src\\components\\adminSearch.js",["139","140"],"import '../static/styles/main.css'; \r\nimport React, {useState, useEffect} from 'react';\r\n\r\n\r\nimport { AiOutlineSearch, AiOutlineMenu } from 'react-icons/ai';\r\nimport { IoNotificationsOutline } from 'react-icons/io5';\r\nimport {FaUserCircle} from 'react-icons/fa'\r\n\r\n\r\nconst AdminSearch = () =>  {\r\n\r\n    const [userImage, setUserImage] = useState(\"\")\r\n\r\n    async function fetchData(){\r\n        const res = await fetch('/discord/data');\r\n        res.json()\r\n        .then(res => {\r\n            setUserImage(res.discordImage)\r\n        })\r\n        .catch(err =>  { console.log(err) });\r\n        \r\n    }\r\n\r\n\r\n    useEffect(() =>{\r\n        const abortController = new AbortController();\r\n        fetchData()\r\n\r\n        return () => {\r\n            abortController.abort();\r\n        };\r\n\r\n    }, [])\r\n\r\n    // render() {\r\n        return (\r\n\r\n            <div className=\"relative z-10 flex h-16 shadow-sm\">\r\n                        <button className=\"px-4 text-gray-500 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-indigo-500 md:hidden\" onClick={() => {\r\n                                    document.querySelector('#mob-nav').classList.contains('hidden') ? document.querySelector('#mob-nav').classList.remove('hidden') : document.querySelector('#mob-nav').classList.add('hidden')\r\n                                    document.querySelector('#mob-screen').classList.contains('hidden') ? document.querySelector('#mob-screen').classList.remove('hidden') : document.querySelector('#mob-screen').classList.add('hidden')\r\n                            }}>\r\n                            <AiOutlineMenu className=\"h-6 w-6\"/>\r\n                        </button>\r\n                        \r\n                        <div className=\"flex-1 px-4 flex justify-between bg-other-100 dark:bg-darkOther-100 mr-2\">\r\n                            <div className=\"flex-1 flex\">\r\n                                <form className=\"w-full flex md:ml-0\" action=\"#\" method=\"GET\">\r\n                                    <label className=\"sr-only\">Search</label>\r\n                                    <div className=\"relative w-full text-gray-400 focus-within:text-gray-600\">\r\n                                    <div className=\"absolute inset-y-0 left-0 flex items-center pointer-events-none\">\r\n                                        <AiOutlineSearch className=\"h-5 w-5 text-gray-900 dark:text-other-100\"/>\r\n                                    </div>\r\n                                    <input id=\"search_field\" disabled=\"disabled\" autoComplete=\"off\" className=\"bg-other-100 dark:bg-darkOther-100 block w-full h-full pl-8 pr-3 py-2 border-transparent text-gray-900 placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-0 focus:border-transparent sm:text-sm\" placeholder=\"Search\" type=\"search\" name=\"search\" />\r\n                                    </div>\r\n                                </form>\r\n                            </div>\r\n            \r\n                            <div className=\"ml-4 flex items-center md:ml-6 \">\r\n                                <button className=\"p-1 rounded-full bg-darkOther-200 text-other-100 dark:bg-other-200 dark:text-other-100 focus:outline-none\" onClick={() => {\r\n                                    document.querySelector('#notif-dropdown').classList.contains('hidden') ? document.querySelector('#notif-dropdown').classList.remove('hidden') : document.querySelector('#notif-dropdown').classList.add('hidden')\r\n                                }}>\r\n                                    <span className=\"sr-only\">View notifications</span>\r\n                                    <IoNotificationsOutline className=\"h-7 w-7\" id='hide'/>\r\n                                </button>\r\n\r\n                                <div className=\"dark:bg-darkOther-200 hidden absolute right-0 mt-24 mr-24 w-48 rounded-md shadow-lg py-1 bg-white focus:outline-none\" role=\"menu\" id=\"notif-dropdown\" aria-orientation=\"vertical\">\r\n                                        <span className=\"block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 hover:bg-gray-100 hover:text-gray-900 dark:hover:bg-darkOther-300 dark:text-white\" role=\"menuitem\" id='hide'>No notifications</span>\r\n                                </div>\r\n                        \r\n                                <div className=\"ml-3 relative\">\r\n                                    <div>  \r\n                                        <button className=\"max-w-xs bg-white flex items-center text-sm rounded-full focus:outline-none\" id=\"profile-button-hide\" name=\"profile-dropdown\" aria-haspopup=\"true\"  onClick={() => {\r\n                                            document.querySelector('#profile-dropdown').classList.contains('hidden') ? document.querySelector('#profile-dropdown').classList.remove('hidden') : document.querySelector('#profile-dropdown').classList.add('hidden')\r\n                                        }}>\r\n                                            <span className=\"sr-only\">Open user menu</span>\r\n                                            {userImage == \"\" ? <FaUserCircle className=\"h-10 w-10 rounded-full bg-darkOther-200 text-other-100 dark:bg-other-200 dark:text-other-100 \" id=\"profile-button-hide\" name=\"profile-dropdown\" /> : <img className=\"h-8 w-8 rounded-full text-other-100 dark:text-darkOther-300\" src={userImage} id=\"profile-button-hide\" name=\"profile-dropdown\" />}\r\n                                        </button>\r\n                                    </div>\r\n            \r\n                                    <div className=\"dark:bg-darkOther-200 hidden origin-top-right absolute right-0 mt-2 w-48 rounded-md shadow-lg py-1 bg-white\" role=\"menu\" id=\"profile-dropdown\" aria-orientation=\"vertical\" aria-labelledby=\"user-menu\">\r\n                                        <span href=\"#\" className=\"block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 hover:text-gray-900 dark:hover:bg-darkOther-300 dark:text-white\" role=\"menuitem\" id='hide'>Sign out</span>\r\n                                    </div>\r\n                                </div>\r\n            \r\n                            </div>\r\n                        </div>\r\n            </div>\r\n        )\r\n}\r\n\r\nexport default AdminSearch;","E:\\dashboard-react\\src\\components\\home\\planModal.js",["141","142","143","144","145","146","147"],"import '../../static/styles/main.css'; \r\nimport React, { useEffect, useState } from 'react';\r\nimport Select from 'react-select';\r\nimport makeAnimated from 'react-select/animated';\r\nimport chroma from 'chroma-js';\r\nimport currencyOptions from '../../static/data/currencies.json'\r\nimport { Switch } from '@headlessui/react'\r\nimport DatePicker from 'react-date-picker';\r\n\r\n\r\n\r\nimport { AiOutlineClose } from 'react-icons/ai';\r\nimport { IoPricetagOutline } from 'react-icons/io5';\r\nimport { BsCalendar } from 'react-icons/bs'\r\nimport { MdClear } from 'react-icons/md'\r\n\r\nvar planOptions = [\r\n    {label:'Recurring & Onetime Payment', value:'recurring+onetime-payment'},\r\n    {label:'Recurring', value:'recurring'},\r\n    {label:'Lifetime', value:'lifetime'},\r\n    {label:'Rental', value:'rental'}\r\n]\r\nvar intervalTypeOptions = [\r\n    {label:'Day', value:'day'},\r\n    {label:'Week', value:'week'},\r\n    {label:'Month', value:'month'},\r\n    {label:'Year', value:'year'}\r\n]\r\n\r\nconst PlanModal = () => {\r\n\r\n    const [availableRoles, setavailableRoles] = useState([])\r\n    const [planName, setplanName] = useState(\"\")\r\n    const [planType, setplanType] = useState(\"\")\r\n    const [planRole, setplanRole] = useState([])\r\n    const [price, setprice] = useState(\"\")\r\n    const [priceCurrency, setpriceCurrency] = useState(\"\")\r\n    const [interval, setinterval] = useState(\"\")\r\n    const [intervalType, setintervalType] = useState(\"\")\r\n    const [unbinding, setunbinding] = useState(true)\r\n    const [oneTimePrice, setOneTimePrice] = useState(\"\")\r\n    const [expDate, setExpDate] = useState(new Date());\r\n    // const [selectColor, setSelectColor] = useState(true)\r\n\r\n    async function fetchPlans(){\r\n        const res = await fetch('/discord/guild/roles');\r\n        res.json()\r\n        .then(res => {\r\n            setavailableRoles(res.roles)\r\n        })\r\n        .catch(err =>  {console.log(err)});\r\n        \r\n    }\r\n\r\n    useEffect(() =>{\r\n        const abortController = new AbortController();\r\n        fetchPlans()\r\n\r\n\r\n\r\n        return () => {\r\n            abortController.abort();\r\n        };\r\n\r\n    }, [])\r\n\r\n    const colourStyles = {\r\n        control: styles => ({ ...styles, backgroundColor: localStorage.getItem('mode')  }),\r\n        option: (styles, { data, isDisabled, isFocused, isSelected }) => {\r\n          const color = chroma(data.color);\r\n          return {\r\n            ...styles,\r\n            backgroundColor: isDisabled\r\n              ? null\r\n              : isSelected\r\n              ? data.color\r\n              : isFocused\r\n              ? color.alpha(0.1).css()\r\n              : null,\r\n            color: isDisabled\r\n              ? '#ccc'\r\n              : isSelected\r\n              ? chroma.contrast(color, 'white') > 2\r\n                ? 'white'\r\n                : 'black'\r\n              : data.color,\r\n            cursor: isDisabled ? 'not-allowed' : 'default',\r\n      \r\n            ':active': {\r\n              ...styles[':active'],\r\n              backgroundColor:\r\n                !isDisabled && (isSelected ? data.color : color.alpha(0.3).css()),\r\n            },\r\n          };\r\n        },\r\n        multiValue: (styles, { data }) => {\r\n          const color = chroma(data.color);\r\n          return {\r\n            ...styles,\r\n            backgroundColor: color.alpha(0.1).css(),\r\n          };\r\n        },\r\n        multiValueLabel: (styles, { data }) => ({\r\n          ...styles,\r\n          color: data.color,\r\n        }),\r\n        multiValueRemove: (styles, { data }) => ({\r\n          ...styles,\r\n          color: data.color,\r\n          ':hover': {\r\n            backgroundColor: data.color,\r\n            color: 'white',\r\n          },\r\n        }),\r\n    }\r\n    const colourStyle = {\r\n        control: styles => ({ ...styles, backgroundColor: localStorage.getItem('mode') })\r\n    }\r\n\r\n\r\n    \r\n    const submitHandler = async (e) => {\r\n        e.preventDefault()\r\n\r\n        if(planName.length > 0 && planType.length > 0) {\r\n            // console.log(expDate)\r\n            // console.log(expDate.getTime())\r\n        \r\n            var response = await fetch('/plans/add', {\r\n                method:'post',\r\n                body:JSON.stringify({\r\n                    planName:planName,\r\n                    price:price,\r\n                    currency:priceCurrency,\r\n                    type:planType,\r\n                    role:JSON.stringify(planRole),\r\n                    interval:interval,\r\n                    intervalType:intervalType,\r\n                    planId:'',\r\n                    id:'',\r\n                    unbinding:unbinding,\r\n                    oneTimeAmount:oneTimePrice,\r\n                    expiry:expDate.getTime()\r\n                }),\r\n                \"headers\": {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            })\r\n            if(response.ok) {\r\n                setavailableRoles()\r\n                setinterval(\"\")\r\n                setintervalType(\"\")\r\n                setplanName(\"\")\r\n                setplanRole([])\r\n                setplanType(\"\")\r\n                setprice(\"\")\r\n                setpriceCurrency(\"\")\r\n                setunbinding(true)\r\n\r\n                return\r\n            }else{\r\n                return\r\n            }\r\n        }\r\n        else{\r\n            return;\r\n        }\r\n    }\r\n\r\n        \r\n        return (\r\n                <div className=\"fixed z-10 inset-0 overflow-y-auto hidden\" id=\"plan-modal\">\r\n            \r\n                    <form onSubmit={submitHandler}>\r\n                        <div className=\"flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0\">\r\n\r\n                            <div className=\"fixed inset-0 transition-opacity\" aria-hidden=\"true\">\r\n                                <div className=\"absolute inset-0 bg-gray-500 opacity-75\"></div>\r\n                            </div>\r\n                \r\n                            <span className=\"hidden sm:inline-block sm:align-middle sm:h-screen\" aria-hidden=\"true\">&#8203;</span>\r\n\r\n            \r\n                            <div className=\"inline-block align-bottom bg-white rounded-lg px-4 pt-5 pb-4 text-left shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-sm sm:w-full sm:p-6 dark:bg-darkOther-200\" role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"modal-headline\">\r\n                        \r\n                                <div>\r\n                                    <button type=\"button\" onClick={() => {\r\n                                        document.querySelector('#plan-modal').classList.contains('hidden') ? document.querySelector('#plan-modal').classList.remove('hidden') : document.querySelector('#plan-modal').classList.add('hidden')\r\n                                    }}><AiOutlineClose className=\"text-red-500 h-6 w-6 \" id='hide' /></button>\r\n\r\n\r\n                                    <div className=\"mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-green-100\">\r\n            \r\n                                    \r\n                                    <IoPricetagOutline className=\"h-6 w-6 text-green-600 select-none\" id='hide'/>\r\n                                </div>\r\n        \r\n\r\n                                <div className=\"mt-3 text-center sm:mt-5\">  \r\n                                    <h3 className=\"text-lg leading-6 font-medium text-gray-900 dark:text-white select-none\" id=\"modal-headline\">\r\n                                    Create a Plan...\r\n                                    </h3>\r\n        \r\n                                    <div className=\"mt-2\">\r\n                                        \r\n                                        <div>\r\n\r\n                                            <fieldset className=\"mt-2 bg-white dark:bg-darkOther-200\">\r\n                                                <div className=\"md:grid md:grid-cols-2\">\r\n                                                <div className=\"\">\r\n                                                        <legend className=\"block text-sm font-medium text-gray-700 text-left dark:text-gray-300 select-none\">Plan Name</legend>\r\n                                                        <div className=\"mt-1 rounded-md shadow-sm -space-y-px\">\r\n                                                            <div>\r\n                                                            <label className=\"block text-sm font-medium text-gray-700\"></label>\r\n                                                            <input  name=\"planName\" id=\"name\" autoComplete=\"off\" className=\"dark:bg-darkOther-200 focus:outline-none dark:text-white block w-full font-medium text-md rounded-md py-2\" \r\n                                                            placeholder=\"Member\" value={planName} onChange={e => setplanName(e.target.value)} />                                                         \r\n                                                            \r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                    \r\n                                                    <div className=\"\">\r\n                                                        <legend className=\"block text-sm font-medium text-gray-700 text-left dark:text-gray-300 select-none\">Type</legend>\r\n                                                        <div className=\"mt-1 rounded-md shadow-sm -space-y-px\">\r\n                                                            <div>\r\n                                                                <label className=\"sr-only\">type</label>\r\n                                                                \r\n                                                                <Select defaultValue={planOptions[0]} styles={colourStyle} placeholder=\"Plan Type\" id=\"type\" value={planType} name=\"planType\" options={planOptions} className=\"relative block w-full rounded-none rounded-t-md focus:z-10 font-normal text-md focus:outline-none\"\r\n                                                                onChange={e => setplanType(e.value)} value={planOptions.filter(function(planOptions) {return planOptions.value === planType})}/>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                \r\n                                                </div>\r\n                \r\n                                            </fieldset>\r\n\r\n                                            {planType == \"recurring\" || planType == \"recurring+onetime-payment\" ?  <fieldset className=\"mt-2 bg-white dark:bg-darkOther-200\">\r\n                                                <div className=\"md:grid md:grid-cols-2\">\r\n                                                <div className=\"\">\r\n                                                        <legend className=\"block text-sm font-medium text-gray-700 text-left dark:text-gray-300 select-none\">Interval</legend>\r\n                                                        <div className=\"mt-1 rounded-md shadow-sm -space-y-px\">\r\n                                                            <div className=\"mt-1 flex rounded-md shadow-sm -space-y-px\">\r\n                                                                <span className=\"inline-flex items-center px-3 rounded-l-md border-r-2 border-gray-200 bg-gray-50 text-gray-800 sm:text-sm mr-2 dark:bg-darkOther-100 dark:text-white select-none\">\r\n                                                                    every\r\n                                                                </span>\r\n                                                                <input name=\"interval\" id=\"interval\" type=\"text\" placeholder=\"Count\" autoComplete=\"off\" className=\"dark:bg-darkOther-200 block w-full font-medium text-md rounded-md py-2 focus:outline-none dark:text-white\" value={interval} onChange={e => setinterval(e.target.value)}/>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                    \r\n                                                    <div className=\"\">\r\n                                                        <legend className=\"block text-sm font-medium text-gray-700 text-left dark:text-gray-300 select-none\">Interval Type</legend>\r\n                                                        <div className=\"mt-1 rounded-md shadow-sm -space-y-px\">\r\n                                                            <div>\r\n                                                                <label className=\"sr-only select-none\">Interval Type</label>\r\n                                                                \r\n                                                                <Select defaultValue={intervalTypeOptions[3]} styles={colourStyle} id=\"type\" value={intervalType} name=\"intervalType\" options={intervalTypeOptions} placeholder=\"Interval\" \r\n                                                                className=\"relative block w-full rounded-none rounded-t-md focus:z-10 font-normal text-md\"\r\n                                                                onChange={e => setintervalType(e.value)} value={intervalTypeOptions.filter(function(intervalTypeOptions) {return intervalTypeOptions.value === intervalType})}/>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                \r\n                                                </div>\r\n                \r\n                                            </fieldset> :  <></> }\r\n\r\n                                            \r\n                                        \r\n\r\n                                            <fieldset className=\"mt-4 bg-white dark:bg-darkOther-200\">\r\n                                                <legend className=\"block text-sm font-medium text-gray-700 text-left dark:text-gray-300 select-none\">Price</legend>\r\n                                                <div className=\"mt-1 bg-white rounded-md shadow-sm dark:bg-darkOther-200\">\r\n                                                    <div>\r\n                                                        <div className=\"mt-1 relative rounded-md shadow-sm\">\r\n                                                            <input type=\"text\" name=\"price\" id=\"price\" className=\"dark:bg-darkOther-200 focus:outline-none block w-full font-medium text-md  rounded-md py-2 dark:text-white\" \r\n                                                            placeholder=\"0.00\" value={price} autoComplete=\"off\" onChange={e => setprice(e.target.value)}/>\r\n\r\n                                                            <div className=\"absolute inset-y-0 right-0 flex items-center\">\r\n                                                                <label className=\"sr-only\">Currency</label>\r\n                                                                <Select defaultValue={currencyOptions[0]} styles={colourStyle}  id=\"type\" value={priceCurrency} name=\"priceCurrency\" placeholder=\"Currency\" options={currencyOptions} className=\"px-3 w-48 dark:bg-darkOther-200\"\r\n                                                                onChange={e => setpriceCurrency(e.value)} isSearchable value={currencyOptions.filter(function(currencyOptions) {return currencyOptions.value === priceCurrency})}/>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </div>\r\n                                            \r\n                                            </fieldset>\r\n\r\n                                            {planType == \"rental\" ? <fieldset className=\"mt-4 bg-white dark:bg-darkOther-200\">\r\n                                                <legend className=\"block text-sm font-medium text-gray-700 text-left dark:text-gray-300 select-none\">Expiry</legend>\r\n                                                <div className=\"mt-1 bg-white  dark:bg-darkOther-200\">\r\n                                                    <div>\r\n                                                        <div className=\"mt-1 relative rounded-md shadow-sm text-left dark:text-white\" id=\"calend\">\r\n                                                        <DatePicker\r\n                                                            onChange={setExpDate}\r\n                                                            value={expDate}\r\n                                                            calendarAriaLabel={\"Select Date\"}\r\n                                                            calendarIcon={<BsCalendar />}\r\n                                                            clearIcon={<MdClear />}\r\n                                                            onCalendarClose={() => {\r\n                                                                document.querySelector('#calend').classList.add('dark:text-white')\r\n                                                            }}\r\n                                                            onCalendarOpen={() => {\r\n                                                                document.querySelector('#calend').classList.remove('dark:text-white')\r\n                                                            }}\r\n                                                        />\r\n\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </div>\r\n                                            \r\n                                            </fieldset> : <></>}\r\n\r\n                                            {planType == \"recurring+onetime-payment\" ? <fieldset className=\"mt-2 bg-whit dark:bg-darkOther-200\" id=\"interval-fieldset\">\r\n                                                    <div className=\"\">\r\n                                                        <legend className=\"block text-sm font-medium text-gray-700 text-left dark:text-gray-300 select-none\">Onetime Payment Price</legend>\r\n                                                        <div className=\"mt-1 rounded-md shadow-sm -space-y-px\">\r\n                                                            <div>\r\n                                                                <label className=\"sr-only\">price</label>\r\n                                                                <input type=\"text\" className=\"dark:bg-darkOther-200 focus:outline-none block w-full font-medium text-md rounded-md py-2 dark:text-white\" \r\n                                                                placeholder=\"0.00\" value={oneTimePrice} autoComplete=\"off\" onChange={e => setOneTimePrice(e.target.value)}/>\r\n                                                                                                                                    \r\n                                                            \r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                            \r\n                                            </fieldset> : <></>}\r\n\r\n        \r\n                                            <fieldset className=\"mt-2 bg-whit dark:bg-darkOther-200\" id=\"interval-fieldset\">\r\n                                                    <div className=\"\">\r\n                                                        <legend className=\"block text-sm font-medium text-gray-700 text-left dark:text-gray-300 select-none\">Roles</legend>\r\n                                                        <div className=\"mt-1 rounded-md shadow-sm -space-y-px\">\r\n                                                            <div>\r\n                                                                <label className=\"sr-only\">roles</label>\r\n                                    \r\n                                                                <Select id=\"roles\" value={planRole}  placeholder=\"Roles\" closeMenuOnSelect={false} styles={colourStyles} name=\"planRole\" isSearchable components={makeAnimated()} isMulti options={availableRoles} className=\"focus:ring-other-200 focus:border-other-200 relative block w-full rounded-none rounded-t-md bg-transparent focus:z-10 font-medium text-md dark:focus:border-darkOther-200 dark:focus:ring-darkOther-200\"\r\n                                                                    onChange={e => setplanRole(e)} />\r\n                                                                                                                                                                              \r\n                                                            \r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                            \r\n                                            </fieldset>\r\n\r\n                                            <fieldset className=\"mt-2 bg-white dark:bg-darkOther-200\" id=\"interval-fieldset\">\r\n                                                    <div className=\"\">\r\n                                                        <legend className=\"block text-sm font-medium text-gray-700 text-left dark:text-gray-300 select-none\">{unbinding ? \"Unbinding Enabled\" : \"Unbinding Disabled\"}</legend>\r\n                                                        <div className=\"mt-1 rounded-md shadow-sm -space-y-px\">\r\n                                                            <div className=\"text-left\">\r\n                                                                <label className=\"sr-only\">allow unbinding</label>\r\n                                                                <Switch \r\n                                                                checked={unbinding}\r\n                                                                onChange={e => setunbinding(e)}\r\n                                                                as=\"button\" \r\n                                                                className={`${unbinding ? \"bg-green-400\" : \"bg-gray-200\"} relative inline-flex flex-shrink-0 h-6 w-11 border-2 border-transparent rounded-full cursor-pointer transition-colors ease-in-out duration-200 focus:outline-none`}>\r\n\r\n                                                                    {unbinding ? \r\n                                                                    <span aria-hidden=\"true\" className=\"pointer-events-none translate-x-0 inline-block h-5 w-5 rounded-full bg-white shadow transform ring-0 transition ease-in-out duration-200\"></span> : \r\n                                                                    <span aria-hidden=\"true\" className=\"pointer-events-none translate-x-5 inline-block h-5 w-5 rounded-full bg-white shadow transform ring-0 transition ease-in-out duration-200\"></span>\r\n                                                                    }\r\n\r\n                                                                </Switch>\r\n                                                                                                                                    \r\n                                                            \r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                            \r\n                                            </fieldset>\r\n        \r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"mt-5 sm:mt-6\">\r\n                                <button  name=\"license-modal\" type=\"submit\" className=\"inline-flex justify-center w-full rounded-md border border-transparent shadow-sm px-4 py-2 bg-blue-500 text-base font-medium text-white hover:bg-other-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-other-200 sm:text-sm dark:focus:ring-darkOther-200 dark:hover:bg-darkOther-200 dark:bg-darkOther-100\">\r\n                                    Create\r\n                                </button>\r\n                            </div>\r\n\r\n                        </div>\r\n                    \r\n                    </div>\r\n                    </form>\r\n            </div>\r\n\r\n        )\r\n\r\n}\r\nexport default PlanModal","E:\\dashboard-react\\src\\components\\home\\restockModal.js",["148"],"import '../../static/styles/main.css'; \r\nimport React, { useState, useEffect } from 'react';\r\nimport Select from 'react-select';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport { AiOutlineClose, AiOutlineShoppingCart } from 'react-icons/ai';\r\n\r\n\r\nconst RestockModal = () => {\r\n    const [plans, setPlans] = useState([])\r\n    const [password, setPassword] = useState(\"\")\r\n    const [stock, setStock] = useState(\"\")\r\n    const [restockPlan, setRestockPlan] = useState(\"\")\r\n    const [planName, setPlanName] = useState(\"\")\r\n\r\n    async function fetchPlans(){\r\n        const res = await fetch('/plans/data');\r\n        res.json()\r\n        .then(res => {setPlans(res)})\r\n        .catch(err =>  fetchPlans());\r\n        \r\n    }\r\n\r\n    useEffect(() =>{\r\n        var abortController = new AbortController();\r\n        fetchPlans()\r\n\r\n        setInterval(() => {\r\n            abortController = new AbortController();\r\n            fetchPlans()\r\n        }, 5000);\r\n\r\n\r\n        return () => {\r\n            abortController.abort();\r\n        };\r\n\r\n    }, [])\r\n\r\n    const colourStyle = {\r\n        control: styles => ({ ...styles, backgroundColor: localStorage.getItem('mode') }),\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    const submitHandler = async (e) => {\r\n        e.preventDefault()\r\n        \r\n        try{\r\n            if(password.length > 0 && stock.length > 0) {\r\n                await fetch('/restocks/add', {\r\n                    method:'POST',\r\n                    body:JSON.stringify({\r\n                        password:password,\r\n                        stock:parseInt(stock),\r\n                        stockRemaining:parseInt(stock),\r\n                        planId:restockPlan,\r\n                        restockMethod:'regular',\r\n                        id:uuidv4(),\r\n                        planName:planName\r\n                    }),\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n                    }\r\n                })\r\n                .then(response => {\r\n                    console.log(document.querySelector('#button-create').classList)\r\n                    document.querySelector('#button-create').classList.remove('bg-other-200')\r\n                    document.querySelector('#button-create').classList.remove('hover:bg-other-300')\r\n                    document.querySelector('#button-create').classList.remove('dark:bg-darkOther-200')\r\n        \r\n                    document.querySelector('#button-create').classList.add('bg-green-500')\r\n                    document.querySelector('#button-create').classList.add('hover:bg-green-600')\r\n\r\n                    setPlans([])\r\n                    setPassword(\"\")\r\n                    setStock(\"\")\r\n                    setRestockPlan(\"\")\r\n                }).catch(err => console.log(err))\r\n            }else{\r\n                return\r\n            }\r\n        }catch(err){\r\n            console.log(err)\r\n            return;\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n        return (\r\n            <div className=\"fixed z-10 inset-0 overflow-y-auto hidden\" id=\"restock-modal\">\r\n\r\n                <div className=\"flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0\">\r\n                    <form onSubmit={submitHandler}>\r\n                    <div className=\"fixed inset-0 transition-opacity\" aria-hidden=\"true\">\r\n                    <div className=\"absolute inset-0 bg-gray-500 opacity-75\"></div>\r\n\r\n                </div>\r\n\r\n                <span className=\"hidden sm:inline-block sm:align-middle sm:h-screen\" aria-hidden=\"true\">&#8203;</span>\r\n\r\n\r\n                <div className=\"inline-block align-bottom bg-white rounded-lg px-4 pt-5 pb-4 text-left shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-sm sm:w-full sm:p-6 dark:bg-darkOther-200\" role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"modal-headline\">\r\n\r\n                    <div>\r\n\r\n                    <button type=\"button\" onClick={() => {\r\n                        document.querySelector('#button-create').classList.remove('bg-other-200')\r\n                        document.querySelector('#button-create').classList.remove('dark:bg-darkOther-200')\r\n                        document.querySelector('#button-create').classList.remove('hover:bg-other-300')\r\n            \r\n                        document.querySelector('#button-create').classList.remove('bg-green-500')\r\n                        document.querySelector('#button-create').classList.remove('hover:bg-green-600')\r\n\r\n                        document.querySelector('#restock-modal').classList.contains('hidden') ? document.querySelector('#restock-modal').classList.remove('hidden') : document.querySelector('#restock-modal').classList.add('hidden')\r\n                    }}><AiOutlineClose className=\"text-red-500 h-6 w-6\" /></button>\r\n                        \r\n\r\n                        <div className=\"mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-green-100\">\r\n\r\n\r\n                            <AiOutlineShoppingCart className=\"h-6 w-6 text-green-600 select-none\"/>\r\n\r\n                    </div>\r\n\r\n                    <div className=\"mt-3 text-center sm:mt-5\">\r\n                        <h3 className=\"text-lg leading-6 font-medium text-gray-900 dark:text-white select-none\" id=\"modal-headline\">\r\n                          Create a Restock\r\n                        </h3>\r\n\r\n                        <div className=\"mt-2\">\r\n\r\n                            <div>\r\n                                <fieldset >\r\n                                    <legend className=\"block text-sm font-medium text-gray-700 text-left dark:text-gray-300 select-none\">Password</legend>\r\n                                    <div className=\"mt-1 bg-white rounded-md shadow-sm dark:bg-darkOther-200\">\r\n                                        <div>\r\n                                            <label className=\"block text-sm font-medium text-gray-700\"></label>\r\n                                            <input  name=\"password\" id=\"password\" autoComplete=\"off\" className=\"dark:bg-darkOther-200 focus:ring-other-200 focus:border-other-200 dark:focus:ring-darkOther-200 dark:focus:border-darkOther-200 block w-full font-medium text-md rounded-md py-2\" placeholder=\"passsword\" onChange={e => setPassword(e.target.value)} />\r\n                                        </div>\r\n                                    </div>\r\n                                </fieldset>\r\n\r\n                                <fieldset className=\"mt-2 bg-white dark:bg-darkOther-200\">\r\n                                    <legend className=\"block text-sm font-medium text-gray-700 text-left dark:text-gray-300 select-none\">Stock</legend>\r\n                                    <div className=\"mt-1 rounded-md shadow-sm \">\r\n                                        <div>\r\n                                            <label className=\"block text-sm font-medium text-gray-700\"></label>\r\n                                            <input  name=\"stock\"  autoComplete=\"off\" className=\"dark:bg-darkOther-200 focus:ring-other-200 focus:border-other-200 dark:focus:ring-darkOther-200 dark:focus:border-darkOther-200 block w-full font-medium text-md rounded-md py-2\" placeholder=\"10\" onChange={e => setStock(e.target.value)} />\r\n                                        </div>\r\n                                    </div>\r\n                                </fieldset>\r\n  \r\n  \r\n\r\n                                <fieldset className=\"mt-2 bg-white dark:bg-darkOther-200\">\r\n                                    <div className=\"mt-1 bg-white rounded-md shadow-sm dark:bg-darkOther-200\">\r\n                                        <div>\r\n                                            <legend className=\"block text-sm font-medium text-gray-700 text-left dark:text-gray-300 select-none\">Plan</legend>\r\n                                            <div className=\"mt-1 rounded-md shadow-sm -space-y-px\">\r\n                                                <div>\r\n                                                    <label className=\"sr-only select-none\">Plan</label>\r\n                                                    <Select name=\"restockPlan\" value={restockPlan.value} options={plans} styles={colourStyle} className=\"focus:ring-other-200 focus:border-other-200 dark:focus:ring-darkOther-200 dark:focus:border-darkOther-200 relative block w-full rounded-none rounded-t-md bg-transparent focus:z-10 font-medium text-md\" onChange={(e)=> { \r\n                                                        setRestockPlan(e.value)\r\n                                                        setPlanName(e.label)\r\n                                                    }}/>\r\n                                                    \r\n\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </fieldset>\r\n\r\n                            </div>\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"mt-5 sm:mt-6\">\r\n                  <button type=\"submit\" id=\"button-create\" className=\"inline-flex justify-center w-full rounded-md border border-transparent shadow-sm px-4 py-2 bg-blue-500 text-base font-medium text-white hover:bg-other-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-other-200 sm:text-sm dark:focus:ring-darkOther-200 dark:hover:bg-darkOther-200 dark:bg-darkOther-100\">\r\n                    Create\r\n                  </button>\r\n                </div>\r\n\r\n            </div>\r\n            </form>\r\n            </div>\r\n            </div>\r\n\r\n        )\r\n\r\n\r\n}\r\nexport default RestockModal","E:\\dashboard-react\\src\\components\\licenses\\licenses.js",["149","150","151"],"import '../../static/styles/main.css'; \r\nimport React, { useState, useEffect } from 'react';\r\nimport LicenseModal from './licenseModal';\r\nimport LicenseTable from './table';\r\nimport AdminNavigation from '../adminNav';\r\nimport AdminSearchbar from '../adminSearch';\r\n\r\nimport { AiOutlineSearch } from 'react-icons/ai';\r\nimport { FaPlus } from 'react-icons/fa';\r\nimport BounceLoader from \"react-spinners/BounceLoader\";\r\n\r\nconst Licenses = () => {\r\n    const [loaded, setLoaded] = useState(true)\r\n\r\n    \r\n\r\n    const filter = () => {\r\n        var input, filter, table, tr, td, i, txtValue;\r\n        input = document.getElementById(\"searchInput\");\r\n        filter = input.value.toUpperCase();\r\n        table = document.getElementById(\"table\");\r\n        tr = table.getElementsByTagName(\"tr\");\r\n        \r\n        // Loop through all table rows, and hide those who don't match the search query\r\n        for (i = 0; i < tr.length; i++) {\r\n            try{\r\n                var td1 = tr[i].getElementsByTagName(\"td\")[1];\r\n\r\n                txtValue = td1.textContent || td1.innerText;\r\n                if (txtValue.toUpperCase().indexOf(filter) > -1) {\r\n                    tr[i].style.display = \"\";\r\n                } else {\r\n                    tr[i].style.display = \"none\";\r\n                }\r\n\r\n            }catch(e){\r\n                console.log(e)\r\n            }\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n\r\n            <AdminNavigation />\r\n            <div className=\"flex flex-col w-0 flex-1 overflow-hidden \" >\r\n            <AdminSearchbar />\r\n        \r\n            {\r\n                loaded ?\r\n                <main className=\"flex-1 relative overflow-y-auto focus:outline-none \">\r\n\r\n                <div className=\"bg-white overflow-hidden shadow rounded-lg divide-y mr-12 mt-5 dark:bg-darkOther-200\">\r\n\r\n                    <div className=\"px-4 py-5 sm:px-6\">\r\n\r\n                        <dl className=\"sm:grid sm:grid-cols-2\">\r\n\r\n                            <div className=\"flex flex-col p-2 bg-white mr-5 dark:bg-darkOther-200\">\r\n\r\n                                <h1 className=\"dark:text-white\">Licenses</h1>\r\n\r\n                                <div className=\"relative w-full text-gray-400 focus-within:text-gray-600 dark:bg-darkOther-200\">\r\n\r\n                                    <div className=\"absolute inset-y-0 left-0 flex items-center pointer-events-none\">\r\n                                        <AiOutlineSearch className=\"h-5 w-5 text-gray-900 dark:text-other-100\"/>\r\n                                    </div>   \r\n                                                                            \r\n                                    <input id=\"searchInput\" onKeyUp={filter} autoComplete=\"off\" className=\"dark:text-white dark:bg-darkOther-200 bg-white block w-full h-full pl-8 pr-3 py-2 text-gray-900 placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-0 focus:border-transparent sm:text-sm\" placeholder=\"Search by DiscordName/DiscordID\" type=\"search\" name=\"search\" />\r\n                                \r\n                                </div>\r\n    \r\n                            </div>\r\n\r\n\r\n                            <div className=\"flex-col border-gray-200 p-2 mr-4 text-right\">\r\n\r\n                                <button name=\"license-modal\" id=\"license-button-hide\" type=\"button\" className=\"inline-flex items-center px-3 py-2 border border-transparent shadow-sm text-sm leading-4 font-medium rounded-md text-white dark:text-white bg-other-100 dark:bg-other-200 text-other-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-other-200 dark:focus:ring-darkOther-200\" onClick={() => {\r\n                                            document.querySelector('#license-modal').classList.contains('hidden') ? document.querySelector('#license-modal').classList.remove('hidden') : document.querySelector('#license-modal').classList.add('hidden')\r\n                                        }}>\r\n                                    <FaPlus className=\"-ml-0.5 mr-2 h-4 w-4 dark:text-white text-other-500\"/>\r\n                                    New License\r\n                                </button>\r\n\r\n                            </div>\r\n\r\n                        </dl>\r\n\r\n                    </div>\r\n\r\n                    {/* <div className=\"px-4 py-5 sm:p-6\"> */}\r\n\r\n                        {/* License Modal */}\r\n                        <LicenseModal />\r\n\r\n\r\n                        <div className=\"flex flex-col \">\r\n\r\n                            <div className=\"-my-2 overflow-y-auto sm:-mx-6 lg: mr-12 dark:bg-darkOther-200\" style={{'min-height': '400px', 'max-height': '800px'}}>\r\n                                <div className=\"py-2 align-middle inline-block min-w-full sm:px-6 lg:px-8\" >\r\n                                    \r\n                                    <div className=\"shadow overflow-hidden\">\r\n\r\n                                        {/* Table */}\r\n                                        <LicenseTable />\r\n                                        \r\n\r\n                                    </div>\r\n\r\n                                </div>\r\n                                \r\n                            </div>\r\n                        </div>\r\n\r\n                    {/* </div> */}\r\n                </div>\r\n\r\n                <footer>\r\n                    <p className=\"text-sm font-small text-gray-600\">Invincible Services | 2021 | Thank you for using our services</p>\r\n                </footer>\r\n\r\n            </main>\r\n\r\n            :\r\n            <div className=\"m-auto\">\r\n                        \r\n                <BounceLoader color={'#302f2f'} loading={true} size={25} />\r\n                    \r\n            </div>\r\n            }\r\n\r\n            </div>\r\n        \r\n        </>\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default Licenses","E:\\dashboard-react\\src\\components\\licenses\\licenseModal.js",[],"E:\\dashboard-react\\src\\components\\licenses\\table.js",["152","153","154","155","156"],"import '../../static/styles/main.css'; \r\nimport React, { useEffect, useState } from 'react';\r\nimport { BsThreeDots } from 'react-icons/bs';\r\nimport SquareLoader from \"react-spinners/SquareLoader\";\r\n\r\n\r\nconst LicenseTable = () => {\r\n\r\n    const [users, setUsers] = useState([])\r\n    const [loaded, setLoaded] = useState(false)\r\n\r\n    async function fetchUsers(){\r\n        const res = await fetch('/users/fetch');\r\n        res.json()\r\n        .then(res => {\r\n            setUsers(res)\r\n            setLoaded(true)\r\n        })\r\n        .catch(err =>  fetchUsers());\r\n        \r\n    }\r\n\r\n\r\n    useEffect(() =>{\r\n        var abortController = new AbortController();\r\n        fetchUsers()\r\n\r\n\r\n        setInterval(() => {\r\n            abortController = new AbortController();\r\n            fetchUsers()\r\n\r\n        }, 5000);\r\n\r\n\r\n        return () => {\r\n            abortController.abort();\r\n        };\r\n\r\n    }, [])\r\n\r\n    const submitEmailHandler = async (e, key,email) => {\r\n        e.preventDefault()\r\n\r\n        try{\r\n\r\n            await fetch('/users/email', {\r\n                method:'POST',\r\n                body:JSON.stringify({\r\n                    email:email,\r\n                    key:key\r\n                }),\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                }\r\n            })\r\n            .then(response => {\r\n            }).catch(err => console.log(err))\r\n        }catch(err){\r\n            console.log(err)\r\n            return;\r\n        }\r\n\r\n    }\r\n    const submitUnbindHandler = async (e, id) => {\r\n        e.preventDefault()\r\n        \r\n        try{\r\n\r\n            await fetch('/users/force/unbind/' +id, {\r\n                method:'get'\r\n            })\r\n            .then(response => {\r\n                {}\r\n            }).catch(err => console.log(err))\r\n        }catch(err){\r\n            console.log(err)\r\n            return;\r\n        }\r\n\r\n    }\r\n    const submitRevokeHandler = async (e, id) => {\r\n        e.preventDefault()\r\n        \r\n        try{\r\n\r\n            await fetch('/users/revoke/' + id, {\r\n                method:'get'\r\n            })\r\n            .then(response => {\r\n                // setPlan(\"\")\r\n                // setEmail(\"\")\r\n            }).catch(err => console.log(err))\r\n        }catch(err){\r\n            console.log(err)\r\n            return;\r\n        }\r\n\r\n    }\r\n\r\n\r\n    const renderTableRows = () => {\r\n        return users.map(user => {\r\n            var date = new Date(user.dateCreated * 1000)\r\n            return (\r\n    \r\n                <tr key={user.id}>\r\n                    <td className=\"px-6 py-4 whitespace-nowrap dark:bg-darkOther-200\">\r\n                        {/* <div className=\"flex items-center\"> */}\r\n\r\n                            {/* <div className=\"ml-2\"> */}\r\n\r\n                                {/* style=\"font-family: 'Ubuntu Mono', monospace;\" */}\r\n                                <div className=\"text-gray-500 dark:text-gray-300 font-mono\" id=\"key\">\r\n                                    {user.key}\r\n                                </div>\r\n                                <div className=\"text-xs gray-900 dark:text-gray-500\" id=\"discordId\">{user.plan}</div>\r\n\r\n                            {/* </div> */}\r\n\r\n                        {/* </div> */}\r\n                    </td>\r\n\r\n                    <td className=\"px-6 py-4 whitespace-nowrap dark:bg-darkOther-200\">\r\n                        <div className=\"text-sm text-gray-900 dark:text-gray-500\" id=\"discordName\">{user.discordName == \"empty\" ? \"Unbound\" : user.discordName}</div>\r\n                        <div className=\"text-sm text-gray-500 dark:text-gray-300\" id=\"discordId\">{user.discordId == 123456789 ? \"Unbound\" : user.discordId}</div>\r\n                    </td>\r\n\r\n                    {/* <td className=\"px-6 py-4 whitespace-nowrap dark:bg-darkOther-200\">\r\n                        <div className=\"text-sm text-gray-900\" id=\"keyType\">{user.keyType}</div>\r\n                        <span className=\"px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800\">\r\n                            Active\r\n                        </span>\r\n                    </td> */}\r\n\r\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:bg-darkOther-200\">\r\n                        {\r\n                        `${date.getDate()} ${['January','February','March','April','May','June','July','August','September','October','November','December'][date.getMonth()]}, ${date.getFullYear()}`\r\n                        }\r\n                    </td>\r\n\r\n                    <td className=\"px-6 py-4 whitespace-nowrap dark:bg-darkOther-200\">\r\n                        \r\n                        <button className=\"ml-2 text-gray-600 hover:text-gray-900\" id={`${user.id}-dropdown-button-hide`} onClick={() => {\r\n                            document.querySelector(`#dropdown-${user.id}`).classList.contains('hidden') ? document.querySelector(`#dropdown-${user.id}`).classList.remove('hidden') : document.querySelector(`#dropdown-${user.id}`).classList.add('hidden')\r\n                        }}> <BsThreeDots className=\"h-4 w-4\" id={`${user.id}-icon-hide`} />\r\n                        </button>\r\n\r\n                        <div id={`dropdown-${user.id}`} className=\"dark:bg-darkOther-200 hidden mx-3 mr-10 origin-top-right absolute right-7 top-0 w-48 mt-1 rounded-md shadow-lg z-10 bg-white ring-1 ring-black ring-opacity-5\">\r\n\r\n                            <button className=\"block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 dark:text-white dark:hover:bg-darkOther-300 w-full\" role=\"menuitem\" id={`hide-${user.id}`} onClick={(e) => submitUnbindHandler(e, user.id)}>Unbind from User</button>\r\n                            <button className=\"block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 dark:text-white dark:hover:bg-darkOther-300 w-full\" role=\"menuitem\" id={`hide-${user.id}`} onClick={(e) => submitRevokeHandler(e, user.id)}>Revoke & Delete</button>\r\n                            <button className=\"block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 dark:text-white dark:hover:bg-darkOther-300 w-full\" role=\"menuitem\" id={`hide-${user.id}`} onClick={(e) => submitEmailHandler(e, user.key, user.email)}>Send receipt via email</button>\r\n                            <button disabled className=\"block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 dark:text-white dark:hover:bg-darkOther-300 w-full\" role=\"menuitem\" id={`hide-${user.id}`} onClick={(e) => {}}>Extend license (disabled)</button>\r\n                    \r\n                        </div>\r\n\r\n                    </td>\r\n\r\n                </tr>\r\n            )\r\n            \r\n            \r\n        })\r\n    }\r\n\r\n\r\n\r\n    return (\r\n\r\n        <table className=\"w-full overflow-y-auto\" id=\"table\" id='table'>\r\n\r\n                <thead className=\"bg-gray-200 dark:bg-darkOther-100\">\r\n\r\n                    <tr>\r\n                        <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider select-none\">\r\n                        Key\r\n                        </th>\r\n\r\n                        <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider select-none\">\r\n                        User\r\n                        </th>\r\n\r\n                        {/* <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider select-none\">\r\n                        Plan\r\n                        </th> */}\r\n\r\n                        <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider select-none\">\r\n                        Created\r\n                        </th>\r\n\r\n                        <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider select-none\">\r\n                            Options\r\n                        </th>\r\n                    </tr>\r\n\r\n                </thead>\r\n                \r\n                <tbody className=\"divide-y divide-gray-200 dark:divide-gray-700 min-h-full\">\r\n                    {\r\n                        loaded ? renderTableRows() : \r\n                        <tr>\r\n                        <td className=\"px-6 py-4 whitespace-nowrap dark:bg-darkOther-200\">\r\n                            {/* <div className=\"flex items-center\"> */}\r\n    \r\n                                {/* <div className=\"ml-2\"> */}\r\n    \r\n                                    {/* style=\"font-family: 'Ubuntu Mono', monospace;\" */}\r\n                                    <div className=\"text-sm text-gray-700 font-mono dark:text-gray-400\" id=\"key\">\r\n                                    <SquareLoader color={'#302f2f'} loading={true} size={25} />\r\n                                    </div>\r\n    \r\n                                {/* </div> */}\r\n    \r\n                            {/* </div> */}\r\n                        </td>\r\n    \r\n                        <td className=\"px-6 py-4 whitespace-nowrap dark:bg-darkOther-200\">\r\n                            <div className=\"text-sm text-gray-900 dark:text-gray-500\" id=\"discordName\"><SquareLoader color={'#302f2f'} loading={true} size={25} /></div>\r\n                            <div className=\"text-sm text-gray-500 dark:text-gray-300\" id=\"discordId\"><SquareLoader color={'#302f2f'} loading={true} size={25} /></div>\r\n                        </td>\r\n    \r\n                        {/* <td className=\"px-6 py-4 whitespace-nowrap dark:bg-darkOther-200\">\r\n                            <div className=\"text-sm text-gray-900\" id=\"keyType\">{user.keyType}</div>\r\n                            <span className=\"px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800\">\r\n                                Active\r\n                            </span>\r\n                        </td> */}\r\n    \r\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:bg-darkOther-200\">\r\n                        <SquareLoader color={'#302f2f'} loading={true} size={25} />\r\n                        </td>\r\n    \r\n                        <td className=\"px-6 py-4 whitespace-nowrap dark:bg-darkOther-200\">\r\n                            \r\n                        <SquareLoader color={'#302f2f'} loading={true} size={25} />\r\n\r\n    \r\n                        </td>\r\n    \r\n                    </tr>\r\n                    }\r\n                </tbody>\r\n                \r\n        </table>\r\n\r\n            \r\n\r\n\r\n    )\r\n\r\n\r\n\r\n}\r\nexport default LicenseTable","E:\\dashboard-react\\src\\components\\users\\table.js",["157","158","159","160","161"],"import '../../static/styles/main.css'; \r\nimport React, { useState, useEffect } from 'react';\r\n\r\nimport {FaUserCircle} from 'react-icons/fa'\r\nimport SquareLoader from \"react-spinners/SquareLoader\";\r\n\r\n\r\nconst LicenseTable = () => {\r\n    const [users, setUsers] = useState([])\r\n    const [loaded, setLoaded] = useState(false)\r\n    \r\n\r\n    async function fetchUsers(){\r\n        const res = await fetch('/users/fetch');\r\n        res.json()\r\n        .then(res => {\r\n            setUsers(res)\r\n            setLoaded(true)\r\n        })\r\n        .catch(err =>  {});\r\n        \r\n    }\r\n\r\n\r\n    useEffect(() =>{\r\n        var abortController = new AbortController();\r\n        fetchUsers()\r\n\r\n\r\n        setInterval(() => {\r\n            abortController = new AbortController();\r\n            fetchUsers()\r\n\r\n        }, 4000);\r\n\r\n\r\n        return () => {\r\n            abortController.abort();\r\n        };\r\n\r\n    }, [])\r\n\r\n\r\n\r\n    const renderTableRows = () => {\r\n        return users.map(user => {\r\n            var date = new Date(user.dateJoined * 1000)\r\n            return (\r\n                <tr key={user.id}>\r\n                    <td className=\"px-6 py-4 whitespace-nowra dark:bg-darkOther-200\">\r\n                        <div className=\"flex items-center\">\r\n                            <div className=\"flex-shrink-0 h-10 w-10\">\r\n                            {user.discordImage == \"\" ? <FaUserCircle className=\"h-10 w-10 rounded-full bg-other-200 text-other-100\" /> : <img className=\"h-10 w-10 rounded-full\" src={user.discordImage} alt=\"\" />}\r\n                            \r\n                            </div>\r\n\r\n                            <div className=\"ml-4\">\r\n                                <div className=\"text-sm font-medium text-gray-900 dark:text-gray-400\">\r\n                                {user.discordName == \"empty\" ? \"Unbound\" : user.discordName}\r\n                                </div>\r\n\r\n                                <div className=\"text-sm text-gray-500 dark:text-gray-300\">\r\n                                {user.discordId == 123456789 ? \"Unbound\" : user.discordId}\r\n                                </div>\r\n                                \r\n                            </div>\r\n                        </div>\r\n\r\n                    </td>\r\n\r\n                    <td className=\"px-6 py-4 whitespace-nowrap dark:bg-darkOther-200\">\r\n                        <div className=\"text-sm text-gray-900 dark:text-gray-400\">{user.email}</div>\r\n                    </td>\r\n\r\n                    <td className=\"px-6 py-4 whitespace-nowrap dark:bg-darkOther-200\">\r\n                        <div className=\"text-sm text-gray-700 font-mono dark:text-gray-400\">{user.key}</div>\r\n                        <div className=\"text-sm text-gray-500 dark:text-gray-300\">{user.keyType}</div>\r\n                    </td>\r\n             \r\n\r\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:bg-darkOther-200 dark:text-gray-400\">\r\n                    {user.dateJoined == 0 ? \"Not joined\" : \r\n                        `${date.getDate()} ${['January','February','March','April','May','June','July','August','September','October','November','December'][date.getMonth()]}, ${date.getFullYear()}`\r\n                    }\r\n                    </td>\r\n\r\n                    <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium dark:bg-darkOther-200\">\r\n                        <span className=\"text-other-200 hover:text-indigo-900\"></span>\r\n                    </td>\r\n\r\n                </tr>\r\n            )\r\n            \r\n        })\r\n    }\r\n\r\n\r\n\r\n    return (\r\n\r\n            <table className=\"w-full overflow-y-auto\" id=\"table\" id='table'>\r\n\r\n                <thead className=\"bg-gray-200 dark:bg-darkOther-100\">\r\n\r\n                    <tr>\r\n                        <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider select-none\">\r\n                            User\r\n                        </th>\r\n    \r\n                        <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider select-none\">\r\n                            Email\r\n                        </th>\r\n    \r\n                        <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider select-none\">\r\n                            Key\r\n                        </th>\r\n    \r\n                        <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider select-none\">\r\n                            Joined\r\n                        </th>\r\n    \r\n                        <th scope=\"col\" className=\"relative px-6 py-3\">\r\n                        </th>\r\n\r\n                    </tr>\r\n\r\n                </thead>\r\n                \r\n                <tbody className=\"divide-y divide-gray-200 dark:divide-gray-700 min-h-full\">\r\n                    {loaded ? renderTableRows() : \r\n                    <tr>\r\n                        <td className=\"px-6 py-4 whitespace-nowra dark:bg-darkOther-200\">\r\n                            <div className=\"flex items-center\">\r\n                                <div className=\"flex-shrink-0 h-10 w-10\">\r\n                                <SquareLoader color={'#302f2f'} loading={true} size={25} />\r\n                                \r\n                                </div>\r\n\r\n                                <div className=\"ml-4\">\r\n                                    <div className=\"text-sm font-medium text-gray-900 dark:text-gray-400\">\r\n                                    <SquareLoader color={'#302f2f'} loading={true} size={25} />\r\n                                    </div>\r\n\r\n                                    <div className=\"text-sm text-gray-500 dark:text-gray-300\">\r\n                                    <SquareLoader color={'#302f2f'} loading={true} size={25} />\r\n                                    </div>\r\n                                    \r\n                                </div>\r\n                            </div>\r\n\r\n                        </td>\r\n\r\n                        <td className=\"px-6 py-4 whitespace-nowrap dark:bg-darkOther-200\">\r\n                            <div className=\"text-sm text-gray-900 dark:text-gray-400\"><SquareLoader color={'#302f2f'} loading={true} size={25} /></div>\r\n                        </td>\r\n\r\n                        <td className=\"px-6 py-4 whitespace-nowrap dark:bg-darkOther-200\">\r\n                            <div className=\"text-sm text-gray-700 font-mono dark:text-gray-400\"><SquareLoader color={'#302f2f'} loading={true} size={25} /></div>\r\n                            <div className=\"text-sm text-gray-500 dark:text-gray-300\"><SquareLoader color={'#302f2f'} loading={true} size={25} /></div>\r\n                        </td>\r\n                \r\n\r\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:bg-darkOther-200 dark:text-gray-400\">\r\n                        <SquareLoader color={'#302f2f'} loading={true} size={25} />\r\n                        </td>\r\n\r\n                        <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium dark:bg-darkOther-200\">\r\n                            <span className=\"text-other-200 hover:text-indigo-900\"></span>\r\n                        </td>\r\n\r\n                    </tr>}\r\n                </tbody>\r\n                \r\n            </table>\r\n\r\n    )\r\n\r\n\r\n}\r\nexport default LicenseTable","E:\\dashboard-react\\src\\components\\settings\\settings.js",["162","163","164","165","166","167","168","169"],"import '../../static/styles/main.css'; \r\nimport React, { useState, useEffect } from 'react';\r\nimport AdminNavigation from '../adminNav';\r\nimport AdminSearchbar from '../adminSearch';\r\nimport BounceLoader from \"react-spinners/BounceLoader\";\r\nimport Select from 'react-select';\r\n\r\nimport { FaStripe } from 'react-icons/fa'\r\n\r\nconst failedPaymentOptions = [\r\n    {\"value\":\"1\", \"label\":\"Delete Key & Kick User\"},\r\n    {\"value\":\"2\", \"label\":\"Remove roles & allow user to renew\"}\r\n]\r\n\r\nconst Settings = () => {\r\n    const [accountName, setAccountName] = useState(\"\")\r\n    const [supportEmail, setSupportEmail] = useState(\"\")\r\n    const [imageURL, setImageURL] = useState(\"\")\r\n    const [failedPayment, setFailedPayments] = useState(\"\")\r\n    const [loaded, setLoaded] = useState(false)\r\n    const [bgURL, setbgUrl] = useState(\"\")\r\n    const [description, setDescription] = useState(\"\")\r\n\r\n    const openIntergrate = () => {\r\n        window.open('https://connect.stripe.com/oauth/authorize?response_type=code&client_id=ca_IoulDfRGftLWpHLLkw7NJwDFfs9LqhgT&scope=read_write&redirect_uri=http://127.0.0.1:4000/stripe/oauth/uri', '_blank').focus()\r\n    }\r\n\r\n    const accountHandle = async () => {\r\n        var response = await fetch('/accounts/dashboard/name/' + btoa(accountName))\r\n    } \r\n    const supportHandle = async () => {\r\n        var response = await fetch('/accounts/dashboard/supportEmail/' + btoa(supportEmail))\r\n    } \r\n    const logoHandle = async () => {\r\n        var response = await fetch('/accounts/dashboard/logo/' + btoa(imageURL))\r\n    } \r\n    const failedPaymentHandle = async () => {\r\n        var response = await fetch('/accounts/dashboard/payment/' + failedPayment) \r\n    } \r\n    const bgHandle = async () => {\r\n        var bg = \"empty\"\r\n        if(bgURL != \"\") bg = bgURL \r\n        var response = await fetch('/accounts/dashboard/background/' + btoa(bg)) \r\n    } \r\n    const descriptionHandle = async () => {\r\n        var response = await fetch('/accounts/dashboard/description/' + btoa(description)) \r\n        console.log(response)\r\n    }\r\n\r\n\r\n    async function fetchData(){\r\n        const res = await fetch('/accounts/dashboard');\r\n        res.json()\r\n        .then(res => {\r\n            setAccountName(res[0].name)\r\n            setSupportEmail(res[0].supportEmail)\r\n            setImageURL(res[0].branding.logoUrl)\r\n            setFailedPayments(res[0].settings.payments.failedPaymentOption)\r\n            setDescription(res[0].description)\r\n            setbgUrl(res[0].backgroundUrl)\r\n            setLoaded(true)\r\n        })\r\n        .catch(err =>  {\r\n        });\r\n        \r\n    }\r\n\r\n    useEffect(() =>{\r\n        const abortController = new AbortController();\r\n        localStorage.setItem('pswd',window.location.search.split('?password=')[1])\r\n        fetchData()\r\n\r\n        return () => {\r\n            abortController.abort();\r\n        };\r\n\r\n    }, [])\r\n\r\n\r\n        return (\r\n            <>\r\n                \r\n                <AdminNavigation />\r\n                {\r\n                loaded ? \r\n                <div className=\"flex flex-col w-0 flex-1 overflow-hidden\">\r\n                <AdminSearchbar />\r\n                <main className=\"flex-1 relative overflow-y-auto focus:outline-none\">\r\n                <div className=\"py-6\">\r\n\r\n                    <div className=\"max-w-7xl mx-auto px-4 sm:px-6 md:px-8\"></div>\r\n                    \r\n                    <div className=\"mx-auto px-4 sm:px-6 md:px-8 w-full\">\r\n                    \r\n                        <section aria-labelledby=\"section1\">\r\n\r\n                            <div className=\"shadow-lg sm:rounded-md sm:overflow-hidden mt-8 shadow-lg lg:w-3/4 md:3/4 sm:w-full\">\r\n                                <div className=\"bg-white py-4 px-4 sm:p-6 dark:bg-darkOther-200\">\r\n                                    <div>\r\n                                        <h1 className=\"text-lg font-medium text-other-300 dark:text-white select-none\">General Settings</h1>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <form onSubmit={accountHandle}> \r\n                            <div className=\"shadow-lg sm:rounded-md sm:overflow-hidden mt-3 lg:w-3/4 md:3/4 sm:w-full\">\r\n                                <div className=\"bg-white py-4 px-4 sm:p-6 dark:bg-darkOther-200\">\r\n                                        <div>\r\n                                            <label for=\"accountName\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-400 select-none\">Account Name</label>\r\n                                            <div className=\"mt-1\">\r\n                                                <input type=\"text\" defaultValue={accountName} onChange={e => setAccountName(e.target.value)} autoComplete=\"off\" className=\"dark:text-other-100 dark:bg-darkOther-100 shadow-sm focus:ring-other-200 focus:border-other-200 block w-1/2 text-md border-gray-300 rounded-md py-2 dark:focus:ring-darkOther-200 dark:focus:border-darkOther-200\" placeholder=\"Cook Group\" aria-describedby=\"email-description\" />\r\n                                            </div>\r\n\r\n                                            <p className=\"mt-2 text-sm text-gray-500 select-none\" id=\"accountName-description\">This account name will be displayed on the Dashboard & in email receipts</p>\r\n                                        </div>\r\n\r\n                                        <div className=\"text-right\">\r\n                                            <button type=\"submit\" className=\"text-other-200 text-sm font-medium bg-gray-200 rounded-lg py-2 px-8 text-right dark:bg-darkOther-100 dark:text-other-100\">Save</button>\r\n                                        </div>\r\n                                </div>\r\n                            </div>\r\n                            </form>\r\n\r\n                            {/* <div className=\"shadow sm:rounded-md sm:overflow-hidden mt-3 lg:w-3/4 md:3/4 sm:w-full\">\r\n                                <div className=\"bg-white py-4 px-4 sm:p-6 dark:bg-darkOther-200\">\r\n                                    <div>\r\n                                        <label for=\"domain\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-400 select-none\">Dashboard Domain</label>\r\n                                        <div className=\"mt-1\">\r\n                                        <input type=\"text\" name=\"domain\" id=\"domain\" className=\"dark:text-other-100 dark:bg-darkOther-100 shadow-sm focus:ring-other-200 focus:border-other-200 dark:focus:ring-darkOther-200 dark:focus:border-darkOther-200 block w-1/2 text-md border-gray-300 rounded-md py-2\" placeholder=\"www.cookgroup.com\" aria-describedby=\"domain-description\" />\r\n                                        </div>\r\n                                        <p className=\"mt-2 text-sm text-gray-500 select-none\" id=\"accountName-description\">Don't include the https://</p>\r\n                                    </div>\r\n\r\n                                    <div className=\"text-right\">\r\n                                        <button className=\"text-other-200 text-sm font-medium bg-gray-200 rounded-lg py-2 px-8 text-right dark:bg-darkOther-100 dark:text-other-100\">Save</button>\r\n                                    </div>\r\n\r\n                                </div>\r\n                            </div> */}\r\n\r\n                            <form onSubmit={supportHandle}> \r\n                            <div className=\"shadow-lg sm:rounded-md sm:overflow-hidden mt-3 lg:w-3/4 md:3/4 sm:w-full\">\r\n                                <div className=\"bg-white py-4 px-4 sm:p-6 dark:bg-darkOther-200\">\r\n                                    <div>\r\n                                        <label for=\"supportEmail\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-400 select-none\">Support email</label>\r\n                                        <div className=\"mt-1\">\r\n                                            <input type=\"text\" defaultValue={supportEmail} onChange={e => setSupportEmail(e.target.value)} className=\"dark:text-other-100 dark:bg-darkOther-100 shadow-sm focus:ring-other-200 focus:border-other-200 dark:focus:ring-darkOther-200 dark:focus:border-darkOther-200 block w-1/2 text-md border-gray-300 rounded-md py-2\" placeholder=\"help@cookgroup.com\" aria-describedby=\"supportEmail-description\" />\r\n                                        </div>\r\n                                        <p className=\"mt-2 text-sm text-gray-500 select-none\" id=\"supportEmail-description\">This will be displayed to all your users if they require assistance</p>\r\n                                    </div>\r\n\r\n                                    <div className=\"text-right\">\r\n                                        <button type=\"submit\" className=\"text-other-200 text-sm font-medium bg-gray-200 rounded-lg py-2 px-8 text-right dark:bg-darkOther-100 dark:text-other-100\">Save</button>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            </form>\r\n                            \r\n                        </section>\r\n\r\n                        <section aria-labelledby=\"section2\">\r\n                            <div className=\"shadow-lg sm:rounded-md sm:overflow-hidden mt-8 shadow-lg lg:w-3/4 md:3/4 sm:w-full\">\r\n                                <div className=\"bg-white py-4 px-4 sm:p-6 dark:bg-darkOther-200\">\r\n                                    <div>\r\n                                        <h1 className=\"text-lg font-medium text-other-300 dark:text-white select-none\">Branding Settings</h1>\r\n                                    </div>\r\n                                    </div>\r\n                            </div>\r\n\r\n                            <form onSubmit={logoHandle}> \r\n                            <div className=\"shadow-lg sm:rounded-md sm:overflow-hidden mt-3 lg:w-3/4 md:3/4 sm:w-full\">\r\n                                <div className=\"bg-white py-4 px-4 sm:p-6 dark:bg-darkOther-200\">\r\n                                    <div>\r\n                                        <label for=\"logo\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-400 select-none\">Logo</label>\r\n                                        <div className=\"mt-1\">\r\n                                        <input type=\"text\" defaultValue={imageURL} onChange={e => setImageURL(e.target.value)} className=\"dark:text-other-100 dark:bg-darkOther-100 shadow-sm focus:ring-other-200 focus:border-other-200 dark:focus:ring-darkOther-200 dark:focus:border-darkOther-200 block w-1/2 text-md border-gray-300 rounded-md py-2\" placeholder=\"hhttps://i.imgur.com/z78zpi3.png\" aria-describedby=\"logo-description\" />\r\n                                        </div>\r\n                                        <p className=\"mt-2 text-sm text-gray-500 select-none\" id=\"logo-description\">Enter an image URL here</p>\r\n                                    </div>\r\n                                    <div className=\"text-right\">\r\n                                        <button type=\"submit\" className=\"text-other-200 text-sm font-medium bg-gray-200 rounded-lg py-2 px-8 text-right dark:bg-darkOther-100 dark:text-other-100\">Save</button>\r\n                                    </div>\r\n\r\n                                </div>\r\n                            </div>\r\n                            </form>\r\n\r\n                            <form onSubmit={bgHandle}> \r\n                            <div className=\"shadow-lg sm:rounded-md sm:overflow-hidden mt-3 lg:w-3/4 md:3/4 sm:w-full\">\r\n                                <div className=\"bg-white py-4 px-4 sm:p-6 dark:bg-darkOther-200\">\r\n                                    <div>\r\n                                        <label for=\"logo\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-400 select-none\">Dashboard Background</label>\r\n                                        <div className=\"mt-1\">\r\n                                        <input type=\"text\" defaultValue={bgURL} onChange={e => setbgUrl(e.target.value)} className=\"dark:text-other-100 dark:bg-darkOther-100 shadow-sm focus:ring-other-200 focus:border-other-200 dark:focus:ring-darkOther-200 dark:focus:border-darkOther-200 block w-1/2 text-md border-gray-300 rounded-md py-2\" placeholder=\"https://i.imgur.com/z78zpi3.png\" aria-describedby=\"bg-description\" />\r\n                                        </div>\r\n                                        <p className=\"mt-2 text-sm text-gray-500 select-none\" id=\"logo-description\">Enter an image URL here</p>\r\n                                    </div>\r\n                                    <div className=\"text-right\">\r\n                                        <button type=\"submit\" className=\"text-other-200 text-sm font-medium bg-gray-200 rounded-lg py-2 px-8 text-right dark:bg-darkOther-100 dark:text-other-100\">Save</button>\r\n                                    </div>\r\n\r\n                                </div>\r\n                            </div>\r\n                            </form>\r\n\r\n                            <form onSubmit={descriptionHandle}> \r\n                            <div className=\"shadow-lg sm:rounded-md sm:overflow-hidden mt-3 lg:w-3/4 md:3/4 sm:w-full\">\r\n                                <div className=\"bg-white py-4 px-4 sm:p-6 dark:bg-darkOther-200\">\r\n                                    <div>\r\n                                        <label for=\"logo\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-400 select-none\">Description</label>\r\n                                        <div className=\"mt-1\">\r\n                                        <input type=\"text\" defaultValue={description} onChange={e => setDescription(e.target.value)} className=\"dark:text-other-100 dark:bg-darkOther-100 shadow-sm focus:ring-other-200 focus:border-other-200 dark:focus:ring-darkOther-200 dark:focus:border-darkOther-200 block w-1/2 text-md border-gray-300 rounded-md py-2\" placeholder=\"\" aria-describedby=\"bg-description\" />\r\n                                        </div>\r\n                                        <p className=\"mt-2 text-sm text-gray-500 select-none\" id=\"logo-description\">A brief description or moto. Will be displayed on the home page and in receipts.</p>\r\n                                    </div>\r\n                                    <div className=\"text-right\">\r\n                                        <button type=\"submit\" className=\"text-other-200 text-sm font-medium bg-gray-200 rounded-lg py-2 px-8 text-right dark:bg-darkOther-100 dark:text-other-100\">Save</button>\r\n                                    </div>\r\n\r\n                                </div>\r\n                            </div>\r\n                            </form>\r\n                        </section>\r\n\r\n\r\n                        <section aria-labelledby=\"section3\">\r\n                            <div className=\"shadow-lg sm:rounded-md sm:overflow-hidden mt-8 shadow-lg lg:w-3/4 md:3/4 sm:w-full\">\r\n                                <div className=\"bg-white py-4 px-4 sm:p-6 dark:bg-darkOther-200\">\r\n                                    <div>\r\n                                        <h1 className=\"text-lg font-medium text-other-300  dark:text-white select-none\">Stripe Settings</h1>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"shadow-lg sm:rounded-md sm:overflow-hidden mt-3 lg:w-3/4 md:3/4 sm:w-full\">\r\n                                <div className=\"bg-white py-4 px-4 sm:p-6 dark:bg-darkOther-200\">\r\n                                    <div>\r\n                                        <label for=\"failePayments\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-400 select-none\">Setup Stripe Intergation</label>\r\n                                        <div className=\"mt-1\">\r\n                                            <button disabled className=\"bg-other-200 dark:bg-darkOther-100 rounded-sm w-24 h-10 text-white text-md font-medium px-6 hover:bg-other-300\">\r\n                                                <FaStripe className=\"h-10 w-12\"/>\r\n                                            </button>\r\n                                        </div>\r\n                                        <p className=\"mt-2 text-sm text-gray-500 select-none\" id=\"failePayments-description \">Strip account already linked to Dashboard.</p>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <form onSubmit={failedPaymentHandle}> \r\n                            <div className=\"shadow-lg sm:rounded-md sm:overflow-hidden mt-3 lg:w-3/4 md:3/4 sm:w-full mb-12\">\r\n                                <div className=\"bg-white py-4 px-4 sm:p-6 dark:bg-darkOther-200\">\r\n                                    <div>\r\n                                        <label for=\"failePayments\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-400 select-none\">Manage Failed Payments</label>\r\n                                        <div className=\"mt-1\">\r\n                                            <Select defaultValue={failedPaymentOptions[3]} id=\"type\" value={failedPayment} name=\"intervalType\" options={failedPaymentOptions} placeholder=\"Failed Payment\" \r\n                                            className=\"py-5 text-gray-800 font-medium focus:ring-other-200 focus:border-other-200 dark:focus:ring-darkOther-200 dark:focus:border-darkOther-200 dark:text-white relative block w-1/2 rounded-none rounded-t-md bg-transparent focus:z-10 sm:text-sm border-gray-300\"\r\n                                            onChange={e => setFailedPayments(e.value)} value={failedPaymentOptions.filter(function(failedPaymentOptions) {return failedPaymentOptions.value === failedPayment})}/>\r\n                                        </div>\r\n                                        <p className=\"mt-2 text-sm text-gray-500 select-none\" id=\"failePayments-description\">Select how you want to deal with failed payments from users</p>\r\n                                    </div>\r\n                                    <div className=\"text-right\" >\r\n                                        <button type=\"submit\" className=\"text-other-200 text-sm font-medium bg-gray-200 rounded-lg py-2 px-8 text-right dark:bg-darkOther-100 dark:text-other-100\">Save</button>\r\n                                    </div>\r\n\r\n                                </div>\r\n                            </div>\r\n                            </form>\r\n                        \r\n                        </section>\r\n\r\n                        \r\n\r\n                    </div>\r\n\r\n                </div>\r\n                </main>\r\n                </div> : \r\n                \r\n                <div className=\"m-auto\">\r\n                        \r\n                    <BounceLoader color={'#302f2f'} loading={true} size={25} />\r\n                        \r\n                    </div> \r\n                }\r\n            \r\n            </>\r\n        )\r\n\r\n}\r\n\r\nexport default Settings","E:\\dashboard-react\\src\\components\\home\\planTable.js",["170"],"import '../../static/styles/main.css'; \r\nimport React, { useState, useEffect } from 'react';\r\nimport currencyToSymbolMap from 'currency-symbol-map/map'\r\nimport PlanEditModal from './planEditModal'\r\n\r\nimport { AiOutlineDelete, AiOutlineEdit } from 'react-icons/ai';\r\nimport { BsThreeDots } from 'react-icons/bs';\r\nimport SquareLoader from \"react-spinners/SquareLoader\";\r\n\r\nconst PlanTable = () => {\r\n\r\n    const [plans, setPlans] = useState([])\r\n    const [loaded, setLoaded] = useState(false)\r\n\r\n    async function fetchPlans(){\r\n        const res = await fetch('/plans');\r\n        res.json()\r\n        .then(res => {\r\n            setPlans(res)\r\n            setLoaded(true)\r\n        })\r\n        .catch(err =>  fetchPlans());\r\n        \r\n    }\r\n\r\n\r\n    useEffect(() =>{\r\n        var abortController = new AbortController();\r\n        fetchPlans()\r\n\r\n\r\n        setInterval(() => {\r\n            abortController = new AbortController();\r\n            fetchPlans()\r\n\r\n        }, 5000);\r\n\r\n\r\n        return () => {\r\n            abortController.abort();\r\n        };\r\n\r\n    }, [])\r\n\r\n\r\n\r\n    const deletePlan =  async (id) => {\r\n        await fetch('/plans/delete/' + id)\r\n\r\n    }\r\n\r\n\r\n    const renderTableRows = () => {\r\n        return plans.map(plan => {\r\n            return (\r\n                <tr key={plan.id}>\r\n\r\n                    <td className=\"px-6 py-3 max-w-0 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-white dark:bg-darkOther-200\">\r\n                        <div className=\"flex items-center lg:pl-2\">\r\n                            {/* <div className=\"flex-shrink-0 w-2.5 h-2.5 rounded-full bg-pink-600\" aria-hidden=\"true\"></div> */}\r\n                            {plan.planName}\r\n                        </div>\r\n                    </td>\r\n\r\n                    <td className=\"px-6 py-3 text-sm text-gray-800 dark:text-white font-medium dark:bg-darkOther-200\">\r\n                        <div className=\"flex items-center space-x-2\">\r\n                            <span className=\"flex-shrink-0 text-xs leading-5 font-medium\"> {currencyToSymbolMap[plan.currency]}{plan.price} / {plan.interval || ''}  {plan.intervalType || plan.type}</span>\r\n                        </div>\r\n                    </td>\r\n\r\n\r\n\r\n                    <td className=\"pr-6 dark:bg-darkOther-200 dark:text-white\">\r\n                        <div className=\"relative flex justify-end items-center\">\r\n                        <button id={`${plan.id}-plans-dropdown-button-hide`} name=\"plans-options-dropdown\" aria-haspopup=\"true\" type=\"button\" aria-expanded=\"true\" className=\"dark:text-white w-8 h-8 inline-flex items-center justify-center text-gray-800 rounded-full hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500\"  onClick={() => {\r\n                            document.querySelector('#plans-options-dropdown-' + plan.id).classList.contains('hidden') ? document.querySelector('#plans-options-dropdown-' + plan.id).classList.remove('hidden') : document.querySelector('#plans-options-dropdown-' + plan.id).classList.add('hidden')\r\n                        }}>\r\n                            <BsThreeDots className=\"h-4 w-4\" id={`${plan.id}-icon-hide`} />\r\n                        </button>\r\n\r\n                        <div id={`plans-options-dropdown-${plan.id}`} type=\"button\" className=\"dark:bg-darkOther-200 hidden mx-3 mr-10 origin-top-right absolute right-7 top-0 w-48 mt-1 rounded-md shadow-lg z-10 bg-white ring-1 ring-black ring-opacity-5\" role=\"menu\" aria-orientation=\"vertical\" aria-labelledby=\"project-options-menu-0\">\r\n                            <div className=\"py-1\" role=\"none\">\r\n                            <button  id={`plans-edit-${plan.id}`} className=\"group flex items-center px-4 w-full py-2 text-sm text-gray-700 hover:bg-gray-100 hover:text-gray-900 dark:hover:bg-darkOther-300 dark:text-white\" role=\"menuitem\" onClick={() => {\r\n                            document.querySelector(`#plan-modal-edit-${plan.id}`).classList.contains('hidden') ? document.querySelector(`#plan-modal-edit-${plan.id}`).classList.remove('hidden') : document.querySelector(`#plan-modal-edit-${plan.id}`).classList.add('hidden')\r\n                            \r\n                            }}>\r\n                            <AiOutlineEdit className=\"mr-3 h-5 w-5 text-gray-400 group-hover:text-gray-500\" />\r\n                                Edit\r\n                            </button>\r\n                            <button id={`plans-delete-${plan.id}`} type=\"button\" className=\"group flex w-full items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 hover:text-gray-900 dark:hover:bg-darkOther-300 dark:text-white\" role=\"menuitem\" onClick={() => deletePlan(plan.id)}>\r\n                                <AiOutlineDelete className=\"mr-3 h-5 w-5 text-gray-400 group-hover:text-gray-500\" onClick={() => deletePlan(plan.id)}/>\r\n                                Delete\r\n                            </button>\r\n                            </div>\r\n                        </div>\r\n                        </div>\r\n                    </td>\r\n\r\n                    <PlanEditModal {...plan}/>\r\n\r\n                    \r\n\r\n                </tr>\r\n            )\r\n            \r\n        })\r\n    }\r\n    \r\n\r\n\r\n\r\n    return (\r\n\r\n            <table className=\"bg-white w-full overflow-y-auto mt-2 rounded-md\" id=\"table\">\r\n\r\n                <thead className=\"bg-gray-200 rounded-md dark:bg-darkOther-100\">\r\n\r\n                    <tr className=\"border-gray-200\">\r\n\r\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider select-none\">\r\n                        <span className=\"lg:pl-2 \"> Plan</span>\r\n                        </th>\r\n\r\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider select-none\">\r\n                            Interval\r\n                        </th>\r\n\r\n\r\n\r\n                        <th className=\"md:table-cell px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider select-none\">\r\n                            Options\r\n                        </th>\r\n\r\n                    </tr>\r\n\r\n                </thead>\r\n                \r\n                <tbody className=\"bg-white divide-y divide-gray-200 dark:divide-gray-500 w-full\">\r\n                    {loaded ? renderTableRows() : \r\n                        <tr>\r\n\r\n                            <td className=\"px-6 py-3 max-w-0 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-white dark:bg-darkOther-200\">\r\n                                <div className=\"flex items-center lg:pl-2\">\r\n                                    <SquareLoader color={'#302f2f'} loading={true} size={25} />\r\n                                </div>\r\n                            </td>\r\n\r\n                            <td className=\"px-6 py-3 text-sm text-gray-800 dark:text-white font-medium dark:bg-darkOther-200\">\r\n                                <div className=\"flex items-center space-x-2\">\r\n                                    <span className=\"flex-shrink-0 text-xs leading-5 font-medium\"> <SquareLoader color={'#302f2f'} loading={true} size={25} /> </span>\r\n                                </div>\r\n                            </td>\r\n\r\n\r\n\r\n                            <td className=\"pr-6 dark:bg-darkOther-200 dark:text-white\">\r\n                                <div className=\"relative flex justify-end items-center\">\r\n                                <SquareLoader color={'#302f2f'} loading={true} size={25} />\r\n\r\n                                </div>\r\n                            </td>\r\n\r\n\r\n                        </tr>\r\n                    }\r\n                </tbody>\r\n                \r\n            </table>\r\n\r\n    )\r\n\r\n\r\n}\r\nexport default PlanTable","E:\\dashboard-react\\src\\components\\home\\restockTable.js",["171"],"import '../../static/styles/main.css'; \r\nimport React, { useState, useEffect } from 'react';\r\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\r\nimport ProgressBar from \"@ramonak/react-progress-bar\";\r\n\r\n\r\nimport { AiOutlineDelete, AiOutlineCopy } from 'react-icons/ai';\r\nimport { BsThreeDots } from 'react-icons/bs';\r\nimport SquareLoader from \"react-spinners/SquareLoader\";\r\n\r\n\r\nconst RestockTable = () => {\r\n    const [restocks, setRestocks] = useState([])\r\n    const [loaded, setLoaded] = useState(false)\r\n\r\n    async function fetchRestocks(){\r\n        const res = await fetch('/restocks');\r\n        res.json()\r\n        .then(res => {\r\n            setRestocks(res)\r\n            setLoaded(true)\r\n        })\r\n        .catch(err =>  fetchRestocks());\r\n        \r\n    }\r\n\r\n    useEffect(() =>{\r\n        var abortController = new AbortController();\r\n        fetchRestocks()\r\n        \r\n\r\n        setInterval(() => {\r\n            abortController = new AbortController();\r\n            fetchRestocks()\r\n        }, 5000);\r\n\r\n\r\n        return () => {\r\n            abortController.abort();\r\n        };\r\n\r\n    }, [])\r\n\r\n    const deleteRestock = async (id) => {\r\n        var response = await fetch('/restocks/delete/' + id, {\r\n            method:'get',\r\n            headers: {\r\n                authorization:1\r\n            }\r\n        })\r\n        if(response.ok) {\r\n            return\r\n        }else{\r\n            return\r\n        }\r\n    }\r\n\r\n\r\n    const renderTableRows = () => {\r\n        return restocks.map(restock => {\r\n            return (\r\n                <tr key={restock.id}>\r\n\r\n                    <td className=\"px-6 py-3 max-w-0 whitespace-nowrap text-sm font-medium text-gray-900 dark:bg-darkOther-200 dark:text-white\">\r\n                        <div className=\"flex items-center lg:pl-2\">\r\n                            {/* <div className=\"flex-shrink-0 w-2.5 h-2.5 rounded-full bg-pink-600\" aria-hidden=\"true\"></div> */}\r\n                            {restock.planName}\r\n                        </div>\r\n                    </td>\r\n\r\n                    <td className=\"px-6 py-3 text-sm text-gray-800 font-medium dark:bg-darkOther-200 dark:text-white\">\r\n                        <div className=\"flex items-center space-x-2\">\r\n\r\n                        <span className=\"flex-shrink-0 text-xs leading-5 font-medium w-full\"><ProgressBar bgcolor='#3B82F6' completed={(100 * restock.stockRemaining) / restock.stock} /></span>\r\n                        </div>\r\n                    </td>\r\n\r\n                    <td className=\"pr-6 dark:bg-darkOther-200 dark:text-white\">\r\n                        <div className=\"relative flex justify-end items-center\">\r\n                            <button id=\"restock-options-button-hide\" name=\"restock-options-dropdown\" aria-haspopup=\"true\" type=\"button\" aria-expanded=\"true\" className=\"w-8 h-8 inline-flex items-center justify-center text-gray-800 rounded-full hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500 dark:text-white\" onClick={() => {\r\n                                document.querySelector('#restock-options-dropdown-' + restock.id).classList.contains('hidden') ? document.querySelector('#restock-options-dropdown-' + restock.id).classList.remove('hidden') : document.querySelector('#restock-options-dropdown-'  + restock.id).classList.add('hidden')\r\n                            }}>\r\n                            <BsThreeDots className=\"h-4 w-4\" id='hide'/>\r\n                            </button>\r\n\r\n                            <div id={\"restock-options-dropdown-\" + restock.id} className=\"dark:bg-darkOther-200 hidden mx-3 mr-10 origin-top-right absolute right-7 top-0 w-48 mt-1 rounded-md shadow-lg z-10 bg-white ring-1 ring-black ring-opacity-5\" role=\"menu\" aria-orientation=\"vertical\" aria-labelledby=\"project-options-menu-0\">\r\n                                <div className=\"py-1\" role=\"none\">\r\n                                    <CopyToClipboard href=\"#\" className=\"group flex w-full items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 hover:text-gray-900 dark:hover:bg-darkOther-300 dark:text-white\" role=\"menuitem\" text={`${window.location.origin}/purchase?password=${restock.password}`} onCopy={() => {\r\n                                    document.querySelector('#copy-hide-' + restock.id).classList.add('text-green-500')\r\n                                    setTimeout(() => {\r\n                                        document.querySelector('#copy-hide-' + restock.id).classList.remove(['text-green-500'])\r\n                                    }, 1500);\r\n                                    }}>\r\n                                    <button className=\"w-full\" type='button' id={\"restock-options-dropdown-copy-\" + restock.id}>\r\n                                        <AiOutlineCopy className=\"mr-3 h-5 w-5 text-gray-400 group-hover:text-gray-500\" id={'copy-hide-'+ restock.id}/>\r\n                                        Copy Restock\r\n                                    </button>\r\n                                    </CopyToClipboard>\r\n\r\n                                    <button type='button' className=\"group flex w-full items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 hover:text-gray-900 dark:hover:bg-darkOther-300 dark:text-white\" role=\"menuitem\" onClick={() => deleteRestock(restock.id)} >\r\n                                        <AiOutlineDelete className=\"mr-3 h-5 w-5 text-gray-400 group-hover:text-gray-500\" onClick={() => deleteRestock(restock.id)}/>\r\n                                        Delete\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n\r\n                        </div>\r\n                    \r\n                    </td>\r\n\r\n                </tr>\r\n            )\r\n            \r\n        })\r\n    }\r\n\r\n\r\n\r\n    return (\r\n\r\n            <table className=\"bg-white w-full overflow-y-auto mt-2 rounded-md\" id='table'>\r\n\r\n                <thead className=\"bg-gray-200 rounded-md dark:bg-darkOther-100\">\r\n                    <tr className=\"border-gray-200\">\r\n\r\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider select-none\">\r\n                            <span className=\"lg:pl-2\">Plan</span>\r\n                        </th>\r\n\r\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-widerr select-none\">\r\n                            Stock\r\n                        </th>\r\n\r\n                        <th className=\"md:table-cell px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider select-none\">\r\n                            Options\r\n                        </th>\r\n\r\n                    </tr>\r\n                </thead>\r\n                \r\n                <tbody className=\"bg-white divide-y divide-gray-200 dark:divide-gray-500 w-full\">\r\n                {loaded ? renderTableRows() : \r\n\r\n                <tr>\r\n\r\n                <td className=\"px-6 py-3 max-w-0 whitespace-nowrap text-sm font-medium text-gray-900 dark:bg-darkOther-200 dark:text-white\">\r\n                    <div className=\"flex items-center lg:pl-2\">\r\n                    <SquareLoader color={'#302f2f'} loading={true} size={25} />\r\n                    </div>\r\n                </td>\r\n\r\n                <td className=\"px-6 py-3 text-sm text-gray-800 font-medium dark:bg-darkOther-200 dark:text-white\">\r\n                    <div className=\"flex items-center space-x-2\">\r\n\r\n                    <span className=\"flex-shrink-0 text-xs leading-5 font-medium w-full\"><SquareLoader color={'#302f2f'} loading={true} size={25} /></span>\r\n                    </div>\r\n                </td>\r\n\r\n                <td className=\"pr-6 dark:bg-darkOther-200 dark:text-white\">\r\n                    <div className=\"relative flex justify-end items-center\">\r\n                    <SquareLoader color={'#302f2f'} loading={true} size={25} />\r\n\r\n                    </div>\r\n\r\n                </td>\r\n\r\n                </tr>\r\n                \r\n                }\r\n                </tbody>\r\n                \r\n            </table>\r\n\r\n    )\r\n\r\n\r\n}\r\nexport default RestockTable","E:\\dashboard-react\\src\\components\\siteHomePage\\home.js",["172","173","174"],"import '../../static/styles/main.css'; \r\nimport React, { useState, useEffect } from 'react';\r\n\r\n\r\nconst Settings = () => {\r\n    const [name, setName] = useState(\"\")\r\n    const [logo, setLogo] = useState(\"\")\r\n    const [description, setDescription] = useState(\"\")\r\n    const [loaded, setLoaded] = useState(false)\r\n    \r\n    async function fetchData(){\r\n        const res = await fetch('/accounts/dashboard');\r\n        res.json()\r\n        .then(res => {\r\n            setName(res[0].name)\r\n            setLogo(res[0].branding.logoUrl)\r\n            setDescription(res[0].description)\r\n            setLoaded(true)\r\n        })\r\n        .catch(err =>  {\r\n            fetchData()\r\n        });\r\n        \r\n    }\r\n\r\n    useEffect(() =>{\r\n        const abortController = new AbortController();\r\n        localStorage.setItem('pswd',window.location.search.split('?password=')[1])\r\n        fetchData()\r\n\r\n        return () => {\r\n            abortController.abort();\r\n        };\r\n\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <>\r\n\r\n            <div className=\"w-full bg-gray-50\">\r\n            <div className=\"w-full bg-white shadow\">\r\n                <div className=\"max-w-7xl mx-auto px-4 sm:px-6\">\r\n                <div className=\"flex justify-between items-center py-6 md:justify-start md:space-x-10\">\r\n                    <div className=\"flex justify-start lg:w-0 lg:flex-1\">\r\n                    <a href=\"#\">\r\n                        <span className=\"sr-only\">Workflow</span>\r\n                        <img className=\"h-8 w-auto sm:h-10\" src=\"https://tailwindui.com/img/logos/workflow-mark-other-200.svg\" alt=\"\" />\r\n                    </a>\r\n                    </div>\r\n                    <div className=\"-mr-2 -my-2 md:hidden\">\r\n                    <button type=\"button\" className=\"bg-white rounded-md p-2 inline-flex items-center justify-center text-gray-400 hover:text-gray-500 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-indigo-500\">\r\n                        <span className=\"sr-only\">Open menu</span>\r\n    \r\n                        <svg className=\"h-6 w-6\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" aria-hidden=\"true\">\r\n                        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M4 6h16M4 12h16M4 18h16\" />\r\n                        </svg>\r\n                    </button>\r\n                    </div>\r\n\r\n                </div>\r\n                </div>\r\n\r\n\r\n            \r\n            </div>\r\n\r\n            <main className=\"lg:relative\">\r\n                <div className=\"mx-auto max-w-7xl w-full pt-16 pb-20 text-center lg:py-48 lg:text-left\">\r\n                <div className=\"px-4 lg:w-1/2 sm:px-8 xl:pr-16\">\r\n                    <h1 className=\"text-4xl tracking-tight font-extrabold text-gray-900 sm:text-5xl md:text-6xl lg:text-5xl xl:text-6xl\">\r\n                    <span className=\"block xl:inline select-none\">welcome to</span>\r\n                    <span className=\"block text-other-900 dark:text-darkOther-200 xl:inline select-none\"> {loaded ? name : \"Placeholder\"}</span>\r\n                    </h1>\r\n                    <p className=\"mt-3 max-w-md mx-auto text-lg text-gray-500 sm:text-xl md:mt-5 md:max-w-3xl select-none\">\r\n                    {loaded ? description : \"...\"}\r\n                    </p>\r\n                    <div className=\"mt-10 sm:flex sm:justify-center lg:justify-start\">\r\n                    <div className=\"rounded-md shadow\">\r\n                        <a href={'http://127.0.0.1:4000' + '/discord/oauth'} className=\"select-none dark:bg-darkOther-200 dark:hover:bg-darkOther-300 w-full flex items-center justify-center px-8 py-3 border border-transparent text-base font-medium rounded-md text-white bg-other-900 md:py-4 md:text-lg md:px-10\">\r\n                        Dashboard\r\n                        </a>\r\n                    </div>\r\n                    <div className=\"mt-3 rounded-md shadow sm:mt-0 sm:ml-3\">\r\n                        <a href=\"/purchase\" className=\"select-none w-full flex items-center justify-center px-8 py-3 border border-transparent text-base font-medium rounded-md text-other-200 dark:text-darkOther-200 bg-white hover:bg-gray-50 md:py-4 md:text-lg md:px-10\">\r\n                        Purchase\r\n                        </a>\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n                </div>\r\n                <div className=\"relative w-full h-64 sm:h-72 md:h-96 lg:absolute lg:inset-y-0 lg:right-0 lg:w-1/2 lg:h-full\">\r\n                <img className=\"absolute inset-0 px-24 m-auto\" src={logo} alt=\"\" />\r\n                </div>\r\n            </main>\r\n            </div>\r\n\r\n        \r\n        </>\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default Settings","E:\\dashboard-react\\src\\components\\userDashboard\\dashboard.js",["175","176","177","178","179","180","181","182"],"import '../../static/styles/main.css'; \r\nimport React, { useState, useEffect } from 'react';\r\nimport  { useHistory  } from 'react-router-dom'\r\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\r\nimport { AiOutlineMail } from 'react-icons/ai';\r\nimport { BiCalendar, BiExit } from 'react-icons/bi'\r\nimport { FaUserCircle } from 'react-icons/fa'\r\nimport { IoKeyOutline, IoCardOutline } from 'react-icons/io5'\r\nimport UserNav from '../userNav'\r\n\r\nimport RenewModal from './renewModal'\r\n\r\nconst Dashboard = () => {\r\n    let history = useHistory()\r\n\r\n    const [loaded, setLoaded] = useState(false)\r\n    const [name, setName] = useState(\"\")\r\n    const [discrim, setDiscrim] = useState(\"\")\r\n    const [email, setEmail] = useState(\"\")\r\n    const [key, setKey] = useState(\"\")\r\n    const [joinDate, setJoinDate] = useState(\"\")\r\n    const [discordImage, setDiscordImage] = useState(\"\")\r\n    const [customerId, setCustomerId] = useState(\"\")\r\n    const [background, setBackground] = useState(\"\")\r\n    const [renewRequired, setRenewRequired] = useState(false)\r\n    async function fetchData(){\r\n        const res = await fetch('/discord/data');\r\n        res.json()\r\n        .then(res => {\r\n            if(res.key == 'n/a') {\r\n                history.push('/bind')\r\n            }\r\n            setRenewRequired(res.renewReq)\r\n            setEmail(res.email)\r\n            setKey(res.key)\r\n            var date = new Date(res.dateJoined * 1000)\r\n            var day = date.getDate();\r\n            var month = ['January','February','March','April','May','June','July','August','September','October','November','December'][date.getMonth()]\r\n            var year = date.getFullYear()\r\n            setJoinDate(`${month} ${day}, ${year}`)\r\n            setDiscordImage(res.discordImage)\r\n            setName(res.name)\r\n            setDiscrim(res.discrim)\r\n            setCustomerId(res.customerId)\r\n            if((res.bg == \"empty\" ) || (res.bg == undefined )  || (res.bg == null )) {\r\n                document.querySelector('#baseBackground').classList.add('bg-darkOther-300')\r\n                document.querySelector('#baseBackground').style = `background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='100' height='199' viewBox='0 0 100 199'%3E%3Cg fill='%23ffffff' fill-opacity='0.4'%3E%3Cpath d='M0 199V0h1v1.99L100 199h-1.12L1 4.22V199H0zM100 2h-.12l-1-2H100v2z'%3E%3C/path%3E%3C/g%3E%3C/svg%3E\");`\r\n                \r\n            } else {\r\n                document.querySelector('#baseBackground').style = `background-repeat: no-repeat; background-image: url('${res.bg}'); background-attachment: fixed; background-size: cover; background-size: 100% 100%;`\r\n            }\r\n\r\n            //setBackground(res.bg)\r\n            setLoaded(true)\r\n            \r\n        })\r\n        .catch(err =>  { \r\n            if(res.status == 403) history.push('/bind')\r\n        });\r\n        \r\n    }\r\n\r\n    useEffect(() =>{\r\n        const abortController = new AbortController();\r\n        fetchData()\r\n        //document.querySelector('#baseBackground').classList.remove('bg-other-100')\r\n\r\n\r\n\r\n        return () => {\r\n            abortController.abort();\r\n        };\r\n\r\n    }, [])\r\n\r\n    const unbind = async () => {\r\n        var response = await fetch('/users/unbind/' + key)\r\n\r\n        if(response.ok) {\r\n            history.push('/bind')\r\n        } else {\r\n            document.querySelector('#unbind').classList.remove('bg-other-900')\r\n            document.querySelector('#unbind').classList.add('bg-red-500')\r\n            setTimeout(() => {\r\n                document.querySelector('#unbind').classList.remove('bg-red-500')\r\n                document.querySelector('#unbind').classList.add('bg-other-900')\r\n            }, 1500);\r\n        }\r\n\r\n    }\r\n\r\n        return (\r\n            <>\r\n                <div className=\"flex flex-col w-0 flex-1 overflow-y-auto\">\r\n                <UserNav />\r\n                    <div className=\"m-auto\">\r\n\r\n                        <div class=\"bg-white overflow-hidden shadow rounded-lg divide-y divide-gray-200 opacity-95\">\r\n                            <div class=\"px-4 py-5 sm:px-6\">\r\n                                <h1 className=\"text-lg font-medium text-gray-700 select-none\">Dashboard</h1>\r\n                            </div>\r\n\r\n                            {renewRequired ?<RenewModal /> : <></>}\r\n                            \r\n                            {loaded ? <div class=\"px-4 py-5 sm:p-6\">\r\n\r\n                            <div className=\"grid grid-cols-1 rows-2\">\r\n                                <div className=\"\">\r\n\r\n                                    <div className=\"pl-3 flex items-center select-none\">\r\n\r\n                                        {discordImage ? <img src={discordImage} className=\"rounded-full h-16 w-auto text-other-200 font-medium\" alt=\"\"/> : <FaUserCircle className=\"h-14 w-auto text-other-200 font-medium\"/>}\r\n\r\n                                        <h1 className=\"font-medium text-gray-900 text-2xl ml-3 select-none\">{name}</h1>#<p className=\"font-normal text-other-200 text-md select-none\">{discrim}</p>\r\n\r\n                                    </div>\r\n\r\n\r\n                                    </div>\r\n\r\n                                    <div className=\"mt-1 relative rounded-md shadow-sm rounded-lg p-5\">\r\n\r\n                                        <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\r\n\r\n                                            <AiOutlineMail className=\"h-6 w-auto text-other-200 font-medium\"/>\r\n\r\n                                        </div>\r\n\r\n                                        <p  name=\"email\" id=\"email\" autoComplete=\"off\" className=\"focus:ring-other-200 focus:border-other-200 block w-full pl-10 sm:text-sm text-gray-900 rounded-md font-normal lg:text-lg\">{email}</p>\r\n\r\n                                    </div>\r\n\r\n                                    <div className=\"mt-1 relative rounded-md shadow-sm rounded-lg p-5\">\r\n\r\n                                        <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\r\n                                            \r\n                                            <IoKeyOutline className=\"h-6 w-auto text-other-200 font-medium\"/>\r\n\r\n                                        </div>\r\n\r\n                                        <CopyToClipboard text={key} onCopy={(e) => {\r\n                                            document.querySelector('#key').classList.add(['text-green-500'])\r\n                                            setTimeout(() => {\r\n                                                document.querySelector('#key').classList.remove(['text-green-500'])\r\n                                            }, 1500);\r\n                                        }}><p  name=\"key\" id=\"key\" autoComplete=\"off\" className=\"focus:ring-other-200 focus:border-other-200 block w-full pl-10 sm:text-sm text-gray-900 rounded-md font-normal lg:text-lg\">{key}</p></CopyToClipboard>\r\n                                      \r\n\r\n                                    </div>\r\n\r\n                                    <div className=\"mt-1 relative rounded-md shadow-sm rounded-lg p-5\">\r\n\r\n                                        <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\r\n                                            \r\n                                            <BiCalendar className=\"h-6 w-auto text-other-200 font-medium\"/>\r\n\r\n                                        </div>\r\n\r\n                                        <p  name=\"joined\" id=\"joined\" autoComplete=\"off\" className=\"focus:ring-other-200 focus:border-other-200 block w-full pl-10 sm:text-sm text-gray-900 rounded-md font-normal lg:text-lg select-none\"><span className=\"text-other-200 select-none\">Joined</span> {joinDate}</p>\r\n\r\n                                    </div>\r\n\r\n\r\n\r\n                                </div>\r\n\r\n                                <div className=\"grid grid-cols-2 gap-4 w-full\">\r\n                                    <div className=\"mt-2 relative rounded-md shadow-sm rounded-lg \">\r\n\r\n                                        <button  name=\"joined\" id=\"joined\" className=\"bg-other-900 p-3 block w-full sm:text-sm text-white rounded-md font-medium lg:text-lg\" onClick={() => unbind()} id=\"unbind\">\r\n                                            <div className=\"absolute inset-y-0 flex items-center pointer-events-none\">\r\n                                                \r\n                                                <BiExit className=\"h-4 w-auto text-white font-medium\"/>\r\n\r\n                                            </div>\r\n\r\n                                       Unbind</button>\r\n\r\n                                    </div>\r\n                                    <div className=\"mt-2 relative rounded-md shadow-sm rounded-lg\">\r\n\r\n                                        <form method=\"POST\" action='/stripe/customer-portal-sess'>\r\n\r\n                                            <button type=\"submit\" name=\"joined\" id=\"joined\" className=\"bg-other-900 p-3 block w-full sm:text-sm text-white rounded-md font-medium lg:text-lg\">\r\n                                                <input type=\"text\" name=\"customerId\" hidden value={customerId}/>\r\n                                            <div className=\"absolute inset-y-0 flex items-center pointer-events-none\">\r\n                                                \r\n                                                <IoCardOutline className=\"h-4 w-auto text-white font-medium\" />\r\n\r\n                                            </div>\r\n\r\n                                            Subscription</button>\r\n\r\n                                        </form>\r\n\r\n                                    </div>\r\n                                </div>\r\n\r\n                            </div> \r\n                    \r\n                                \r\n                            :   <div class=\"px-4 py-5 sm:p-6\">\r\n\r\n                                    <div className=\"mt-1 relative\">\r\n\r\n                                    <div className=\"pl-3 flex items-center\">\r\n\r\n                                        {discordImage ? <img src={discordImage} className=\"rounded-full h-16 w-auto text-other-200 font-medium\" alt=\"\"/> : <FaUserCircle className=\"h-14 w-auto text-other-200 font-medium\"/>}\r\n\r\n                                        <h1 className=\"font-medium text-gray-900 text-2xl ml-3\">Loading...</h1>\r\n\r\n                                    </div>\r\n\r\n\r\n                                    </div>\r\n\r\n                                    <div className=\"mt-1 relative rounded-md shadow-sm rounded-lg p-5\">\r\n\r\n                                        <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\r\n\r\n                                            <AiOutlineMail className=\"h-6 w-auto text-other-200 font-medium\"/>\r\n\r\n                                        </div>\r\n\r\n                                        <p  name=\"email\" id=\"email\" autoComplete=\"off\" className=\"focus:ring-other-200 focus:border-other-200 block w-full pl-10 sm:text-sm text-gray-900 rounded-md font-normal lg:text-lg\">loading...</p>\r\n\r\n                                    </div>\r\n\r\n                                    <div className=\"mt-1 relative rounded-md shadow-sm rounded-lg p-5\">\r\n\r\n                                        <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\r\n                                            \r\n                                            <IoKeyOutline className=\"h-6 w-auto text-other-200 font-medium\"/>\r\n\r\n                                        </div>\r\n\r\n                                        <p  name=\"key\" id=\"key\" autoComplete=\"off\" className=\"focus:ring-other-200 focus:border-other-200 block w-full pl-10 sm:text-sm text-gray-900 rounded-md font-normal lg:text-lg\">loading...</p>\r\n\r\n                                    </div>\r\n\r\n                                    <div className=\"mt-1 relative rounded-md shadow-sm rounded-lg p-5\">\r\n\r\n                                        <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\r\n                                            \r\n                                            <BiCalendar className=\"h-6 w-auto text-other-200 font-medium\"/>\r\n\r\n                                        </div>\r\n\r\n                                        <p  name=\"joined\" id=\"joined\" autoComplete=\"off\" className=\"focus:ring-other-200 focus:border-other-200 block w-full pl-10 sm:text-sm text-gray-900 rounded-md font-normal lg:text-lg\">Loading....</p>\r\n\r\n                                    </div>\r\n\r\n\r\n\r\n                                    </div>}\r\n\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                </div>\r\n\r\n\r\n            </>\r\n        );\r\n\r\n}\r\n\r\nexport default Dashboard;\r\n","E:\\dashboard-react\\src\\components\\bindPage\\bindPage.js",["183","184","185","186"],"import '../../static/styles/main.css'; \r\nimport React, { useState, useEffect } from 'react';\r\nimport UserNav from '../userNav'\r\nimport { IoKeyOutline } from 'react-icons/io5'\r\nimport { BiLogInCircle } from 'react-icons/bi'\r\nimport { FaUserCircle } from 'react-icons/fa'\r\nimport  { useHistory  } from 'react-router-dom'\r\n\r\nconst BindPage = () => {\r\n    let history = useHistory()\r\n    const [name, setName] = useState(\"\")\r\n    const [discrim, setDiscrim] = useState(\"\")\r\n    const [key, setKey] = useState(\"\")\r\n    const [discordImage, setDiscordImage] = useState(\"\")\r\n    const [loaded, setLoaded] = useState(false)\r\n\r\n    async function fetchData(){\r\n        const res = await fetch('/discord/data');\r\n        res.json()\r\n        .then(res => {\r\n            setDiscordImage(res.discordImage)\r\n            setName(res.name)\r\n            setDiscrim(res.discrim)\r\n            if((res.bg == \"empty\" ) || (res.bg == undefined )  || (res.bg == null )) {\r\n                document.querySelector('#baseBackground').classList.add('bg-darkOther-300')\r\n                document.querySelector('#baseBackground').style = `background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='100' height='199' viewBox='0 0 100 199'%3E%3Cg fill='%23ffffff' fill-opacity='0.4'%3E%3Cpath d='M0 199V0h1v1.99L100 199h-1.12L1 4.22V199H0zM100 2h-.12l-1-2H100v2z'%3E%3C/path%3E%3C/g%3E%3C/svg%3E\");`\r\n                \r\n            } else {\r\n                document.querySelector('#baseBackground').style = `background-repeat: no-repeat; background-image: url('${res.bg}'); background-attachment: fixed; background-size: cover; background-size: 100% 100%;`\r\n            }\r\n            setLoaded(true)\r\n        })\r\n        .catch(err =>  {\r\n            if(res.status == 403) history.push('/discord/oauth')\r\n        });\r\n        \r\n        \r\n    }\r\n\r\n    useEffect(() =>{\r\n        const abortController = new AbortController();\r\n        fetchData()\r\n\r\n\r\n        return () => {\r\n            abortController.abort();\r\n        };\r\n\r\n    }, [])\r\n\r\n    \r\n    const submitHandler = async (e) => {\r\n        e.preventDefault()\r\n\r\n        if(key.length > 0) {\r\n            var response = await fetch('/users/bind', {\r\n                method:'post',\r\n                body:JSON.stringify({\r\n                    key:key\r\n                }),\r\n                \"headers\": {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            })\r\n            if(response.ok) {\r\n                setKey(\"\")\r\n                history.push('/dashboard')\r\n\r\n            \r\n            }else{\r\n                return\r\n            }\r\n        }\r\n        else{\r\n            return;\r\n        }\r\n    }\r\n\r\n        return (\r\n            <>\r\n                {/* <UserNav /> */}\r\n                <div className=\"flex flex-col w-0 flex-1 overflow-y-auto\">\r\n                    <UserNav />\r\n                    <div className=\"m-auto\">\r\n\r\n                        <div class=\"bg-white overflow-hidden shadow rounded-lg divide-y divide-gray-200\">\r\n                            <div class=\"px-4 py-5 sm:px-6\">\r\n                                <h1 className=\"text-lg font-medium text-gray-700\">Bind License</h1>\r\n                            </div>\r\n                            <div class=\"px-4 py-5 sm:p-6\">\r\n\r\n                                {loaded ? <div className=\"mt-1 relative\">\r\n\r\n                                <div className=\"pl-3 flex items-center\">\r\n\r\n                                    {discordImage ? <img src={discordImage} className=\"rounded-full h-16 w-auto text-other-200 font-medium\" alt=\"\"/> : <FaUserCircle className=\"h-14 w-auto text-other-200 font-medium\"/>}\r\n\r\n                                    <h1 className=\"font-medium text-gray-900 text-2xl ml-3\">{name}</h1>#<p className=\"font-normal text-other-200 text-md\">{discrim}</p>\r\n\r\n                                </div>\r\n\r\n\r\n                                </div> : <div className=\"pl-3 flex items-center\">\r\n\r\n                                {discordImage ? <img src={discordImage} className=\"rounded-full h-16 w-auto text-other-200 font-medium\" alt=\"\"/> : <FaUserCircle className=\"h-14 w-auto text-other-200 font-medium\"/>}\r\n\r\n                                <h1 className=\"font-medium text-gray-900 text-2xl ml-3\">Loading...</h1>\r\n\r\n                                </div>\r\n\r\n                                }\r\n                                                                \r\n\r\n                                <div>\r\n                                    <form onSubmit={submitHandler}>\r\n                                    <div class=\"mt-1 flex rounded-md shadow-sm\">\r\n\r\n                                        <div class=\"relative flex items-stretch flex-grow focus-within:z-10\">\r\n                                            <div class=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\r\n                                                <IoKeyOutline className=\"h-5 w-5 text-gray-400\"/>\r\n                                            </div>\r\n\r\n                                        \r\n                                            <input value={key} onChange={e => setKey(e.target.value)} type=\"text\" name=\"key\" id=\"key\" autoComplete=\"off\" class=\"focus:ring-indigo-500 focus:border-indigo-500 block w-full rounded-none rounded-l-md pl-10 sm:text-sm border-gray-300\" placeholder=\"XXX-XXX-XXX-XXX-XXX\" />\r\n                                        </div>\r\n\r\n                                        <button type=\"submit\" class=\"-ml-px relative inline-flex items-center space-x-2 px-4 py-2 border border-gray-300 text-sm font-medium rounded-r-md text-gray-700 bg-gray-50 hover:bg-gray-100 focus:outline-none focus:ring-1 focus:ring-indigo-500 focus:border-indigo-500\">\r\n                \r\n                                        <BiLogInCircle className=\"h-5 w-5 text-gray-400\"/>\r\n\r\n                                        <span>Bind Key</span>\r\n\r\n                                        </button>\r\n\r\n                                    </div>\r\n                                    </form>\r\n                                </div>\r\n\r\n\r\n\r\n                                \r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                </div>\r\n\r\n\r\n            </>\r\n        );\r\n\r\n}\r\n\r\nexport default BindPage;\r\n","E:\\dashboard-react\\src\\components\\userNav.js",["187","188"],"import '../static/styles/main.css'; \r\nimport React, {useState, useEffect} from 'react';\r\nimport BounceLoader from \"react-spinners/BounceLoader\";\r\n\r\n\r\n\r\nconst UserNav = () =>  {\r\n    const [loaded, setLoaded] = useState(false)\r\n    const [img, setImg] = useState(\"\")\r\n\r\n    async function fetchData(){\r\n        const res = await fetch('/accounts/user/data');\r\n        res.json()\r\n        .then(res => {\r\n            setImg(res.serverImage)\r\n            setLoaded(true)\r\n        })\r\n        .catch(err =>  {\r\n            fetchData()\r\n        });\r\n        \r\n    }\r\n\r\n\r\n    useEffect(() =>{\r\n        var abortController = new AbortController();\r\n        fetchData()\r\n\r\n\r\n\r\n\r\n        return () => {\r\n            abortController.abort();\r\n        };\r\n\r\n    }, [])\r\n\r\n\r\n    // render() {\r\n        return (\r\n\r\n            <>\r\n            <nav>\r\n                <div className=\"\">\r\n                    <div className=\"h-16 text-left\">\r\n\r\n                        <div className=\"text-left\">\r\n                            {loaded ? <img className=\"block h-24 w-auto rounded-full p-2\" src={img}/> : <BounceLoader color={'#302f2f'} loading={true} size={25} /> }\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n\r\n            </nav>\r\n            </>\r\n        )\r\n}\r\n\r\nexport default UserNav;","E:\\dashboard-react\\src\\components\\home\\planEditModal.js",["189","190","191","192","193","194","195"],"import '../../static/styles/main.css'; \r\nimport React, { useEffect, useState } from 'react';\r\nimport Select from 'react-select';\r\nimport makeAnimated from 'react-select/animated';\r\nimport chroma from 'chroma-js';\r\nimport { Switch } from '@headlessui/react'\r\nimport DatePicker from 'react-date-picker';\r\n\r\nimport { AiOutlineClose } from 'react-icons/ai';\r\nimport { IoPricetagOutline } from 'react-icons/io5';\r\nimport { BsCalendar } from 'react-icons/bs'\r\nimport { MdClear } from 'react-icons/md'\r\n\r\n\r\nconst PlanEditModal = (currentPlanData) => {\r\n\r\n    const [availableRoles, setavailableRoles] = useState([])\r\n    const [planName, setplanName] = useState(\"\")\r\n    const [planRole, setplanRole] = useState()\r\n    const [unbinding, setunbinding] = useState(true)\r\n    const [expDate, setExpDate] = useState(new Date())\r\n\r\n\r\n    async function fetchPlans(){\r\n        const res = await fetch('/discord/guild/roles');\r\n        res.json()\r\n        .then(res => {\r\n            setavailableRoles(res.roles)\r\n        })\r\n        .catch(err =>  {console.log(err)});\r\n        \r\n    }\r\n\r\n    useEffect(() =>{\r\n        // setExpDate(new Date(currentPlanData.expiry))\r\n        setunbinding(currentPlanData.unbindable)\r\n        setplanRole(JSON.parse(currentPlanData.role))\r\n        setplanName(currentPlanData.planName)\r\n        const abortController = new AbortController();\r\n        fetchPlans()\r\n\r\n\r\n\r\n        return () => {\r\n            abortController.abort();\r\n        };\r\n\r\n    }, [])\r\n\r\n    const colourStyles = {\r\n        control: styles => ({ ...styles, backgroundColor: localStorage.getItem('mode') }),\r\n        option: (styles, { data, isDisabled, isFocused, isSelected }) => {\r\n          const color = chroma(data.color);\r\n          return {\r\n            ...styles,\r\n            backgroundColor: isDisabled\r\n              ? null\r\n              : isSelected\r\n              ? data.color\r\n              : isFocused\r\n              ? color.alpha(0.1).css()\r\n              : null,\r\n            color: isDisabled\r\n              ? '#ccc'\r\n              : isSelected\r\n              ? chroma.contrast(color, 'white') > 2\r\n                ? 'white'\r\n                : 'black'\r\n              : data.color,\r\n            cursor: isDisabled ? 'not-allowed' : 'default',\r\n      \r\n            ':active': {\r\n              ...styles[':active'],\r\n              backgroundColor:\r\n                !isDisabled && (isSelected ? data.color : color.alpha(0.3).css()),\r\n            },\r\n          };\r\n        },\r\n        multiValue: (styles, { data }) => {\r\n          const color = chroma(data.color);\r\n          return {\r\n            ...styles,\r\n            backgroundColor: color.alpha(0.1).css(),\r\n          };\r\n        },\r\n        multiValueLabel: (styles, { data }) => ({\r\n          ...styles,\r\n          color: data.color,\r\n        }),\r\n        multiValueRemove: (styles, { data }) => ({\r\n          ...styles,\r\n          color: data.color,\r\n          ':hover': {\r\n            backgroundColor: data.color,\r\n            color: 'white',\r\n          },\r\n        }),\r\n      };\r\n    const colourStyle = {\r\n        control: styles => ({ ...styles, backgroundColor: localStorage.getItem('mode') }),\r\n\r\n    }\r\n\r\n\r\n    \r\n    const submitHandler2 = async (e) => {\r\n        e.preventDefault()\r\n\r\n        var response = await fetch('/plans/update', {\r\n            method:'post',\r\n            body:JSON.stringify({\r\n                id:currentPlanData.id,\r\n                planName:planName,\r\n                role:JSON.stringify(planRole),\r\n                unbinding:unbinding,\r\n                expiry:expDate.getTime()\r\n            }),\r\n            \"headers\": {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        })\r\n        if(response.ok) {\r\n\r\n            return\r\n        }else{\r\n            return\r\n        }\r\n    }\r\n\r\n        \r\n        return (\r\n            <div className=\"fixed z-10 inset-0 overflow-y-auto hidden\" id={`plan-modal-edit-${currentPlanData.id}`}>\r\n            \r\n            <form onSubmit={submitHandler2}>\r\n                <div className=\"flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0\">\r\n\r\n                    <div className=\"fixed inset-0 transition-opacity\" aria-hidden=\"true\">\r\n                        <div className=\"absolute inset-0 bg-gray-500 opacity-75\"></div>\r\n                    </div>\r\n        \r\n                    <span className=\"hidden sm:inline-block sm:align-middle sm:h-screen\" aria-hidden=\"true\">&#8203;</span>\r\n\r\n    \r\n                    <div className=\"inline-block align-bottom bg-white rounded-lg px-4 pt-5 pb-4 text-left shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-sm sm:w-full sm:p-6 dark:bg-darkOther-200\" role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"modal-headline\">\r\n                \r\n                        <div>\r\n                            <button type=\"button\" onClick={() => {\r\n                                document.querySelector(`#plan-modal-edit-${currentPlanData.id}`).classList.contains('hidden') ? document.querySelector(`#plan-modal-edit-${currentPlanData.id}`).classList.remove('hidden') : document.querySelector(`#plan-modal-edit-${currentPlanData.id}`).classList.add('hidden')\r\n                            }}><AiOutlineClose className=\"text-red-500 h-6 w-6 \" id='hide' /></button>\r\n\r\n\r\n                            <div className=\"mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-green-100\">\r\n    \r\n                            \r\n                            <IoPricetagOutline className=\"h-6 w-6 text-green-600 select-none\" id='hide'/>\r\n                        </div>\r\n\r\n\r\n                        <div className=\"mt-3 text-center sm:mt-5\">  \r\n                            <h3 className=\"text-lg leading-6 font-medium text-gray-900 dark:text-white select-none\" id=\"modal-headline\">\r\n                            Edit a Plan...\r\n                            </h3>\r\n\r\n                            <div className=\"mt-2\">\r\n                                \r\n                                <div>\r\n\r\n                                    <fieldset className=\"mt-2 bg-white dark:bg-darkOther-200\">\r\n                                        <div className=\"md:grid md:grid-cols-2\">\r\n                                        <div className=\"\">\r\n                                                <legend className=\"block text-sm font-medium text-gray-700 text-left dark:text-gray-300 select-none\">Plan Name</legend>\r\n                                                <div className=\"mt-1 rounded-md shadow-sm -space-y-px\">\r\n                                                    <div>\r\n                                                    <label className=\"block text-sm font-medium text-gray-700\"></label>\r\n                                                    <input  name=\"planName\" id=\"name\" autoComplete=\"off\" className=\"dark:bg-darkOther-200 dark:text-white focus:border-other-200 block w-full font-medium text-md rounded-md py-2 focus:outline-none\" \r\n                                                    placeholder=\"Member\" value={planName} onChange={e => setplanName(e.target.value)} />                                                         \r\n                                                    \r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                            \r\n                                            <div className=\"\">\r\n                                                <legend className=\"block text-sm font-medium text-gray-700 text-left dark:text-gray-300 select-none\">Type</legend>\r\n                                                <div className=\"mt-1 rounded-md shadow-sm -space-y-px\">\r\n                                                    <div>\r\n                                                        <label className=\"sr-only\">type</label>\r\n                                                        \r\n                                                        <Select isDisabled defaultValue={{\"label\":currentPlanData.type, \"value\":currentPlanData.type}} styles={colourStyle} placeholder=\"Plan Type\" id=\"type\" name=\"planType\" className=\"focus:ring-other-200 focus:border-other-200 relative block w-full rounded-none rounded-t-md bg-transparent focus:z-10 font-medium text-md dark:focus:border-darkOther-200 dark:focus:ring-darkOther-200\"/>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n        \r\n                                        </div>\r\n        \r\n                                    </fieldset>\r\n\r\n                                    {currentPlanData.type == \"recurring\" || currentPlanData.type == \"recurring+onetime-payment\" ?  <fieldset className=\"mt-2 bg-white dark:bg-darkOther-200\">\r\n                                        <div className=\"md:grid md:grid-cols-2\">\r\n                                        <div className=\"\">\r\n                                                <legend className=\"block text-sm font-medium text-gray-700 text-left dark:text-gray-300 select-none\">Interval</legend>\r\n                                                <div className=\"mt-1 rounded-md shadow-sm -space-y-px\">\r\n                                                    <div className=\"mt-1 flex rounded-md shadow-sm -space-y-px\">\r\n                                                        <span className=\"inline-flex items-center px-3 rounded-l-md border-r-2 border-gray-200 bg-gray-50 text-gray-800 sm:text-sm mr-2 dark:bg-darkOther-100 dark:text-white select-none\">\r\n                                                            every\r\n                                                        </span>\r\n                                                        <input isDisabled name=\"interval\" id=\"interval\" type=\"text\" placeholder=\"Count\" autoComplete=\"off\" className=\"dark:text-white dark:bg-darkOther-200 block w-full font-normal text-md rounded-md py-2 \" value={currentPlanData.interval}/>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                            \r\n                                            <div className=\"\">\r\n                                                <legend className=\"block text-sm font-medium text-gray-700 text-left dark:text-gray-300 select-none\">Interval Type</legend>\r\n                                                <div className=\"mt-1 rounded-md shadow-sm -space-y-px\">\r\n                                                    <div>\r\n                                                        <label className=\"sr-only select-none\">Interval Type</label>\r\n                                                        \r\n                                                        <Select isDisabled styles={colourStyle} id=\"type\" defaultValue={{\"label\":currentPlanData.intervalType, \"value\":currentPlanData.intervalType}}  name=\"intervalType\" placeholder=\"Interval\" \r\n                                                                className=\"relative block w-full rounded-none rounded-t-md focus:z-10 font-medium text-md\"/>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n        \r\n                                        </div>\r\n        \r\n                                    </fieldset> :  <></> }\r\n\r\n                                    \r\n                                \r\n\r\n                                    <fieldset className=\"mt-4 bg-white dark:bg-darkOther-200\">\r\n                                        <legend className=\"block text-sm font-medium text-gray-700 text-left dark:text-gray-300 select-none\">Price</legend>\r\n                                        <div className=\"mt-1 bg-white rounded-md shadow-sm\">\r\n                                            <div>\r\n                                                <div className=\"mt-1 relative rounded-md shadow-sm\">\r\n                                                    <input type=\"text\" isDisabled name=\"price\" id=\"price\" className=\"dark:text-white dark:bg-darkOther-200 block w-full font-medium text-md py-2 focus:outline-none\" \r\n                                                    placeholder=\"0.00\" value={currentPlanData.price}/>\r\n\r\n                                                    <div className=\"absolute inset-y-0 right-0 flex items-center\">\r\n                                                        <label className=\"sr-only\">Currency</label>\r\n                                                        <Select isDisabled styles={colourStyle}  id=\"type\" name=\"priceCurrency\" placeholder=\"Currency\" className=\"px-3 w-48 dark:bg-darkOther-200\" defaultValue={{\"label\":currentPlanData.currency, \"value\":currentPlanData.currency}}/>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    \r\n                                    </fieldset>\r\n\r\n                                    {currentPlanData.type == \"rental\" ? <fieldset className=\"mt-4 bg-white dark:bg-darkOther-200\">\r\n                                        <legend className=\"block text-sm font-medium text-gray-700 text-left dark:text-gray-300 select-none\">Expiry</legend>\r\n                                        <div className=\"mt-1 bg-white dark:bg-darkOther-200\">\r\n                                            <div>\r\n                                                <div className=\"mt-1 relative rounded-md shadow-sm text-left dark:text-white\" id=\"calendar\">\r\n                                                <DatePicker\r\n                                                    onChange={setExpDate}\r\n                                                    value={expDate}\r\n                                                    calendarIcon={<BsCalendar />}\r\n                                                    clearIcon={<MdClear />}\r\n                                                    onCalendarClose={() => {\r\n                                                        document.querySelector('#calendar').classList.add('dark:text-white')\r\n                                                    }}\r\n                                                    onCalendarOpen={() => {\r\n                                                        document.querySelector('#calendar').classList.remove('dark:text-white')\r\n                                                    }}\r\n                                                />\r\n\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    \r\n                                    </fieldset> : <></>}\r\n\r\n                                    {currentPlanData.type == \"recurring+onetime-payment\" ? <fieldset className=\"mt-2 bg-whit dark:bg-darkOther-200\" id=\"interval-fieldset\">\r\n                                            <div className=\"\">\r\n                                                <legend className=\"block text-sm font-medium text-gray-700 text-left dark:text-gray-300 select-none\">Onetime Payment Price</legend>\r\n                                                <div className=\"mt-1 rounded-md shadow-sm -space-y-px\">\r\n                                                    <div>\r\n                                                        <label className=\"sr-only\">price</label>\r\n                                                        <input type=\"text\" isDisabled className=\"dark:bg-darkOther-200 focus:ring-other-200 focus:border-other-200 block w-full font-medium text-md  rounded-md py-2 dark:focus:border-darkOther-200 dark:focus:ring-darkOther-200\" \r\n                                                        placeholder=\"0.00\" defaultValue={currentPlanData.oneTimeAmount}/>\r\n                                                                                                                            \r\n                                                    \r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                    \r\n                                    </fieldset> : <></>}\r\n\r\n\r\n                                    <fieldset className=\"mt-2 bg-whit dark:bg-darkOther-200\" id=\"interval-fieldset\">\r\n                                            <div className=\"\">\r\n                                                <legend className=\"block text-sm font-medium text-gray-700 text-left dark:text-gray-300 select-none\">Roles</legend>\r\n                                                <div className=\"mt-1 rounded-md shadow-sm -space-y-px\">\r\n                                                    <div>\r\n                                                        <label className=\"sr-only\">roles</label>\r\n                            \r\n                                                        <Select id=\"roles\" isMulti value={planRole} placeholder=\"Roles\" name=\"roles\" closeMenuOnSelect={false} styles={colourStyles} name=\"planRole\" isSearchable  options={availableRoles} className=\"focus:ring-other-200 focus:border-other-200 relative block w-full rounded-none rounded-t-md bg-transparent focus:z-10 font-medium text-md dark:focus:border-darkOther-200 dark:focus:ring-darkOther-200\"\r\n                                                                    onChange={e => setplanRole(e)} />\r\n                                                                                                                                                                      \r\n                                                    \r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                    \r\n                                    </fieldset>\r\n\r\n                                    <fieldset className=\"mt-2 bg-white dark:bg-darkOther-200\" id=\"interval-fieldset\">\r\n                                            <div className=\"\">\r\n                                                <legend className=\"block text-sm font-medium text-gray-700 text-left dark:text-gray-300 select-none\">{unbinding ? \"Unbinding Enabled\" : \"Unbinding Disabled\"}</legend>\r\n                                                <div className=\"mt-1 rounded-md shadow-sm -space-y-px\">\r\n                                                    <div className=\"text-left\">\r\n                                                        <label className=\"sr-only\">allow unbinding</label>\r\n                                                        <Switch \r\n                                                        type=\"button\"\r\n                                                        checked={unbinding}\r\n                                                        onChange={e => setunbinding(e)}\r\n                                                        as=\"button\" \r\n                                                        className={`${unbinding ? \"bg-green-400\" : \"bg-gray-200\"} relative inline-flex flex-shrink-0 h-6 w-11 border-2 border-transparent rounded-full cursor-pointer transition-colors ease-in-out duration-200 focus:outline-none`}>\r\n\r\n                                                            {unbinding ? \r\n                                                            <span aria-hidden=\"true\" className=\"pointer-events-none translate-x-0 inline-block h-5 w-5 rounded-full bg-white shadow transform ring-0 transition ease-in-out duration-200\"></span> : \r\n                                                            <span aria-hidden=\"true\" className=\"pointer-events-none translate-x-5 inline-block h-5 w-5 rounded-full bg-white shadow transform ring-0 transition ease-in-out duration-200\"></span>\r\n                                                            }\r\n\r\n                                                        </Switch>\r\n                                                                                                                            \r\n                                                    \r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                    \r\n                                    </fieldset>\r\n\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"mt-5 sm:mt-6\">\r\n                        <button  type=\"submit\" className=\"inline-flex justify-center w-full rounded-md border border-transparent shadow-sm px-4 py-2 bg-blue-500 text-base font-medium text-white hover:bg-other-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-other-200 sm:text-sm dark:focus:ring-darkOther-200 dark:hover:bg-darkOther-200 dark:bg-darkOther-100\">\r\n                            Edit\r\n                        </button>\r\n                    </div>\r\n\r\n                </div>\r\n            \r\n            </div>\r\n            </form>\r\n    </div>\r\n\r\n        )\r\n\r\n}\r\nexport default PlanEditModal","E:\\dashboard-react\\src\\components\\purchasePage\\purchase.js",["196","197","198","199","200"],"import '../../static/styles/main.css'; \r\nimport React, { useState, useEffect } from 'react';\r\nimport UserNav from '../userNav'\r\nimport BounceLoader from \"react-spinners/BounceLoader\";\r\nimport Checkout from './checkout'\r\n\r\n\r\n\r\n\r\n\r\nconst PurchasePage = () => {\r\n\r\n    const [loaded, setLoaded] = useState(false)\r\n    const [stock, setStock] = useState(0)\r\n    const [name, setName] = useState(\"Purchase\")\r\n\r\n\r\n    async function fetchData(){\r\n        const res = await fetch('/restocks/get/' + localStorage.getItem('pswd'));\r\n        res.json()\r\n        .then(res => {\r\n            setStock(parseInt(res.stockRemaining))\r\n            setName(res.name)\r\n            if((res.bg == \"empty\" ) || (res.bg == undefined )  || (res.bg == null )) {\r\n                document.querySelector('#baseBackground').classList.add('bg-darkOther-300')\r\n                document.querySelector('#baseBackground').style = `background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='100' height='199' viewBox='0 0 100 199'%3E%3Cg fill='%23ffffff' fill-opacity='0.4'%3E%3Cpath d='M0 199V0h1v1.99L100 199h-1.12L1 4.22V199H0zM100 2h-.12l-1-2H100v2z'%3E%3C/path%3E%3C/g%3E%3C/svg%3E\");`\r\n                \r\n            } else {\r\n                document.querySelector('#baseBackground').style = `background-repeat: no-repeat; background-image: url('${res.bg}'); background-attachment: fixed; background-size: cover; background-size: 100% 100%;`\r\n            }\r\n            setLoaded(true)\r\n        })\r\n        .catch(err =>  {\r\n            document.querySelector('#baseBackground').classList.add('bg-darkOther-300')\r\n            document.querySelector('#baseBackground').style = `background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='100' height='199' viewBox='0 0 100 199'%3E%3Cg fill='%23ffffff' fill-opacity='0.4'%3E%3Cpath d='M0 199V0h1v1.99L100 199h-1.12L1 4.22V199H0zM100 2h-.12l-1-2H100v2z'%3E%3C/path%3E%3C/g%3E%3C/svg%3E\");`\r\n            var interval;\r\n            if(res.status == 404) {\r\n                setStock(0)\r\n                clearInterval(interval)\r\n                setLoaded(true)\r\n            }\r\n            if(res.status == 400) {\r\n                clearInterval(interval)\r\n                setLoaded(true)\r\n                setStock(0)\r\n            }\r\n            else{\r\n                interval = setInterval(() => {\r\n                    fetchData()\r\n                }, 1500);\r\n            }\r\n        });\r\n        \r\n    }\r\n\r\n    useEffect(() =>{\r\n        const abortController = new AbortController();\r\n        localStorage.setItem('pswd',window.location.search.split('?password=')[1])\r\n        fetchData()\r\n\r\n        return () => {\r\n            abortController.abort();\r\n        };\r\n\r\n    }, [])\r\n\r\n\r\n        return (\r\n            <>\r\n                <div className=\"flex flex-col w-0 flex-1 overflow-y-auto\">\r\n                    <UserNav />\r\n                    \r\n                    {\r\n                        loaded ? <div className=\"m-auto\">\r\n\r\n                        <div className=\"bg-white overflow-hidden shadow rounded-lg divide-y divide-gray-200\" style={{\"minWidth\":\"500px\"}}>\r\n                            <div className=\"px-4 py-5 sm:px-6\">\r\n                                <h1 className=\"text-lg font-medium text-gray-700 select-none\">{name}</h1>\r\n                            </div>\r\n                            <div className=\"px-4 py-5 sm:p-6\">\r\n\r\n                           \r\n                            <div>\r\n                                {stock > 0 ? \r\n                                <div className=\"mt-1 flex rounded-md shadow-sm w-full\">\r\n\r\n                                    <Checkout />\r\n\r\n                                </div>\r\n                                : \r\n                                <div className=\"mt-1 flex rounded-md w-full\">\r\n\r\n                                    <div className=\"w-full text-center\">\r\n                                        <h1 className=\"text-8xl font-bold text-darkOther-200 select-none\">OOS</h1>\r\n                                    </div>\r\n\r\n                                </div>\r\n                                }\r\n                            </div> \r\n\r\n\r\n\r\n                                \r\n                            </div>\r\n                        </div>\r\n\r\n                        </div> : <div className=\"m-auto\">\r\n                        \r\n                        <BounceLoader color={'#302f2f'} loading={true} size={25} />\r\n                        \r\n                        </div>\r\n\r\n\r\n                    }\r\n\r\n                </div>\r\n\r\n\r\n            </>\r\n        );\r\n\r\n}\r\n\r\nexport default PurchasePage;\r\n","E:\\dashboard-react\\src\\components\\purchasePage\\checkout.js",["201","202","203","204","205","206","207","208","209"],"import React, {useState, useEffect} from 'react';\r\nimport BeatLoader from \"react-spinners/BeatLoader\";\r\nimport publicIp from \"public-ip\";\r\n\r\nimport {HiOutlineMail} from 'react-icons/hi'\r\nimport {RiCoupon2Fill} from 'react-icons/ri'\r\nimport {loadStripe} from '@stripe/stripe-js';\r\nimport {\r\n  CardElement,\r\n  Elements,\r\n  useStripe,\r\n  useElements,\r\n} from '@stripe/react-stripe-js';\r\n\r\n\r\nconst CheckoutForm = () => {\r\n    const stripe = useStripe();\r\n    const elements = useElements();\r\n    const [checkoutStatus, setCheckoutStatus] = useState(\"idle\")\r\n    const [email, setEmail] = useState(\"\")\r\n    const [coupon, setCoupon] = useState(\"\")\r\n    const [key, setKey] = useState(\"\")\r\n    const [availableStock, setAvailableStock] = useState(false)\r\n    const [pricingDetails, setPricingDetails] = useState(\"\")\r\n    // const [publicKey, setPublicKey] = useState(\"\")\r\n\r\n    const getClientIp = async () => await publicIp.v4({\r\n        fallbackUrls: [ \"https://ifconfig.co/ip\" ]\r\n    });\r\n\r\n    async function fetchData(){\r\n        const res = await fetch('/restocks/data/' + localStorage.getItem('pswd'));\r\n        res.json()\r\n        .then(res => {\r\n            setAvailableStock(res.availableStock)\r\n            setPricingDetails(res.pricingDetails)\r\n        })\r\n        .catch(err =>  {\r\n            setAvailableStock(false)\r\n        });\r\n        \r\n    }\r\n\r\n    useEffect(() =>{\r\n        const abortController = new AbortController();\r\n        fetchData()\r\n\r\n\r\n        return () => {\r\n            abortController.abort();\r\n        };\r\n\r\n    }, [])\r\n\r\n\r\n\r\n\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n        if (['success','pending'].includes(checkoutStatus)) {\r\n            console.log(\"\")\r\n        }\r\n        else {\r\n\r\n            const {error, paymentMethod} = await stripe.createPaymentMethod({\r\n                type: 'card',\r\n                card: elements.getElement(CardElement),\r\n            });\r\n            if(error) {\r\n                setCheckoutStatus(\"failed\")\r\n            }\r\n\r\n            \r\n            try{\r\n                if(JSON.parse(localStorage.getItem('ip')).ip == await getClientIp() && JSON.parse(localStorage.getItem('ip')).restock == localStorage.getItem('pswd')) setCheckoutStatus(\"failed\")\r\n            }catch{}\r\n\r\n            setCheckoutStatus(\"pending\")\r\n            var response = await fetch('/stripe/checkout', {\r\n                method:'post',\r\n                body:JSON.stringify({\r\n                    paymentMethod:paymentMethod,\r\n                    password:localStorage.getItem('pswd'),\r\n                    email:email,\r\n                    coupon:coupon\r\n                }),\r\n                \"headers\": {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            })\r\n            if(response.ok) {\r\n                if(response.status == 200) {\r\n                    try{\r\n                        localStorage.setItem('ip',JSON.stringify({\r\n                            ip:await getClientIp(),\r\n                            restock:localStorage.getItem('pswd')\r\n                        }))\r\n                    }catch{}\r\n                    setCheckoutStatus(\"success\")\r\n                    //setKey(await response.json().key)\r\n                }\r\n                else setCheckoutStatus(\"failed\")\r\n\r\n            } else {\r\n\r\n                setCheckoutStatus(\"failed\")\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <div className=\"w-full text-center\">\r\n            {availableStock ? <form onSubmit={handleSubmit}>\r\n\r\n                <fieldset>\r\n                <CardElement options={{\r\n                    style: {\r\n                    base: {\r\n                        fontSize: '16px',\r\n                        color: '#aab7c4',\r\n                        '::placeholder': {\r\n                        color: '#aab7c4',\r\n                        },\r\n                    },\r\n                    invalid: {\r\n                        color: '#9e2146',\r\n                    },\r\n                    },\r\n                }}/>\r\n                </fieldset>\r\n\r\n                <fieldset >\r\n                    <div class=\"mt-3 relative rounded-md border-0\">\r\n                        <div class=\"absolute inset-y-0 left-0 flex items-center pointer-events-none\">\r\n                        <HiOutlineMail class=\"h-6 w-6 text-gray-400\"/>\r\n                        </div>\r\n                        <input type=\"text\" className=\"focus:outline-none md:text-md lg:text-md font-normal text-gray-500 w-full pl-8 sm:text-sm rounded-md p-3\" placeholder=\"email\" onChange={e => setEmail(e.target.value)} />\r\n                    </div>\r\n                </fieldset>\r\n\r\n                <fieldset >\r\n                    <div class=\"mt-3 relative rounded-md border-0\">\r\n                        <div class=\"absolute inset-y-0 left-0 flex items-center pointer-events-none\">\r\n                        <RiCoupon2Fill class=\"h-6 w-6 text-gray-400\"/>\r\n                        </div>\r\n                        <input type=\"text\" className=\"focus:outline-none md:text-md lg:text-md font-normal text-gray-500 w-full pl-8 sm:text-sm rounded-md p-3\" placeholder=\"coupon\" onChange={e => setCoupon(e.target.value)} />\r\n                    </div>\r\n                </fieldset>\r\n                \r\n                <p className=\"text-xs text-gray-400 font-medium select-none\">{pricingDetails}</p>\r\n\r\n                {\r\n                    checkoutStatus == \"idle\" ? <button type=\"submit\" disabled={!stripe} className=\"duration-150 transform hover:scale-105 motion-reduce:transform-none font-medium text-md rounded-md text-white bg-other-900 p-2 px-5 text-center mt-12\">Purchase Now</button> : \r\n                    checkoutStatus == \"failed\" ? <button type=\"submit\" disabled={!stripe} className=\"font-medium text-md rounded-md text-white bg-red-500 p-2 px-5 text-center mt-12\">Checkout Failed</button> :\r\n                    checkoutStatus == \"success\" ? <button type=\"submit\" disabled={!stripe} className=\"font-medium text-md rounded-md text-white bg-green-500 p-2 px-5 text-center mt-12\">Purchased</button> : \r\n                    checkoutStatus == \"pending\" ? <button type=\"submit\" disabled={!stripe} className=\"font-medium text-md rounded-md text-white bg-yellow-500 p-2 px-5 text-center mt-12\"><BeatLoader color={'#ffffff'} loading={true} size={10} /> </button> :\r\n                    <button type=\"submit\" disabled={!stripe} className=\"font-medium text-md rounded-md text-white bg-blue-500 p-2 px-5 text-center mt-12\">Purchase Now</button>     \r\n                }\r\n\r\n                </form> : <button type=\"submit\" className=\"font-medium text-md rounded-md text-white bg-red-500 p-2 px-5 text-center mt-12\">Sold Out</button>\r\n\r\n            }\r\n        </div>\r\n            \r\n    );\r\n};\r\n\r\nconst Checkout = () => (\r\n    <Elements stripe={loadStripe(process.env.REACT_APP_STRIPE_PUBLIC)}>\r\n      <CheckoutForm />\r\n    </Elements>\r\n);\r\n  \r\nexport default Checkout","E:\\dashboard-react\\src\\components\\userDashboard\\renewModal.js",["210","211"],"import '../../static/styles/main.css'; \r\nimport React, { useEffect, useState } from 'react';\r\nimport Renew from './renew'\r\n\r\nimport { MdAutorenew } from 'react-icons/md';\r\n\r\n\r\n\r\nconst Modal = () => {\r\n\r\n        \r\n    return (\r\n            <div className=\"fixed z-10 inset-0 overflow-y-auto\" id=\"renew-modal\">\r\n        \r\n                    <div className=\"flex items-end justify-center min-h-screen pt-4 px-4 pb-64 text-center sm:block sm:p-0\r\n                    \">\r\n\r\n                        <div className=\"fixed inset-0 transition-opacity\" aria-hidden=\"true\">\r\n                            <div className=\"absolute inset-0 bg-gray-500 opacity-95\"></div>\r\n                        </div>\r\n            \r\n                        <span className=\"hidden lg:inline-block lg:align-middle lg:h-screen md:inline-block md:align-middle md:h-screen sm:inline-block sm:align-middle sm:h-screen \" aria-hidden=\"true\">&#8203;</span>\r\n\r\n        \r\n                        <div className=\"inline-block align-bottom bg-white rounded-lg px-4 pt-5 pb-4 text-left shadow-xl transform transition-all sm:align-middle md:align-middle lg:align-middle  max-w-sm w-full p-6 dark:bg-darkOther-200\" role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"modal-headline\">\r\n                    \r\n                            <div>\r\n\r\n\r\n                                <div className=\"mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-green-100\">\r\n        \r\n                                \r\n                                <MdAutorenew className=\"h-6 w-6 text-green-600 select-none\" id='hide'/>\r\n                            </div>\r\n    \r\n\r\n                            <div className=\"mt-3 text-center sm:mt-5\">  \r\n                                <h3 className=\"text-lg leading-6 font-medium text-gray-900 dark:text-white select-none\" id=\"modal-headline\">\r\n                                Renew Subscription\r\n                                </h3>\r\n    \r\n                                <div className=\"mt-2\">\r\n                                    \r\n                                    <div>\r\n\r\n                                        <fieldset className=\"mt-2 bg-white dark:bg-darkOther-200\">\r\n                                            <Renew />\r\n                                        </fieldset>\r\n\r\n\r\n    \r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                \r\n                </div>\r\n        </div>\r\n\r\n    )\r\n\r\n}\r\nexport default Modal","E:\\dashboard-react\\src\\components\\userDashboard\\renew.js",["212","213","214","215","216","217","218"],"import React, {useState, useEffect} from 'react';\r\nimport BeatLoader from \"react-spinners/BeatLoader\";\r\nimport {loadStripe} from '@stripe/stripe-js';\r\nimport {\r\n  CardElement,\r\n  Elements,\r\n  useStripe,\r\n  useElements,\r\n} from '@stripe/react-stripe-js';\r\n\r\n\r\nconst CheckoutForm = () => {\r\n    const stripe = useStripe();\r\n    const elements = useElements();\r\n    const [checkoutStatus, setCheckoutStatus] = useState(\"idle\")\r\n    const [key, setKey] = useState(\"\")\r\n    const [availableStock, setAvailableStock] = useState(false)\r\n    const [pricingDetails, setPricingDetails] = useState(\"\")\r\n\r\n    async function fetchData(){\r\n        setAvailableStock(true)\r\n        setPricingDetails(\"N/A\")  \r\n    }\r\n\r\n    useEffect(() =>{\r\n        const abortController = new AbortController();\r\n        fetchData()\r\n\r\n\r\n        return () => {\r\n            abortController.abort();\r\n        };\r\n\r\n    }, [])\r\n\r\n\r\n\r\n\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n        if (['success','pending'].includes(checkoutStatus)) {\r\n            console.log(\"\")\r\n        }\r\n        else {\r\n\r\n            const {error, paymentMethod} = await stripe.createPaymentMethod({\r\n                type: 'card',\r\n                card: elements.getElement(CardElement),\r\n            });\r\n            if(error) {\r\n                setCheckoutStatus(\"failed\")\r\n            }\r\n\r\n            setCheckoutStatus(\"pending\")\r\n            var response = await fetch('/stripe/renew', {\r\n                method:'post',\r\n                body:JSON.stringify({\r\n                    paymentMethod:paymentMethod\r\n                }),\r\n                \"headers\": {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            })\r\n            if(response.ok) {\r\n                if(response.status == 200) {\r\n                    setCheckoutStatus(\"success\")\r\n                    //setKey(await response.json().key)\r\n                }\r\n                else setCheckoutStatus(\"failed\")\r\n\r\n            } else {\r\n\r\n                setCheckoutStatus(\"failed\")\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <div className=\"w-full text-center\">\r\n            {availableStock ? <form onSubmit={handleSubmit}>\r\n\r\n                <fieldset>\r\n                <CardElement options={{\r\n                    style: {\r\n                    base: {\r\n                        fontSize: '16px',\r\n                        color: '#aab7c4',\r\n                        '::placeholder': {\r\n                        color: '#aab7c4',\r\n                        },\r\n                    },\r\n                    invalid: {\r\n                        color: '#9e2146',\r\n                    },\r\n                    },\r\n                }}/>\r\n                </fieldset>\r\n\r\n                <p className=\"text-xs text-gray-400 font-medium select-none\">{pricingDetails}</p>\r\n\r\n                {\r\n                    checkoutStatus == \"idle\" ? <button type=\"submit\" disabled={!stripe} className=\"duration-150 transform hover:scale-105 motion-reduce:transform-none font-medium text-md rounded-md text-white bg-other-900 p-2 px-5 text-center mt-12\">Renew Now</button> : \r\n                    checkoutStatus == \"failed\" ? <button type=\"submit\" disabled={!stripe} className=\"font-medium text-md rounded-md text-white bg-red-500 p-2 px-5 text-center mt-12\">Checkout Failed</button> :\r\n                    checkoutStatus == \"success\" ? <button type=\"submit\" disabled={!stripe} className=\"font-medium text-md rounded-md text-white bg-green-500 p-2 px-5 text-center mt-12\">Renewed</button> : \r\n                    checkoutStatus == \"pending\" ? <button type=\"submit\" disabled={!stripe} className=\"font-medium text-md rounded-md text-white bg-yellow-500 p-2 px-5 text-center mt-12\"><BeatLoader color={'#ffffff'} loading={true} size={10} /> </button> :\r\n                    <button type=\"submit\" disabled={!stripe} className=\"font-medium text-md rounded-md text-white bg-blue-500 p-2 px-5 text-center mt-12\">Renew Now</button>     \r\n                }\r\n\r\n                </form> : <button type=\"submit\" className=\"font-medium text-md rounded-md text-white bg-red-500 p-2 px-5 text-center mt-12\">Error</button>\r\n\r\n            }\r\n        </div>\r\n            \r\n    );\r\n};\r\n\r\n\r\nconst Checkout = () => (\r\n  <Elements stripe={loadStripe(process.env.REACT_APP_STRIPE_PUBLIC)}>\r\n    <CheckoutForm />\r\n  </Elements>\r\n);\r\n\r\nexport default Checkout",{"ruleId":"219","replacedBy":"220"},{"ruleId":"221","replacedBy":"222"},{"ruleId":"223","severity":1,"message":"224","line":2,"column":49,"nodeType":"225","messageId":"226","endLine":2,"endColumn":60},{"ruleId":"223","severity":1,"message":"227","line":2,"column":28,"nodeType":"225","messageId":"226","endLine":2,"endColumn":37},{"ruleId":"223","severity":1,"message":"228","line":21,"column":43,"nodeType":"225","messageId":"226","endLine":21,"endColumn":45},{"ruleId":"223","severity":1,"message":"229","line":19,"column":12,"nodeType":"225","messageId":"226","endLine":19,"endColumn":18},{"ruleId":"230","severity":1,"message":"231","line":47,"column":8,"nodeType":"232","endLine":47,"endColumn":10,"suggestions":"233"},{"ruleId":"223","severity":1,"message":"234","line":2,"column":19,"nodeType":"225","messageId":"226","endLine":2,"endColumn":23},{"ruleId":"230","severity":1,"message":"235","line":18,"column":5,"nodeType":"225","endLine":18,"endColumn":14,"suggestions":"236"},{"ruleId":"230","severity":1,"message":"237","line":18,"column":16,"nodeType":"238","endLine":28,"endColumn":6},{"ruleId":"239","severity":1,"message":"240","line":22,"column":35,"nodeType":"241","messageId":"242","endLine":22,"endColumn":37},{"ruleId":"239","severity":1,"message":"240","line":27,"column":28,"nodeType":"241","messageId":"242","endLine":27,"endColumn":30},{"ruleId":"239","severity":1,"message":"240","line":31,"column":14,"nodeType":"241","messageId":"242","endLine":31,"endColumn":16},{"ruleId":"243","severity":1,"message":"244","line":70,"column":108,"nodeType":"245","endLine":70,"endColumn":121},{"ruleId":"243","severity":1,"message":"244","line":142,"column":108,"nodeType":"245","endLine":142,"endColumn":121},{"ruleId":"239","severity":1,"message":"240","line":77,"column":56,"nodeType":"241","messageId":"242","endLine":77,"endColumn":58},{"ruleId":"246","severity":1,"message":"247","line":77,"column":238,"nodeType":"248","endLine":77,"endColumn":382},{"ruleId":"243","severity":1,"message":"244","line":229,"column":102,"nodeType":"245","endLine":229,"endColumn":191},{"ruleId":"239","severity":1,"message":"240","line":238,"column":55,"nodeType":"241","messageId":"242","endLine":238,"endColumn":57},{"ruleId":"239","severity":1,"message":"240","line":238,"column":82,"nodeType":"241","messageId":"242","endLine":238,"endColumn":84},{"ruleId":"243","severity":1,"message":"244","line":260,"column":106,"nodeType":"245","endLine":260,"endColumn":223},{"ruleId":"243","severity":1,"message":"244","line":283,"column":120,"nodeType":"245","endLine":283,"endColumn":226},{"ruleId":"239","severity":1,"message":"240","line":291,"column":55,"nodeType":"241","messageId":"242","endLine":291,"endColumn":57},{"ruleId":"239","severity":1,"message":"240","line":316,"column":55,"nodeType":"241","messageId":"242","endLine":316,"endColumn":57},{"ruleId":"230","severity":1,"message":"231","line":38,"column":8,"nodeType":"232","endLine":38,"endColumn":10,"suggestions":"249"},{"ruleId":"223","severity":1,"message":"227","line":2,"column":27,"nodeType":"225","messageId":"226","endLine":2,"endColumn":36},{"ruleId":"223","severity":1,"message":"250","line":13,"column":20,"nodeType":"225","messageId":"226","endLine":13,"endColumn":29},{"ruleId":"223","severity":1,"message":"228","line":18,"column":39,"nodeType":"225","messageId":"226","endLine":18,"endColumn":41},{"ruleId":"230","severity":1,"message":"251","line":40,"column":8,"nodeType":"232","endLine":40,"endColumn":10,"suggestions":"252"},{"ruleId":"253","severity":1,"message":"254","line":74,"column":17,"nodeType":"255","messageId":"256","endLine":74,"endColumn":19},{"ruleId":"239","severity":1,"message":"240","line":125,"column":118,"nodeType":"241","messageId":"242","endLine":125,"endColumn":120},{"ruleId":"239","severity":1,"message":"240","line":126,"column":114,"nodeType":"241","messageId":"242","endLine":126,"endColumn":116},{"ruleId":"243","severity":1,"message":"244","line":171,"column":62,"nodeType":"245","endLine":171,"endColumn":72},{"ruleId":"239","severity":1,"message":"240","line":53,"column":48,"nodeType":"241","messageId":"242","endLine":53,"endColumn":50},{"ruleId":"239","severity":1,"message":"240","line":59,"column":51,"nodeType":"241","messageId":"242","endLine":59,"endColumn":53},{"ruleId":"239","severity":1,"message":"240","line":63,"column":49,"nodeType":"241","messageId":"242","endLine":63,"endColumn":51},{"ruleId":"239","severity":1,"message":"240","line":82,"column":38,"nodeType":"241","messageId":"242","endLine":82,"endColumn":40},{"ruleId":"243","severity":1,"message":"244","line":101,"column":66,"nodeType":"245","endLine":101,"endColumn":76},{"ruleId":"223","severity":1,"message":"257","line":24,"column":11,"nodeType":"225","messageId":"226","endLine":24,"endColumn":25},{"ruleId":"223","severity":1,"message":"258","line":29,"column":13,"nodeType":"225","messageId":"226","endLine":29,"endColumn":21},{"ruleId":"223","severity":1,"message":"258","line":32,"column":13,"nodeType":"225","messageId":"226","endLine":32,"endColumn":21},{"ruleId":"223","severity":1,"message":"258","line":35,"column":13,"nodeType":"225","messageId":"226","endLine":35,"endColumn":21},{"ruleId":"223","severity":1,"message":"258","line":38,"column":13,"nodeType":"225","messageId":"226","endLine":38,"endColumn":21},{"ruleId":"239","severity":1,"message":"259","line":42,"column":18,"nodeType":"241","messageId":"242","endLine":42,"endColumn":20},{"ruleId":"223","severity":1,"message":"258","line":43,"column":13,"nodeType":"225","messageId":"226","endLine":43,"endColumn":21},{"ruleId":"243","severity":1,"message":"244","line":257,"column":88,"nodeType":"245","endLine":257,"endColumn":209},{"ruleId":"230","severity":1,"message":"231","line":43,"column":8,"nodeType":"232","endLine":43,"endColumn":10,"suggestions":"260"},{"ruleId":"230","severity":1,"message":"261","line":42,"column":8,"nodeType":"232","endLine":42,"endColumn":10,"suggestions":"262"},{"ruleId":"230","severity":1,"message":"263","line":35,"column":8,"nodeType":"232","endLine":35,"endColumn":10,"suggestions":"264"},{"ruleId":"265","severity":1,"message":"266","line":46,"column":21,"nodeType":"248","endLine":46,"endColumn":33},{"ruleId":"267","severity":1,"message":"268","line":80,"column":58,"nodeType":"241","messageId":"269","endLine":80,"endColumn":59},{"ruleId":"223","severity":1,"message":"270","line":24,"column":12,"nodeType":"225","messageId":"226","endLine":24,"endColumn":22},{"ruleId":"223","severity":1,"message":"271","line":24,"column":24,"nodeType":"225","messageId":"226","endLine":24,"endColumn":37},{"ruleId":"239","severity":1,"message":"240","line":30,"column":24,"nodeType":"241","messageId":"242","endLine":30,"endColumn":26},{"ruleId":"239","severity":1,"message":"240","line":45,"column":24,"nodeType":"241","messageId":"242","endLine":45,"endColumn":26},{"ruleId":"239","severity":1,"message":"240","line":45,"column":48,"nodeType":"241","messageId":"242","endLine":45,"endColumn":50},{"ruleId":"239","severity":1,"message":"240","line":58,"column":27,"nodeType":"241","messageId":"242","endLine":58,"endColumn":29},{"ruleId":"230","severity":1,"message":"263","line":74,"column":8,"nodeType":"232","endLine":74,"endColumn":10,"suggestions":"272"},{"ruleId":"243","severity":1,"message":"244","line":170,"column":199,"nodeType":"245","endLine":170,"endColumn":210},{"ruleId":"239","severity":1,"message":"240","line":24,"column":24,"nodeType":"241","messageId":"242","endLine":24,"endColumn":26},{"ruleId":"239","severity":1,"message":"240","line":24,"column":48,"nodeType":"241","messageId":"242","endLine":24,"endColumn":50},{"ruleId":"239","severity":1,"message":"240","line":34,"column":27,"nodeType":"241","messageId":"242","endLine":34,"endColumn":29},{"ruleId":"230","severity":1,"message":"263","line":49,"column":8,"nodeType":"232","endLine":49,"endColumn":10,"suggestions":"273"},{"ruleId":"230","severity":1,"message":"263","line":36,"column":8,"nodeType":"232","endLine":36,"endColumn":10,"suggestions":"274"},{"ruleId":"246","severity":1,"message":"247","line":48,"column":39,"nodeType":"248","endLine":48,"endColumn":102},{"ruleId":"223","severity":1,"message":"275","line":4,"column":8,"nodeType":"225","messageId":"226","endLine":4,"endColumn":20},{"ruleId":"230","severity":1,"message":"276","line":48,"column":8,"nodeType":"232","endLine":48,"endColumn":10,"suggestions":"277"},{"ruleId":"239","severity":1,"message":"240","line":197,"column":59,"nodeType":"241","messageId":"242","endLine":197,"endColumn":61},{"ruleId":"239","severity":1,"message":"240","line":197,"column":98,"nodeType":"241","messageId":"242","endLine":197,"endColumn":100},{"ruleId":"239","severity":1,"message":"240","line":248,"column":59,"nodeType":"241","messageId":"242","endLine":248,"endColumn":61},{"ruleId":"239","severity":1,"message":"240","line":272,"column":59,"nodeType":"241","messageId":"242","endLine":272,"endColumn":61},{"ruleId":"243","severity":1,"message":"244","line":296,"column":182,"nodeType":"245","endLine":296,"endColumn":197},{"ruleId":"239","severity":1,"message":"240","line":24,"column":24,"nodeType":"241","messageId":"242","endLine":24,"endColumn":26},{"ruleId":"239","severity":1,"message":"240","line":24,"column":48,"nodeType":"241","messageId":"242","endLine":24,"endColumn":50},{"ruleId":"239","severity":1,"message":"240","line":37,"column":27,"nodeType":"241","messageId":"242","endLine":37,"endColumn":29},{"ruleId":"239","severity":1,"message":"240","line":42,"column":27,"nodeType":"241","messageId":"242","endLine":42,"endColumn":29},{"ruleId":"230","severity":1,"message":"263","line":65,"column":8,"nodeType":"232","endLine":65,"endColumn":10,"suggestions":"278"},{"ruleId":"223","severity":1,"message":"279","line":22,"column":12,"nodeType":"225","messageId":"226","endLine":22,"endColumn":15},{"ruleId":"223","severity":1,"message":"280","line":22,"column":17,"nodeType":"225","messageId":"226","endLine":22,"endColumn":23},{"ruleId":"239","severity":1,"message":"240","line":76,"column":62,"nodeType":"241","messageId":"242","endLine":76,"endColumn":64},{"ruleId":"239","severity":1,"message":"240","line":76,"column":135,"nodeType":"241","messageId":"242","endLine":76,"endColumn":137},{"ruleId":"239","severity":1,"message":"240","line":93,"column":36,"nodeType":"241","messageId":"242","endLine":93,"endColumn":38},{"ruleId":"239","severity":1,"message":"240","line":155,"column":36,"nodeType":"241","messageId":"242","endLine":155,"endColumn":38},{"ruleId":"239","severity":1,"message":"240","line":156,"column":36,"nodeType":"241","messageId":"242","endLine":156,"endColumn":38},{"ruleId":"239","severity":1,"message":"240","line":157,"column":36,"nodeType":"241","messageId":"242","endLine":157,"endColumn":38},{"ruleId":"239","severity":1,"message":"240","line":158,"column":36,"nodeType":"241","messageId":"242","endLine":158,"endColumn":38},{"ruleId":"223","severity":1,"message":"227","line":2,"column":17,"nodeType":"225","messageId":"226","endLine":2,"endColumn":26},{"ruleId":"223","severity":1,"message":"281","line":2,"column":28,"nodeType":"225","messageId":"226","endLine":2,"endColumn":36},{"ruleId":"223","severity":1,"message":"279","line":16,"column":12,"nodeType":"225","messageId":"226","endLine":16,"endColumn":15},{"ruleId":"223","severity":1,"message":"280","line":16,"column":17,"nodeType":"225","messageId":"226","endLine":16,"endColumn":23},{"ruleId":"239","severity":1,"message":"240","line":66,"column":36,"nodeType":"241","messageId":"242","endLine":66,"endColumn":38},{"ruleId":"239","severity":1,"message":"240","line":104,"column":36,"nodeType":"241","messageId":"242","endLine":104,"endColumn":38},{"ruleId":"239","severity":1,"message":"240","line":105,"column":36,"nodeType":"241","messageId":"242","endLine":105,"endColumn":38},{"ruleId":"239","severity":1,"message":"240","line":106,"column":36,"nodeType":"241","messageId":"242","endLine":106,"endColumn":38},{"ruleId":"239","severity":1,"message":"240","line":107,"column":36,"nodeType":"241","messageId":"242","endLine":107,"endColumn":38},"no-native-reassign",["282"],"no-negated-in-lhs",["283"],"no-unused-vars","'useLocation' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'td' is defined but never used.","'loaded' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchPlans'. Either include it or remove the dependency array.","ArrayExpression",["284"],"'Link' is defined but never used.","React Hook useEffect contains a call to 'setAppName'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [history] as a second argument to the useEffect Hook.",["285"],"Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["286"],"'setLoaded' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchUsers'. Either include it or remove the dependency array.",["287"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'openIntergrate' is assigned a value but never used.","'response' is assigned a value but never used.","Expected '!==' and instead saw '!='.",["288"],"React Hook useEffect has a missing dependency: 'fetchRestocks'. Either include it or remove the dependency array.",["289"],"React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.",["290"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","'background' is assigned a value but never used.","'setBackground' is assigned a value but never used.",["291"],["292"],["293"],"'makeAnimated' is defined but never used.","React Hook useEffect has missing dependencies: 'currentPlanData.planName', 'currentPlanData.role', and 'currentPlanData.unbindable'. Either include them or remove the dependency array. If 'setunbinding' needs the current value of 'currentPlanData.unbindable', you can also switch to useReducer instead of useState and read 'currentPlanData.unbindable' in the reducer.",["294"],["295"],"'key' is assigned a value but never used.","'setKey' is assigned a value but never used.","'useState' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"296","fix":"297"},{"desc":"298","fix":"299"},{"desc":"296","fix":"300"},{"desc":"301","fix":"302"},{"desc":"296","fix":"303"},{"desc":"304","fix":"305"},{"desc":"306","fix":"307"},{"desc":"306","fix":"308"},{"desc":"306","fix":"309"},{"desc":"306","fix":"310"},{"desc":"311","fix":"312"},{"desc":"306","fix":"313"},"Update the dependencies array to be: [fetchPlans]",{"range":"314","text":"315"},"Add dependencies array: [history]",{"range":"316","text":"317"},{"range":"318","text":"315"},"Update the dependencies array to be: [fetchUsers]",{"range":"319","text":"320"},{"range":"321","text":"315"},"Update the dependencies array to be: [fetchRestocks]",{"range":"322","text":"323"},"Update the dependencies array to be: [fetchData]",{"range":"324","text":"325"},{"range":"326","text":"325"},{"range":"327","text":"325"},{"range":"328","text":"325"},"Update the dependencies array to be: [currentPlanData.planName, currentPlanData.role, currentPlanData.unbindable]",{"range":"329","text":"330"},{"range":"331","text":"325"},[1240,1242],"[fetchPlans]",[1164,1164],", [history]",[1038,1040],[904,906],"[fetchUsers]",[1065,1067],[1108,1110],"[fetchRestocks]",[973,975],"[fetchData]",[3176,3178],[2035,2037],[754,756],[1474,1476],"[currentPlanData.planName, currentPlanData.role, currentPlanData.unbindable]",[2753,2755]]